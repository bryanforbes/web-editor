{"version":3,"file":"IconCss.js","sourceRoot":"","sources":["../src/IconCss.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;IAAA,yCAAwC;IAExC,2DAAsD;IACtD,yCAAyD;IAmBzD;;;;;OAKG;IACH,2BAA2B,UAAkB,EAAE,SAAiB,EAAE,KAAe;QAEhF,IAAM,QAAQ,GAAG,IAAI,oBAAY,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC;QACrD,IAAI,MAAM,GAAG,EAAE,CAAC;QAEhB,gBAAgB,QAAgB;YAC/B,MAAM,CAAC,QAAQ,GAAG,UAAU,CAAC;QAC9B,CAAC;QAED;YAAoB,iBAAoB;iBAApB,UAAoB,EAApB,qBAAoB,EAApB,IAAoB;gBAApB,4BAAoB;;YACvC,MAAM,CAAC,GAAG,GAAG,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAChC,CAAC;QAED,mBAAmB,QAAgB,EAAE,OAAe;YACnD,MAAM,CAAI,MAAM,CAAC,QAAQ,CAAC,gDAA2C,OAAO,YAAS,CAAC;QACvF,CAAC;QAED,GAAG,CAAC,CAAC,IAAM,GAAG,IAAI,KAAK,CAAC,eAAe,CAAC,CAAC,CAAC;YACzC,MAAM,IAAI,SAAS,CAAC,UAAU,CAAC,SAAS,EAAE,GAAG,CAAC,EAAE,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC;QACxE,CAAC;QAED,MAAM,CAAC,MAAM,CAAC;IACf,CAAC;IAED;QAAqC,2BAA6B;QAAlE;;QASA,CAAC;QARA,wBAAM,GAAN;YACC,MAAM,CAAC,KAAC,CAAC,OAAO,EAAE;gBACjB,KAAK,EAAE,QAAQ;gBACf,IAAI,EAAE,UAAU;aAChB,EAAE;gBACF,IAAI,CAAC,UAAU,CAAC,KAAK,IAAI,IAAI,CAAC,UAAU,CAAC,UAAU,IAAI,iBAAiB,CAAC,IAAI,CAAC,UAAU,CAAC,UAAU,EAAE,IAAI,CAAC,UAAU,CAAC,SAAS,EAAE,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,IAAI,IAAI;aAC9J,CAAC,CAAC;QACJ,CAAC;QACF,cAAC;IAAD,CAAC,AATD,CAAqC,oBAAU,GAS9C","sourcesContent":["import { v } from '@dojo/widget-core/d';\nimport { WidgetProperties } from '@dojo/widget-core/interfaces';\nimport WidgetBase from '@dojo/widget-core/WidgetBase';\nimport { IconJson, IconResolver } from './support/icons';\n\nexport interface IconCssProperties extends WidgetProperties {\n\t/**\n\t * The base class which identifies nodes that should have an icon\n\t */\n\tbaseClass: string;\n\n\t/**\n\t * An object structure which defines the different icons\n\t */\n\ticons?: IconJson;\n\n\t/**\n\t * The root path where the icons are located\n\t */\n\tsourcePath?: string;\n}\n\n/**\n * A function that converts an `IconJson` structure into CSS text\n * @param sourcePath The base URL where the icons are located\n * @param baseClass The base class name which an icon is based off of\n * @param icons An object structure that defines icon classes\n */\nfunction getStylesFromJson(sourcePath: string, baseClass: string, icons: IconJson): string {\n\n\tconst resolver = new IconResolver(sourcePath, icons);\n\tlet styles = '';\n\n\tfunction before(selector: string): string {\n\t\treturn selector + '::before';\n\t}\n\n\tfunction toSelector(...classes: string[]): string {\n\t\treturn '.' + classes.join('.');\n\t}\n\n\tfunction iconStyle(selector: string, iconUrl: string): string {\n\t\treturn `${before(selector)} { content: ' '; background-image: url('${iconUrl}'); }\\n`;\n\t}\n\n\tfor (const key in icons.iconDefinitions) {\n\t\tstyles += iconStyle(toSelector(baseClass, key), resolver.iconUrl(key));\n\t}\n\n\treturn styles;\n}\n\nexport default class IconCss extends WidgetBase<IconCssProperties> {\n\trender() {\n\t\treturn v('style', {\n\t\t\tmedia: 'screen',\n\t\t\ttype: 'text/css'\n\t\t}, [\n\t\t\tthis.properties.icons && this.properties.sourcePath && getStylesFromJson(this.properties.sourcePath, this.properties.baseClass, this.properties.icons) || null\n\t\t]);\n\t}\n}\n"]}