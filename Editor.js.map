{"version":3,"file":"Editor.js","sourceRoot":"","sources":["../src/Editor.ts"],"names":[],"mappings":"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","sourcesContent":["import global from '@dojo/core/global';\nimport { createHandle } from '@dojo/core/lang';\nimport { queueTask } from '@dojo/core/queue';\nimport { debounce } from '@dojo/core/util';\nimport { v, w } from '@dojo/widget-core/d';\nimport { WidgetProperties } from '@dojo/widget-core/interfaces';\nimport WidgetBase from '@dojo/widget-core/WidgetBase';\nimport { ThemeableMixin, ThemeableProperties, theme } from '@dojo/widget-core/mixins/Themeable';\nimport DomWrapper from '@dojo/widget-core/util/DomWrapper';\nimport project from './project';\nimport * as css from './styles/editor.m.css';\n\nconst globalMonaco: typeof monaco = global.monaco;\n\n/**\n * Properties that can be set on an `Editor` widget\n */\nexport interface EditorProperties extends WidgetProperties, ThemeableProperties {\n\t/**\n\t * The filename (from the current `project`) that the editor should be displaying for editing\n\t */\n\tfilename?: string;\n\n\t/**\n\t * Editor options that should be passed to the monaco editor when it is created\n\t */\n\toptions?: monaco.editor.IEditorOptions;\n\n\t/**\n\t * Called when the monaco editor is created and initialized by the widget, passing the instance of the monaco editor\n\t */\n\tonEditorInit?(editor: monaco.editor.IStandaloneCodeEditor): void;\n\n\t/**\n\t * Called when the widget calls `.layout()` on the monaco editor\n\t */\n\tonEditorLayout?(): void;\n}\n\nexport interface TextEditorOptions extends monaco.editor.IEditorOptions {\n\n\t/**\n\t * Text editor selection.\n\t */\n\tselection?: {\n\t\tstartLineNumber: number;\n\t\tstartColumn: number;\n\t\tendLineNumber?: number;\n\t\tendColumn?: number;\n\t};\n}\n\nexport interface ResourceInput {\n\n\t/**\n\t * The resource URL of the resource to open.\n\t */\n\tresource: monaco.Uri;\n\n\t/**\n\t * The encoding of the text input if known.\n\t */\n\tencoding?: string;\n\n\t/**\n\t * Optional options to use when opening the text input.\n\t */\n\toptions?: TextEditorOptions;\n}\n\nexport interface TextEditorModel extends monaco.editor.IEditorModel {\n\ttextEditorModel: any;\n}\n\nexport class EditorService {\n\t_serviceBrand: any;\n\topenEditor(input: ResourceInput, sideBySide?: boolean): Promise<monaco.editor.IEditor> {\n\t\tconsole.log('openEditor', input);\n\t\treturn Promise.resolve({});\n\t}\n\tresolveEditor(input: ResourceInput, refresh?: boolean): Promise<TextEditorModel> {\n\t\tconsole.log('resolveEditor', input);\n\t\treturn Promise.resolve({});\n\t}\n}\n\nconst ThemeableBase = ThemeableMixin(WidgetBase);\n\n/**\n * A Widget which will render a wrapped `monaco-editor`\n */\n@theme(css)\nexport default class Editor extends ThemeableBase<EditorProperties> {\n\tprivate _editor: monaco.editor.IStandaloneCodeEditor | undefined;\n\tprivate _editorService: EditorService;\n\tprivate _EditorDom: DomWrapper;\n\tprivate _didChangeHandle: monaco.IDisposable;\n\tprivate _doLayout = async () => {\n\t\tthis._queuedLayout = false;\n\t\tif (!this._editor) {\n\t\t\treturn;\n\t\t}\n\t\tthis._editor.layout();\n\t\tconst { onEditorLayout } = this.properties;\n\t\tonEditorLayout && onEditorLayout();\n\t}\n\tprivate _onAttached = () => {\n\t\tif (!this._editor) {\n\t\t\tconst {\n\t\t\t\t_onDidChangeModelContent,\n\t\t\t\t_root,\n\t\t\t\tproperties: {\n\t\t\t\t\tonEditorInit,\n\t\t\t\t\toptions\n\t\t\t\t}\n\t\t\t} = this;\n\t\t\tconst editorService = this._editorService = new EditorService();\n\t\t\tconst editor = this._editor = globalMonaco.editor.create(_root, options, { editorService });\n\t\t\tconst didChangeHandle = this._didChangeHandle = editor.onDidChangeModelContent(debounce(_onDidChangeModelContent, 1000));\n\t\t\tthis._setModel();\n\t\t\tonEditorInit && onEditorInit(editor);\n\n\t\t\tthis.own(createHandle(() => {\n\t\t\t\tif (editor) {\n\t\t\t\t\teditor.dispose();\n\t\t\t\t\tdidChangeHandle.dispose();\n\t\t\t\t}\n\t\t\t}));\n\t\t}\n\t}\n\tprivate _onDidChangeModelContent = () => {\n\t\tif (this.properties.filename) {\n\t\t\tproject.setFileDirty(this.properties.filename);\n\t\t}\n\t}\n\tprivate _queuedLayout = false;\n\tprivate _root: HTMLDivElement;\n\n\tprivate _setModel() {\n\t\tconst { filename } = this.properties;\n\t\tif (this._editor && filename && project.includes(filename)) {\n\t\t\tthis._editor.setModel(project.getFileModel(filename));\n\t\t}\n\t}\n\n\tconstructor() {\n\t\tsuper();\n\t\tconst root = this._root = document.createElement('div');\n\t\tthis._EditorDom = DomWrapper(root, { onAttached: this._onAttached });\n\t}\n\n\tpublic render() {\n\t\tif (!this._queuedLayout) {\n\t\t\t/* doing this async, during the next major task, to allow the widget to actually render */\n\t\t\tthis._queuedLayout = true;\n\t\t\tqueueTask(this._doLayout);\n\t\t}\n\t\tthis._setModel();\n\t\treturn this.properties.filename ?\n\t\t\t/* DomWrapper ignores `onAttached` here, but is needed to make testing possible */\n\t\t\tw(this._EditorDom, { key: 'editor', classes: this.classes(css.root), onAttached: this._onAttached }) :\n\t\t\tv('div', { classes: this.classes(css.root), key: 'editor' });\n\t}\n}\n"]}