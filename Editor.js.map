{"version":3,"file":"Editor.js","sourceRoot":"","sources":["../src/Editor.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;IAAA,sDAAiD;IACjD,wCAA+C;IAC/C,wCAA2C;IAC3C,qCAAgC;IAEhC;;OAEG;IACH;QAAoC,0BAAW;QAQ9C;;;WAGG;QACH,gBAAa,OAAoB,EAAE,OAAsC;YAAzE,YACC,iBAAO,SASP;YAlBO,8BAAwB,GAAG;gBAClC,iBAAO,CAAC,YAAY,CAAC,KAAI,CAAC,YAAY,CAAC,CAAC;YACzC,CAAC,CAAA;YASA,KAAI,CAAC,OAAO,GAAG,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;YACtD,IAAM,eAAe,GAAG,KAAI,CAAC,OAAO,CAAC,uBAAuB,CAAC,eAAQ,CAAC,KAAI,CAAC,wBAAwB,EAAE,IAAI,CAAC,CAAC,CAAC;YAE5G,KAAI,CAAC,GAAG,CAAC,mBAAY,CAAC;gBACrB,KAAI,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;gBACvB,eAAe,CAAC,OAAO,EAAE,CAAC;YAC3B,CAAC,CAAC,CAAC,CAAC;;QACL,CAAC;QAED;;;WAGG;QACH,wBAAO,GAAP,UAAQ,QAAgB;YACvB,EAAE,CAAC,CAAC,CAAC,iBAAO,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;gBACjC,MAAM,IAAI,KAAK,CAAC,YAAS,QAAQ,mCAA+B,CAAC,CAAC;YACnE,CAAC;YACD,IAAI,CAAC,YAAY,GAAG,QAAQ,CAAC;YAC7B,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,iBAAO,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC,CAAC;QACvD,CAAC;QACF,aAAC;IAAD,CAAC,AAnCD,CAAoC,qBAAW,GAmC9C","sourcesContent":["import Destroyable from '@dojo/core/Destroyable';\nimport { createHandle } from '@dojo/core/lang';\nimport { debounce } from '@dojo/core/util';\nimport project from './project';\n\n/**\n * A class which is a simple abstraction of the `monaco-editor` editor\n */\nexport default class Editor extends Destroyable {\n\tprivate _currentFile: string;\n\tprivate _editor: monaco.editor.IStandaloneCodeEditor;\n\n\tprivate _onDidChangeModelContent = () => {\n\t\tproject.setFileDirty(this._currentFile);\n\t}\n\n\t/**\n\t * A class which is a simple abstraction of the `monaco-editor` editor\n\t * @param element The root HTML element to attach the editor to\n\t */\n\tconstructor (element: HTMLElement, options?: monaco.editor.IEditorOptions) {\n\t\tsuper();\n\n\t\tthis._editor = monaco.editor.create(element, options);\n\t\tconst didChangeHandle = this._editor.onDidChangeModelContent(debounce(this._onDidChangeModelContent, 1000));\n\n\t\tthis.own(createHandle(() => {\n\t\t\tthis._editor.dispose();\n\t\t\tdidChangeHandle.dispose();\n\t\t}));\n\t}\n\n\t/**\n\t * Display a file in the editor from the currently loaded project\n\t * @param model The model to display\n\t */\n\tdisplay(filename: string): void {\n\t\tif (!project.includes(filename)) {\n\t\t\tthrow new Error(`File \"${filename}\" is not part of the project.`);\n\t\t}\n\t\tthis._currentFile = filename;\n\t\tthis._editor.setModel(project.getFileModel(filename));\n\t}\n}\n"]}