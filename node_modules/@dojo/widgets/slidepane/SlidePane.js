var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "@dojo/widget-core/mixins/Themeable", "@dojo/widget-core/d", "@dojo/widget-core/WidgetBase", "../common/styles/animations.m.css", "./styles/slidePane.m.css", "../common/styles/icons.m.css", "@dojo/core/uuid"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var Themeable_1 = require("@dojo/widget-core/mixins/Themeable");
    var d_1 = require("@dojo/widget-core/d");
    var WidgetBase_1 = require("@dojo/widget-core/WidgetBase");
    var animations = require("../common/styles/animations.m.css");
    var css = require("./styles/slidePane.m.css");
    var iconCss = require("../common/styles/icons.m.css");
    var uuid_1 = require("@dojo/core/uuid");
    ;
    ;
    /**
     * The default width of the slide pane
     */
    var DEFAULT_WIDTH = 320;
    /**
     * The minimum swipe delta in px required to be counted as a swipe and not a touch / click
     */
    var SWIPE_THRESHOLD = 5;
    exports.SlidePaneBase = Themeable_1.ThemeableMixin(WidgetBase_1.WidgetBase);
    var SlidePane = /** @class */ (function (_super) {
        __extends(SlidePane, _super);
        function SlidePane() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this._titleId = uuid_1.default();
            return _this;
        }
        SlidePane.prototype._onCloseClick = function () {
            var onRequestClose = this.properties.onRequestClose;
            onRequestClose && onRequestClose();
        };
        SlidePane.prototype._onSwipeStart = function (event) {
            this._swiping = true;
            // Cache initial pointer position
            this._initialX = event.type === 'touchstart' ? event.changedTouches[0].screenX : event.pageX;
            // Clear out the last transform applied
            this._transform = 0;
        };
        SlidePane.prototype._onSwipeMove = function (event) {
            // Ignore mouse movement when not clicking
            if (!this._swiping) {
                return;
            }
            var _a = this.properties, _b = _a.align, align = _b === void 0 ? 0 /* left */ : _b, _c = _a.width, width = _c === void 0 ? DEFAULT_WIDTH : _c;
            // Current pointer position
            var currentX = event.type === 'touchmove' ? event.changedTouches[0].screenX : event.pageX;
            // Difference between current and initial pointer position
            var delta = align === 1 /* right */ ? currentX - this._initialX : this._initialX - currentX;
            // Transform to apply
            this._transform = 100 * delta / width;
            // Prevent pane from sliding past screen edge
            if (delta <= 0) {
                return;
            }
            // Move the pane
            this._content.style.transform = "translateX(" + (align === 0 /* left */ ? '-' : '') + this._transform + "%)";
        };
        SlidePane.prototype._onSwipeEnd = function (event) {
            var changedTouches = event.changedTouches, pageX = event.pageX, target = event.target, type = event.type;
            this._swiping = false;
            var _a = this.properties, _b = _a.align, align = _b === void 0 ? 0 /* left */ : _b, onRequestClose = _a.onRequestClose, _c = _a.width, width = _c === void 0 ? DEFAULT_WIDTH : _c;
            // Current pointer position
            var currentX = type === 'touchend' ? changedTouches[0].screenX : pageX;
            // Difference between current and initial pointer position
            var delta = align === 1 /* right */ ? currentX - this._initialX : this._initialX - currentX;
            // If the pane was swiped far enough to close
            if (delta > width / 2) {
                // Cache the transform to apply on next render
                this._transform = 100 * delta / width;
                onRequestClose && onRequestClose();
            }
            else if (Math.abs(delta) < SWIPE_THRESHOLD && (!this._content || !this._content.contains(target))) {
                onRequestClose && onRequestClose();
            }
            else if (delta > 0) {
                // Animate the pane back open
                this._slideIn = true;
                this.invalidate();
            }
        };
        SlidePane.prototype.onElementCreated = function (element, key) {
            if (key === 'content') {
                element.addEventListener('transitionend', this.invalidate.bind(this));
                this._content = element;
            }
        };
        SlidePane.prototype.render = function () {
            var _a = this.properties, _b = _a.align, align = _b === void 0 ? 0 /* left */ : _b, _c = _a.closeText, closeText = _c === void 0 ? 'close pane' : _c, onOpen = _a.onOpen, _d = _a.open, open = _d === void 0 ? false : _d, _e = _a.title, title = _e === void 0 ? '' : _e, _f = _a.underlay, underlay = _f === void 0 ? false : _f, _g = _a.width, width = _g === void 0 ? DEFAULT_WIDTH : _g;
            var contentClasses = [
                css.pane,
                align === 0 /* left */ ? css.left : css.right,
                open ? css.open : null,
                this._slideIn || (open && !this._wasOpen) ? css.slideIn : null,
                !open && this._wasOpen ? css.slideOut : null
            ];
            var fixedContentClasses = [
                css.paneFixed,
                open ? css.openFixed : null,
                align === 0 /* left */ ? css.leftFixed : css.rightFixed,
                this._slideIn || (open && !this._wasOpen) ? css.slideInFixed : null,
                !open && this._wasOpen ? css.slideOutFixed : null
            ];
            var contentStyles = {
                transform: '',
                width: width + 'px'
            };
            if (!open && this._wasOpen && this._transform) {
                // If pane is closing because of swipe
                contentStyles['transform'] = "translateX(" + (align === 0 /* left */ ? '-' : '') + this._transform + "%)";
            }
            else if (this._slideIn && this._content) {
                this._content.style.transform = '';
            }
            open && !this._wasOpen && onOpen && onOpen();
            this._wasOpen = open;
            this._slideIn = false;
            return d_1.v('div', {
                'aria-labelledby': this._titleId,
                classes: this.classes(css.root),
                onmousedown: this._onSwipeStart,
                onmousemove: this._onSwipeMove,
                onmouseup: this._onSwipeEnd,
                ontouchend: this._onSwipeEnd,
                ontouchmove: this._onSwipeMove,
                ontouchstart: this._onSwipeStart
            }, [
                open ? d_1.v('div', {
                    classes: this.classes(underlay ? css.underlayVisible : null).fixed(css.underlay),
                    enterAnimation: animations.fadeIn,
                    exitAnimation: animations.fadeOut,
                    key: 'underlay'
                }) : null,
                d_1.v('div', {
                    key: 'content',
                    classes: (_h = this.classes.apply(this, contentClasses)).fixed.apply(_h, fixedContentClasses),
                    styles: contentStyles
                }, [
                    title ? d_1.v('div', {
                        classes: this.classes(css.title),
                        key: 'title'
                    }, [
                        d_1.v('div', { id: this._titleId }, [title]),
                        d_1.v('button', {
                            classes: this.classes(css.close),
                            onclick: this._onCloseClick
                        }, [
                            closeText,
                            d_1.v('i', { classes: this.classes(iconCss.icon, iconCss.closeIcon),
                                role: 'presentation', 'aria-hidden': 'true'
                            })
                        ])
                    ]) : null,
                    d_1.v('div', { classes: this.classes(css.content) }, this.children)
                ])
            ]);
            var _h;
        };
        SlidePane = __decorate([
            Themeable_1.theme(css),
            Themeable_1.theme(iconCss)
        ], SlidePane);
        return SlidePane;
    }(exports.SlidePaneBase));
    exports.default = SlidePane;
});
//# sourceMappingURL=SlidePane.js.map