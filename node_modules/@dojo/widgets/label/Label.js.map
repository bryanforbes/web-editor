{"version":3,"file":"Label.js","sourceRoot":"","sources":["Label.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;IAAA,2DAA0D;IAE1D,gEAAsH;IACtH,8DAAkE;IAElE,yCAAwC;IACxC,wCAAyC;IACzC,qDAAuD;IAWvD;;OAEG;IACH,IAAM,aAAa,GAAG;QACrB,OAAO,EAAE,EAAE;QACX,MAAM,EAAE,IAAI;QACZ,MAAM,EAAE,KAAK;KACb,CAAC;IAkBW,QAAA,SAAS,GAAG,wBAAa,CAAC,0BAAc,CAAC,uBAAU,CAAC,CAAC,CAAC;IAGnE,IAAqB,KAAK;QAAS,yBAA0B;QAA7D;;QAmCA,CAAC;QAjCA,sBAAM,GAAN;YACO,IAAA,oBAIa,EAHlB,kBAAM,EACN,gBAAK,EACL,eAAY,EAAZ,iCAAY,CACO;YAEpB,yDAAyD;YACzD,IAAI,UAAwB,CAAC;YAC7B,EAAE,CAAC,CAAC,OAAO,KAAK,KAAK,QAAQ,CAAC,CAAC,CAAC;gBAC/B,UAAU,GAAG,aAAM,CAAC,EAAE,EAAE,aAAa,EAAE,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC,CAAC;YAC5D,CAAC;YACD,IAAI,CAAC,CAAC;gBACL,UAAU,GAAG,aAAM,CAAC,EAAE,EAAE,aAAa,EAAE,KAAK,CAAC,CAAC;YAC/C,CAAC;YAED,kCAAkC;YAClC,IAAM,SAAS,GAAG,KAAC,CAAC,MAAM,EAAE;gBAC3B,SAAS,EAAE,UAAU,CAAC,OAAO;gBAC7B,OAAO,EAAE,IAAI,CAAC,OAAO,EAAE,CAAC,KAAK,CAAC,UAAU,CAAC,MAAM,GAAG,OAAO,CAAC,cAAc,GAAG,IAAI,CAAC;aAChF,CAAC,CAAC;YACH,EAAE,CAAC,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC;gBACvB,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;YAClC,CAAC;YACD,IAAI,CAAC,CAAC;gBACL,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;YAC/B,CAAC;YAED,MAAM,CAAC,KAAC,CAAC,OAAO,EAAE;gBACjB,MAAM,EAAE,MAAM;gBACd,OAAO,EAAE,OAAO;aAChB,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;QACnB,CAAC;QACF,YAAC;IAAD,CAAC,AAnCD,CAAmC,iBAAS,GAmC3C;IAnCoB,KAAK;QADzB,iBAAK,CAAC,OAAO,CAAC;OACM,KAAK,CAmCzB;sBAnCoB,KAAK","sourcesContent":["import { WidgetBase } from '@dojo/widget-core/WidgetBase';\nimport { DNode } from '@dojo/widget-core/interfaces';\nimport { ThemeableMixin, ThemeableProperties, theme, ClassesFunctionChain } from '@dojo/widget-core/mixins/Themeable';\nimport { RegistryMixin } from '@dojo/widget-core/mixins/Registry';\nimport { WidgetRegistry } from '@dojo/widget-core/WidgetRegistry';\nimport { v } from '@dojo/widget-core/d';\nimport { assign } from '@dojo/core/lang';\nimport * as baseCss from '../common/styles/base.m.css';\n\n/**\n * Label settings for form label text content, position (before or after), and visibility\n */\nexport interface LabelOptions {\n\tcontent: string;\n\tbefore?: boolean;\n\thidden?: boolean;\n}\n\n/**\n * Default settings for form labels\n */\nconst labelDefaults = {\n\tcontent: '',\n\tbefore: true,\n\thidden: false\n};\n\n/**\n * @type LabelWidgetProperties\n *\n * Properties that can be set on a Label component\n *\n * @property classes    Optional classes to be set on the label node\n * @property formId     ID of a form element associated with the form field\n * @property label      Label settings for form label text, position, and visibility\n */\nexport interface LabelProperties extends ThemeableProperties {\n\tregistry?: WidgetRegistry;\n\tclasses?: ClassesFunctionChain;\n\tformId?: string;\n\tlabel: string | LabelOptions;\n}\n\nexport const LabelBase = RegistryMixin(ThemeableMixin(WidgetBase));\n\n@theme(baseCss)\nexport default class Label extends LabelBase<LabelProperties>  {\n\n\trender(): DNode {\n\t\tconst {\n\t\t\tformId,\n\t\t\tlabel,\n\t\t\tclasses = {}\n\t\t} = this.properties;\n\n\t\t// assign string or object label properites with defaults\n\t\tlet labelProps: LabelOptions;\n\t\tif (typeof label === 'string') {\n\t\t\tlabelProps = assign({}, labelDefaults, { content: label });\n\t\t}\n\t\telse {\n\t\t\tlabelProps = assign({}, labelDefaults, label);\n\t\t}\n\n\t\t// add label text node to children\n\t\tconst labelText = v('span', {\n\t\t\tinnerHTML: labelProps.content,\n\t\t\tclasses: this.classes().fixed(labelProps.hidden ? baseCss.visuallyHidden : null)\n\t\t});\n\t\tif (labelProps.before) {\n\t\t\tthis.children.unshift(labelText);\n\t\t}\n\t\telse {\n\t\t\tthis.children.push(labelText);\n\t\t}\n\n\t\treturn v('label', {\n\t\t\t'form': formId,\n\t\t\tclasses: classes\n\t\t}, this.children);\n\t}\n}\n"]}