var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "@dojo/shim/string", "@dojo/widget-core/d", "@dojo/widget-core/mixins/Themeable", "@dojo/widget-core/WidgetBase", "@dojo/widget-core/decorators/diffProperty", "@dojo/widget-core/diff", "./styles/timePicker.m.css", "../combobox/ComboBox", "../label/Label"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var string_1 = require("@dojo/shim/string");
    var d_1 = require("@dojo/widget-core/d");
    var Themeable_1 = require("@dojo/widget-core/mixins/Themeable");
    var WidgetBase_1 = require("@dojo/widget-core/WidgetBase");
    var diffProperty_1 = require("@dojo/widget-core/decorators/diffProperty");
    var diff_1 = require("@dojo/widget-core/diff");
    var css = require("./styles/timePicker.m.css");
    var ComboBox_1 = require("../combobox/ComboBox");
    var Label_1 = require("../label/Label");
    /**
     * @private
     * Regular epression that matches a standard time string ('HH:mm:ss').
     */
    var TIME_PATTERN = /^\d{2}:\d{2}(:\d{2})?$/;
    /**
     * Generate an array of time unit objects from the specified start date to the specified end date.
     *
     * @param start    The start time. Defaults to midnight.
     * @param end      The end time. Defaults to 23:59:59.
     * @param step     The amount of time in seconds between each step. Defaults to 60.
     * @return         An array of time unit objects.
     */
    function getOptions(start, end, step) {
        if (start === void 0) { start = '00:00:00'; }
        if (end === void 0) { end = '23:59:59'; }
        if (step === void 0) { step = 60; }
        var endUnits = parseUnits(end);
        var startUnits = parseUnits(start);
        var endTime = getTime(endUnits);
        var date = new Date();
        var time = getTime(startUnits, date);
        var i = step * 1000;
        var options = [];
        while (time <= endTime) {
            options.push(time);
            time += i;
        }
        return options.map(function (time) {
            date.setTime(time);
            return {
                hour: date.getHours(),
                minute: date.getMinutes(),
                second: date.getSeconds()
            };
        });
    }
    exports.getOptions = getOptions;
    /**
     * @private
     * Create a numeric timestamp for the specified hour, minute, and second units.
     *
     * @param units   An object containing the hours, minutes, and seconds for the time.
     * @param date    An optional date object.
     * @return        The timestamp, in milliseconds, according to universal time.
     */
    function getTime(units, date) {
        if (date === void 0) { date = new Date(); }
        var hour = units.hour, minute = units.minute, second = units.second;
        date.setHours(hour);
        date.setMinutes(minute);
        date.setSeconds(second);
        date.setMilliseconds(0);
        return date.getTime();
    }
    /**
     * Convert a standard time string into an object with `hour`, `minute`, and `second` number properties.
     *
     * For example, '12:30' is converted to `{ hour: 12, minute: 30, second: 0 }`, and '19:03:27' is converted
     * to `{ hour: 19, minute: 3, second: 27 }`.
     *
     * @param value   A standard time string or an object with `hour`, `minute`, and `second` properties.
     * @return        An object containing `hour`, `second`, and `number` properties.
     */
    function parseUnits(value) {
        if (typeof value === 'string') {
            if (!TIME_PATTERN.test(value)) {
                throw new Error('Time strings must be in the format HH:mm or HH:mm:ss');
            }
            var _a = value.split(':').map(function (unit) { return parseInt(unit, 10); }), hour = _a[0], minute = _a[1], _b = _a[2], second = _b === void 0 ? 0 : _b;
            return { hour: hour, minute: minute, second: second };
        }
        return value;
    }
    exports.parseUnits = parseUnits;
    exports.TimePickerBase = Themeable_1.default(WidgetBase_1.WidgetBase);
    var TimePicker = /** @class */ (function (_super) {
        __extends(TimePicker, _super);
        function TimePicker() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        TimePicker.prototype.render = function () {
            var _a = this.properties, disabled = _a.disabled, invalid = _a.invalid, label = _a.label, readOnly = _a.readOnly, required = _a.required, useNativeElement = _a.useNativeElement;
            if (useNativeElement) {
                var input = this.renderNativeInput();
                var children = [input];
                if (label) {
                    children = [d_1.w(Label_1.default, {
                            extraClasses: { root: Label_1.parseLabelClasses(this.classes(css.input, disabled ? css.disabled : null, invalid ? css.invalid : null, readOnly ? css.readonly : null, required ? css.required : null).get())
                            },
                            label: label,
                            theme: this.properties.theme
                        }, [input])];
                }
                return d_1.v('span', {
                    classes: this.classes(css.root),
                    key: 'root'
                }, children);
            }
            return this.renderCustomInput();
        };
        TimePicker.prototype.getOptions = function () {
            if (this.options) {
                return this.options;
            }
            var _a = this.properties, end = _a.end, start = _a.start, step = _a.step;
            this.options = getOptions(start, end, step);
            return this.options;
        };
        TimePicker.prototype.onPropertiesChanged = function () {
            this.options = null;
        };
        TimePicker.prototype.renderNativeInput = function () {
            var _a = this.properties, disabled = _a.disabled, end = _a.end, inputProperties = _a.inputProperties, invalid = _a.invalid, name = _a.name, readOnly = _a.readOnly, required = _a.required, start = _a.start, step = _a.step, value = _a.value;
            var classes = [
                css.input,
                disabled ? css.disabled : null,
                invalid ? css.invalid : null,
                readOnly ? css.readonly : null,
                required ? css.required : null
            ];
            return d_1.v('input', {
                'aria-describedby': inputProperties && inputProperties.describedBy,
                'aria-invalid': invalid ? 'true' : null,
                'aria-readonly': readOnly ? 'true' : null,
                classes: this.classes.apply(this, classes),
                disabled: disabled,
                invalid: invalid,
                key: 'native-input',
                max: end,
                min: start,
                name: name,
                onblur: this._onNativeBlur,
                onchange: this._onNativeChange,
                onfocus: this._onNativeFocus,
                readOnly: readOnly,
                required: required,
                step: step,
                type: 'time',
                value: value
            });
        };
        TimePicker.prototype.renderCustomInput = function () {
            var _a = this.properties, autoBlur = _a.autoBlur, clearable = _a.clearable, CustomOptionItem = _a.CustomOptionItem, CustomOptionMenu = _a.CustomOptionMenu, disabled = _a.disabled, extraClasses = _a.extraClasses, inputProperties = _a.inputProperties, invalid = _a.invalid, isOptionDisabled = _a.isOptionDisabled, label = _a.label, onBlur = _a.onBlur, onChange = _a.onChange, onFocus = _a.onFocus, onMenuChange = _a.onMenuChange, openOnFocus = _a.openOnFocus, options = _a.options, readOnly = _a.readOnly, required = _a.required, theme = _a.theme, value = _a.value;
            return d_1.w(ComboBox_1.default, {
                autoBlur: autoBlur,
                clearable: clearable,
                CustomResultItem: CustomOptionItem,
                CustomResultMenu: CustomOptionMenu,
                disabled: disabled,
                extraClasses: extraClasses,
                getResultLabel: this._getOptionLabel.bind(this),
                inputProperties: inputProperties,
                invalid: invalid,
                isResultDisabled: isOptionDisabled,
                label: label,
                onBlur: onBlur,
                onChange: onChange,
                onFocus: onFocus,
                onMenuChange: onMenuChange,
                onRequestResults: this._onRequestOptions.bind(this),
                openOnFocus: openOnFocus,
                readOnly: readOnly,
                required: required,
                results: options,
                theme: theme,
                value: value
            });
        };
        TimePicker.prototype._formatUnits = function (units) {
            var _a = this.properties.step, step = _a === void 0 ? 60 : _a;
            var hour = units.hour, minute = units.minute, second = units.second;
            return (step >= 60 ? [hour, minute] : [hour, minute, second])
                .map(function (unit) { return string_1.padStart(String(unit), 2, '0'); })
                .join(':');
        };
        TimePicker.prototype._getOptionLabel = function (value) {
            var getOptionLabel = this.properties.getOptionLabel;
            var units = parseUnits(value);
            return getOptionLabel ? getOptionLabel(units) : this._formatUnits(units);
        };
        TimePicker.prototype._onNativeBlur = function (event) {
            this.properties.onBlur && this.properties.onBlur(event.target.value);
        };
        TimePicker.prototype._onNativeChange = function (event) {
            this.properties.onChange && this.properties.onChange(event.target.value);
        };
        TimePicker.prototype._onNativeFocus = function (event) {
            this.properties.onFocus && this.properties.onFocus(event.target.value);
        };
        TimePicker.prototype._onRequestOptions = function (value) {
            this.properties.onRequestOptions && this.properties.onRequestOptions(value, this.getOptions());
        };
        __decorate([
            diffProperty_1.diffProperty('start', diff_1.auto),
            diffProperty_1.diffProperty('end', diff_1.auto),
            diffProperty_1.diffProperty('step', diff_1.auto),
            __metadata("design:type", Function),
            __metadata("design:paramtypes", []),
            __metadata("design:returntype", void 0)
        ], TimePicker.prototype, "onPropertiesChanged", null);
        TimePicker = __decorate([
            Themeable_1.theme(css)
        ], TimePicker);
        return TimePicker;
    }(exports.TimePickerBase));
    exports.TimePicker = TimePicker;
    exports.default = TimePicker;
});
//# sourceMappingURL=TimePicker.js.map