import { DNode, WNode } from '@dojo/widget-core/interfaces';
import Tab from './Tab';
import { ThemeableMixin, ThemeableProperties } from '@dojo/widget-core/mixins/Themeable';
import { WidgetBase } from '@dojo/widget-core/WidgetBase';
/**
 * Enum for tab button alignment
 */
export declare const enum Align {
    bottom = 0,
    left = 1,
    right = 2,
    top = 3,
}
/**
 * @type TabPaneProperties
 *
 * Properties that can be set on a TabPane component
 *
 * @property activeIndex           Position of the currently active tab
 * @property alignButtons          Orientation of the tab buttons
 * @property onRequestTabChange    Called when a new tab button is clicked
 * @property onRequestTabClose     Called when a tab close button is clicked
 */
export interface TabPaneProperties extends ThemeableProperties {
    activeIndex: number;
    alignButtons?: Align;
    onRequestTabChange?(index: number, key: string): void;
    onRequestTabClose?(index: number, key: string): void;
}
export declare const TabPaneBase: typeof WidgetBase & (new (...args: any[]) => ThemeableMixin);
export default class TabPane extends TabPaneBase<TabPaneProperties, WNode<Tab>> {
    private _id;
    private readonly _tabs;
    private _onDownArrowPress();
    private _onLeftArrowPress();
    private _onRightArrowPress();
    private _onUpArrowPress();
    private _renderTabButtons();
    private _renderTabs();
    /**
     * Determines if the tab at `currentIndex` is enabled. If disabled,
     * returns the next valid index, or null if no enabled tabs exist.
     */
    private _validateIndex(currentIndex, backwards?);
    protected closeIndex(index: number): void;
    protected selectFirstIndex(): void;
    protected selectIndex(index: number, backwards?: boolean): void;
    protected selectLastIndex(): void;
    protected selectNextIndex(): void;
    protected selectPreviousIndex(): void;
    render(): DNode;
}
