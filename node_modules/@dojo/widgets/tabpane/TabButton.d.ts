import { DNode } from '@dojo/widget-core/interfaces';
import { ThemeableMixin, ThemeableProperties } from '@dojo/widget-core/mixins/Themeable';
import { WidgetBase } from '@dojo/widget-core/WidgetBase';
/**
 * @type TabButtonProperties
 *
 * Properties that can be set on a TabButton component
 *
 * @property active             Determines whether this tab button is active
 * @property closeable          Determines whether this tab can be closed
 * @property controls           ID of the DOM element this tab button controls
 * @property disabled           Determines whether this tab can become active
 * @property id                 ID of this tab button DOM element
 * @property index              The position of this tab button
 * @property onClick            Called when this tab button is clicked
 * @property onCloseClick       Called when this tab button's close icon is clicked
 * @property onDownArrowPress   Called when the down arrow button is pressed
 * @property onEndPress         Called when the end button is pressed
 * @property onHomePress        Called when the home button is pressed
 * @property onLeftArrowPress   Called when the left arrow button is pressed
 * @property onRightArrowPress  Called when the right arrow button is pressed
 * @property onUpArrowPress     Called when the up arrow button is pressed
 */
export interface TabButtonProperties extends ThemeableProperties {
    active?: boolean;
    closeable?: boolean;
    controls: string;
    disabled?: boolean;
    id: string;
    index: number;
    onClick?: (index: number) => void;
    onCloseClick?: (index: number) => void;
    onDownArrowPress?: () => void;
    onEndPress?: () => void;
    onHomePress?: () => void;
    onLeftArrowPress?: () => void;
    onRightArrowPress?: () => void;
    onUpArrowPress?: () => void;
}
export declare const TabButtonBase: typeof WidgetBase & (new (...args: any[]) => ThemeableMixin);
export default class TabButton extends TabButtonBase<TabButtonProperties> {
    private _onClick();
    private _onCloseClick(event);
    private _onKeyDown(event);
    private _restoreFocus(element);
    protected onElementCreated(element: HTMLElement, key: string): void;
    protected onElementUpdated(element: HTMLElement, key: string): void;
    render(): DNode;
}
