var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "@dojo/widget-core/WidgetBase", "@dojo/widget-core/mixins/Themeable", "@dojo/widget-core/d", "@dojo/core/uuid", "./DatePicker", "./CalendarCell", "./styles/calendar.m.css", "../common/styles/base.m.css", "../common/styles/icons.m.css"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var WidgetBase_1 = require("@dojo/widget-core/WidgetBase");
    var Themeable_1 = require("@dojo/widget-core/mixins/Themeable");
    var d_1 = require("@dojo/widget-core/d");
    var uuid_1 = require("@dojo/core/uuid");
    var DatePicker_1 = require("./DatePicker");
    var CalendarCell_1 = require("./CalendarCell");
    var css = require("./styles/calendar.m.css");
    var baseCss = require("../common/styles/base.m.css");
    var iconCss = require("../common/styles/icons.m.css");
    exports.DEFAULT_MONTHS = [
        { short: 'Jan', long: 'January' },
        { short: 'Feb', long: 'February' },
        { short: 'Mar', long: 'March' },
        { short: 'Apr', long: 'April' },
        { short: 'May', long: 'May' },
        { short: 'Jun', long: 'June' },
        { short: 'Jul', long: 'July' },
        { short: 'Aug', long: 'August' },
        { short: 'Sep', long: 'September' },
        { short: 'Oct', long: 'October' },
        { short: 'Nov', long: 'November' },
        { short: 'Dec', long: 'December' }
    ];
    exports.DEFAULT_WEEKDAYS = [
        { short: 'Sun', long: 'Sunday' },
        { short: 'Mon', long: 'Monday' },
        { short: 'Tue', long: 'Tuesday' },
        { short: 'Wed', long: 'Wednesday' },
        { short: 'Thu', long: 'Thursday' },
        { short: 'Fri', long: 'Friday' },
        { short: 'Sat', long: 'Saturday' }
    ];
    exports.DEFAULT_LABELS = {
        chooseMonth: 'Choose Month',
        chooseYear: 'Choose Year',
        previousMonth: 'Previous Month',
        nextMonth: 'Next Month'
    };
    exports.CalendarBase = Themeable_1.ThemeableMixin(WidgetBase_1.WidgetBase);
    var Calendar = /** @class */ (function (_super) {
        __extends(Calendar, _super);
        function Calendar() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this._callDateFocus = false;
            _this._defaultDate = new Date();
            _this._focusedDay = 1;
            _this._monthLabelId = uuid_1.default();
            _this._popupOpen = false;
            return _this;
        }
        Calendar.prototype._getMonthLength = function (month, year) {
            var lastDate = new Date(year, month + 1, 0);
            return lastDate.getDate();
        };
        Calendar.prototype._getMonthYear = function () {
            var _a = this.properties, month = _a.month, _b = _a.selectedDate, selectedDate = _b === void 0 ? this._defaultDate : _b, year = _a.year;
            return {
                month: typeof month === 'number' ? month : selectedDate.getMonth(),
                year: typeof year === 'number' ? year : selectedDate.getFullYear()
            };
        };
        Calendar.prototype._goToDate = function (day) {
            var _a = this._getMonthYear(), month = _a.month, year = _a.year;
            var currentMonthLength = this._getMonthLength(month, year);
            var previousMonthLength = this._getMonthLength(month - 1, year);
            if (day < 1) {
                this._onMonthDecrement();
                day += previousMonthLength;
            }
            else if (day > currentMonthLength) {
                this._onMonthIncrement();
                day -= currentMonthLength;
            }
            this._focusedDay = day;
            this._callDateFocus = true;
            this.invalidate();
        };
        Calendar.prototype._onDateClick = function (date, disabled) {
            var onDateSelect = this.properties.onDateSelect;
            var _a = this._getMonthYear(), month = _a.month, year = _a.year;
            if (disabled && date < 15) {
                (_b = this._onMonthIncrement(), month = _b.month, year = _b.year);
                this._callDateFocus = true;
            }
            else if (disabled && date >= 15) {
                (_c = this._onMonthDecrement(), month = _c.month, year = _c.year);
                this._callDateFocus = true;
            }
            this._focusedDay = date;
            onDateSelect && onDateSelect(new Date(year, month, date));
            var _b, _c;
        };
        Calendar.prototype._onDateFocusCalled = function () {
            this._callDateFocus = false;
        };
        Calendar.prototype._onDateKeyDown = function (event) {
            var _a = this._getMonthYear(), month = _a.month, year = _a.year;
            switch (event.which) {
                case 38 /* Up */:
                    event.preventDefault();
                    this._goToDate(this._focusedDay - 7);
                    break;
                case 40 /* Down */:
                    event.preventDefault();
                    this._goToDate(this._focusedDay + 7);
                    break;
                case 37 /* Left */:
                    event.preventDefault();
                    this._goToDate(this._focusedDay - 1);
                    break;
                case 39 /* Right */:
                    event.preventDefault();
                    this._goToDate(this._focusedDay + 1);
                    break;
                case 33 /* PageUp */:
                    event.preventDefault();
                    this._goToDate(1);
                    break;
                case 34 /* PageDown */:
                    event.preventDefault();
                    var monthLengh = this._getMonthLength(month, year);
                    this._goToDate(monthLengh);
                    break;
                case 13 /* Enter */:
                case 32 /* Space */:
                    var onDateSelect = this.properties.onDateSelect;
                    onDateSelect && onDateSelect(new Date(year, month, this._focusedDay));
            }
        };
        Calendar.prototype._onMonthDecrement = function () {
            var _a = this._getMonthYear(), month = _a.month, year = _a.year;
            var _b = this.properties, onMonthChange = _b.onMonthChange, onYearChange = _b.onYearChange;
            if (month === 0) {
                onMonthChange && onMonthChange(11);
                onYearChange && onYearChange(year - 1);
                return { month: 11, year: year - 1 };
            }
            onMonthChange && onMonthChange(month - 1);
            return { month: month - 1, year: year };
        };
        Calendar.prototype._onMonthIncrement = function () {
            var _a = this._getMonthYear(), month = _a.month, year = _a.year;
            var _b = this.properties, onMonthChange = _b.onMonthChange, onYearChange = _b.onYearChange;
            if (month === 11) {
                onMonthChange && onMonthChange(0);
                onYearChange && onYearChange(year + 1);
                return { month: 0, year: year + 1 };
            }
            onMonthChange && onMonthChange(month + 1);
            return { month: month + 1, year: year };
        };
        Calendar.prototype._onMonthPageDown = function () {
            this._onMonthDecrement();
        };
        Calendar.prototype._onMonthPageUp = function () {
            this._onMonthIncrement();
        };
        Calendar.prototype._renderDateGrid = function (selectedDate) {
            var _a = this._getMonthYear(), month = _a.month, year = _a.year;
            var _b = this.properties, _c = _b.theme, theme = _c === void 0 ? {} : _c, _d = _b.CustomDateCell, CustomDateCell = _d === void 0 ? CalendarCell_1.default : _d;
            var currentMonthLength = this._getMonthLength(month, year);
            var previousMonthLength = this._getMonthLength(month - 1, year);
            var initialWeekday = new Date(year, month, 1).getDay();
            var todayString = new Date().toDateString();
            var dayIndex = 0;
            var date = initialWeekday > 0 ? previousMonthLength - initialWeekday : 0;
            var isCurrentMonth = initialWeekday > 0 ? false : true;
            var isSelectedDay;
            var weeks = [];
            var days;
            var dateString;
            var i;
            for (var week = 0; week < 6; week++) {
                days = [];
                for (i = 0; i < 7; i++) {
                    // find the next date
                    // if we've reached the end of the previous month, reset to 1
                    if (date > dayIndex && date >= previousMonthLength) {
                        date = 1;
                        isCurrentMonth = true;
                    }
                    else if (date <= dayIndex && date >= currentMonthLength) {
                        date = 1;
                        isCurrentMonth = false;
                    }
                    else {
                        date++;
                    }
                    dayIndex++;
                    // set isSelectedDay if the dates match
                    dateString = new Date(year, month, date).toDateString();
                    if (isCurrentMonth && selectedDate && dateString === selectedDate.toDateString()) {
                        isSelectedDay = true;
                    }
                    else {
                        isSelectedDay = false;
                    }
                    days.push(d_1.w(CustomDateCell, {
                        key: "date-" + (week * 7 + i),
                        callFocus: this._callDateFocus && isCurrentMonth && date === this._focusedDay,
                        date: date,
                        disabled: !isCurrentMonth,
                        focusable: isCurrentMonth && date === this._focusedDay,
                        selected: isSelectedDay,
                        theme: theme,
                        today: isCurrentMonth && dateString === todayString,
                        onClick: this._onDateClick,
                        onFocusCalled: this._onDateFocusCalled,
                        onKeyDown: this._onDateKeyDown
                    }));
                }
                weeks.push(d_1.v('tr', days));
            }
            return weeks;
        };
        Calendar.prototype._renderWeekdayCell = function (day) {
            var renderWeekdayCell = this.properties.renderWeekdayCell;
            return renderWeekdayCell ? renderWeekdayCell(day) : d_1.v('abbr', { title: day.long }, [day.short]);
        };
        Calendar.prototype.render = function () {
            var _this = this;
            var _a = this.properties, _b = _a.labels, labels = _b === void 0 ? exports.DEFAULT_LABELS : _b, _c = _a.monthNames, monthNames = _c === void 0 ? exports.DEFAULT_MONTHS : _c, renderMonthLabel = _a.renderMonthLabel, selectedDate = _a.selectedDate, _d = _a.theme, theme = _d === void 0 ? {} : _d, _e = _a.weekdayNames, weekdayNames = _e === void 0 ? exports.DEFAULT_WEEKDAYS : _e, onMonthChange = _a.onMonthChange, onYearChange = _a.onYearChange;
            var _f = this._getMonthYear(), month = _f.month, year = _f.year;
            // Calendar Weekday array
            var weekdays = [];
            for (var weekday in weekdayNames) {
                weekdays.push(d_1.v('th', {
                    role: 'columnheader',
                    classes: this.classes(css.weekday)
                }, [
                    this._renderWeekdayCell(weekdayNames[weekday])
                ]));
            }
            return d_1.v('div', { classes: this.classes(css.root) }, [
                // header
                d_1.w(DatePicker_1.default, {
                    key: 'date-picker',
                    labelId: this._monthLabelId,
                    labels: labels,
                    month: month,
                    monthNames: monthNames,
                    renderMonthLabel: renderMonthLabel,
                    theme: theme,
                    year: year,
                    onPopupChange: function (open) {
                        _this._popupOpen = open;
                    },
                    onRequestMonthChange: function (requestMonth) {
                        onMonthChange && onMonthChange(requestMonth);
                    },
                    onRequestYearChange: function (requestYear) {
                        onYearChange && onYearChange(requestYear);
                    }
                }),
                // date table
                d_1.v('table', {
                    cellspacing: '0',
                    cellpadding: '0',
                    role: 'grid',
                    'aria-labelledby': this._monthLabelId,
                    classes: this.classes(css.dateGrid).fixed(this._popupOpen ? baseCss.visuallyHidden : null)
                }, [
                    d_1.v('thead', [
                        d_1.v('tr', weekdays)
                    ]),
                    d_1.v('tbody', this._renderDateGrid(selectedDate))
                ]),
                // controls
                d_1.v('div', {
                    classes: this.classes(css.controls).fixed(this._popupOpen ? baseCss.visuallyHidden : null)
                }, [
                    d_1.v('button', {
                        classes: this.classes(css.previous),
                        tabIndex: this._popupOpen ? -1 : 0,
                        onclick: this._onMonthPageDown
                    }, [
                        d_1.v('i', { classes: this.classes(iconCss.icon, iconCss.leftIcon),
                            role: 'presentation', 'aria-hidden': 'true'
                        }),
                        d_1.v('span', { classes: this.classes().fixed(baseCss.visuallyHidden) }, [labels.previousMonth])
                    ]),
                    d_1.v('button', {
                        classes: this.classes(css.next),
                        tabIndex: this._popupOpen ? -1 : 0,
                        onclick: this._onMonthPageUp
                    }, [
                        d_1.v('i', { classes: this.classes(iconCss.icon, iconCss.rightIcon),
                            role: 'presentation', 'aria-hidden': 'true'
                        }),
                        d_1.v('span', { classes: this.classes().fixed(baseCss.visuallyHidden) }, [labels.nextMonth])
                    ])
                ])
            ]);
        };
        Calendar = __decorate([
            Themeable_1.theme(css),
            Themeable_1.theme(iconCss)
        ], Calendar);
        return Calendar;
    }(exports.CalendarBase));
    exports.default = Calendar;
});
//# sourceMappingURL=Calendar.js.map