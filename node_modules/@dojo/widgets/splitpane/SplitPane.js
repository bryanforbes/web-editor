var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "@dojo/core/lang", "@dojo/widget-core/mixins/Themeable", "@dojo/widget-core/d", "@dojo/widget-core/WidgetBase", "./styles/splitPane.m.css"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var lang_1 = require("@dojo/core/lang");
    var Themeable_1 = require("@dojo/widget-core/mixins/Themeable");
    var d_1 = require("@dojo/widget-core/d");
    var WidgetBase_1 = require("@dojo/widget-core/WidgetBase");
    var css = require("./styles/splitPane.m.css");
    ;
    ;
    exports.SplitPaneBase = Themeable_1.ThemeableMixin(WidgetBase_1.WidgetBase);
    var DEFAULT_SIZE = 100;
    var SplitPane = (function (_super) {
        __extends(SplitPane, _super);
        function SplitPane() {
            var _this = 
            /* istanbul ignore next: disregard transpiled `super`'s "else" block */
            _super.call(this) || this;
            /**
             * `mouseup` and other events aren't triggered when a user's cursor leaves div.root, so
             * global handlers are need to listen to the document instead. SplitPane
             * uses a `_dragging` flag so no handlers will be erroneously executed
             * if a user isn't actually resizing this SplitPane instance.
             */
            _this._boundHandlers = [];
            [
                { event: 'mouseup', func: _this._onDragEnd.bind(_this) },
                { event: 'mousemove', func: _this._onDragMove.bind(_this) },
                { event: 'touchmove', func: _this._onDragMove.bind(_this) }
            ].forEach(function (object) {
                document.addEventListener(object.event, object.func);
                _this._boundHandlers.push(object);
            });
            _this.own(lang_1.createHandle(function () {
                _this._boundHandlers.forEach(function (object) { return document.removeEventListener(object.event, object.func); });
            }));
            return _this;
        }
        SplitPane.prototype._deselect = function () {
            var selection = window.getSelection();
            selection.removeAllRanges();
        };
        SplitPane.prototype._getPosition = function (event) {
            var _a = this.properties.direction, direction = _a === void 0 ? 1 /* row */ : _a;
            if (direction === 1 /* row */) {
                return event.changedTouches ? event.changedTouches[0].clientX : event.clientX;
            }
            else {
                return event.changedTouches ? event.changedTouches[0].clientY : event.clientY;
            }
        };
        SplitPane.prototype._onDragStart = function (event) {
            this._dragging = true;
            this._position = this._getPosition(event);
            this._deselect();
        };
        SplitPane.prototype._onDragMove = function (event) {
            if (!this._dragging) {
                return;
            }
            this._deselect();
            var _a = this.properties, _b = _a.direction, direction = _b === void 0 ? 1 /* row */ : _b, onResize = _a.onResize, _c = _a.size, size = _c === void 0 ? DEFAULT_SIZE : _c;
            var currentPosition = this._getPosition(event);
            var newSize = (this._lastSize === undefined ? size : this._lastSize) + currentPosition - this._position;
            var maxSize = direction === 1 /* row */ ?
                this._root.offsetWidth - this._divider.offsetWidth :
                this._root.offsetHeight - this._divider.offsetHeight;
            this._lastSize = newSize;
            newSize = newSize < 0 ? 0 : newSize;
            newSize = newSize > maxSize ? maxSize : newSize;
            this._position = currentPosition;
            onResize && onResize(newSize);
        };
        SplitPane.prototype._onDragEnd = function (event) {
            this._dragging = false;
            this._lastSize = undefined;
        };
        SplitPane.prototype.onElementCreated = function (element, key) {
            if (key === 'root') {
                this._root = element;
            }
            if (key === 'divider') {
                this._divider = element;
            }
        };
        SplitPane.prototype.render = function () {
            var _a = this.properties, _b = _a.direction, direction = _b === void 0 ? 1 /* row */ : _b, _c = _a.leading, leading = _c === void 0 ? null : _c, _d = _a.size, size = _d === void 0 ? DEFAULT_SIZE : _d, _e = _a.trailing, trailing = _e === void 0 ? null : _e;
            var styles = {};
            styles[direction === 1 /* row */ ? 'width' : 'height'] = size + "px";
            return d_1.v('div', {
                classes: this.classes(css.root, direction === 0 /* column */ ? css.column : css.row).fixed(css.rootFixed, direction === 0 /* column */ ? css.columnFixed : css.rowFixed),
                key: 'root'
            }, [
                d_1.v('div', {
                    classes: this.classes(css.leading).fixed(css.leadingFixed),
                    key: 'leading',
                    styles: styles
                }, [leading]),
                d_1.v('div', {
                    classes: this.classes(css.divider).fixed(css.dividerFixed),
                    key: 'divider',
                    onmousedown: this._onDragStart,
                    ontouchend: this._onDragEnd,
                    ontouchstart: this._onDragStart
                }),
                d_1.v('div', {
                    classes: this.classes(css.trailing).fixed(css.trailingFixed),
                    key: 'trailing'
                }, [trailing])
            ]);
        };
        return SplitPane;
    }(exports.SplitPaneBase));
    SplitPane = __decorate([
        Themeable_1.theme(css),
        __metadata("design:paramtypes", [])
    ], SplitPane);
    exports.default = SplitPane;
});
//# sourceMappingURL=SplitPane.js.map