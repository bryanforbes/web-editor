import { WidgetBase } from '@dojo/widget-core/WidgetBase';
import { Constructor, DNode } from '@dojo/widget-core/interfaces';
import { ThemeableMixin, ThemeableProperties } from '@dojo/widget-core/mixins/Themeable';
import { LabelOptions } from '../label/Label';
import SelectOption, { OptionData } from './SelectOption';
/**
 * @type SelectProperties
 *
 * Properties that can be set on a Select component
 *
 * @property CustomOption   Custom widget constructor for options. Should use SelectOption as a base
 * @property describedBy    ID of an element that provides more descriptive text
 * @property disabled       Prevents the user from interacting with the form field
 * @property invalid        Indicates the value entered in the form field is invalid
 * @property label          Label settings for form label text, position, and visibility
 * @property multiple       Whether the widget supports multiple selection
 * @property name           The form widget's name
 * @property options        Array of data for the select options' value, text content, and state
 * @property readOnly       Allows or prevents user interaction
 * @property required       Whether or not a value is required
 * @property useNatveSelect Use the native <select> element if true
 * @property value          The current value
 * @property onBlur         Called when the input loses focus
 * @property onChange       Called when the node's 'change' event is fired
 * @property onClick        Called when the input is clicked
 * @property onFocus        Called when the input is focused
 * @property onKeyDown      Called on the input's keydown event
 */
export interface SelectProperties extends ThemeableProperties {
    CustomOption?: Constructor<SelectOption>;
    describedBy?: string;
    disabled?: boolean;
    invalid?: boolean;
    label?: string | LabelOptions;
    multiple?: boolean;
    name?: string;
    options?: OptionData[];
    readOnly?: boolean;
    required?: boolean;
    useNativeElement?: boolean;
    value?: string;
    onBlur?(event: FocusEvent): void;
    onChange?(option: OptionData): void;
    onClick?(event: MouseEvent): void;
    onFocus?(event: FocusEvent): void;
    onKeyDown?(event: KeyboardEvent): void;
}
export declare const SelectBase: Constructor<ThemeableMixin<{}>> & typeof WidgetBase;
export default class Select extends SelectBase<SelectProperties> {
    private _focusedIndex;
    private _ignoreBlur;
    private _open;
    private _selectId;
    private _options;
    private _onBlur(event);
    private _onClick(event);
    private _onFocus(event);
    private _onKeyDown(event);
    private _onNativeChange(event);
    private _openSelect();
    private _closeSelect();
    private _onTriggerClick(event);
    private _onTriggerBlur(event);
    private _onOptionMouseDown();
    private _onOptionClick(event, index);
    private _onListboxKeyDown(event);
    private _renderCustomOptions();
    protected onOptionsChange(previousProperties: {
        options: OptionData[];
    }, newProperties: {
        options: OptionData[];
    }): void;
    protected renderNativeSelect(): DNode;
    protected renderCustomMultiSelect(): DNode;
    protected renderCustomSelect(): DNode;
    protected render(): DNode;
}
