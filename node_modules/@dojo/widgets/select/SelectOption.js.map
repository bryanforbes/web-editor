{"version":3,"file":"SelectOption.js","sourceRoot":"","sources":["SelectOption.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;IAAA,2DAA0D;IAE1D,gEAAgG;IAChG,yCAAwC;IACxC,2CAA6C;IAuChC,QAAA,gBAAgB,GAAG,0BAAc,CAAC,uBAAU,CAAC,CAAC;IAG3D;QAA0C,gCAAwC;QAAlF;;QA2CA,CAAC;QA1CQ,mCAAY,GAApB;YACS,IAAA,yCAAW,CAAqB;YAExC,WAAW,IAAI,WAAW,EAAE,CAAC;QAC9B,CAAC;QAEO,+BAAQ,GAAhB,UAAiB,KAAiB;YAC3B,IAAA,oBAGa,EAFlB,gBAAK,EACL,oBAAO,CACY;YAEpB,OAAO,IAAI,OAAO,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;QAClC,CAAC;QAED,kCAAW,GAAX;YACC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,KAAK,CAAC;QACzC,CAAC;QAED,6BAAM,GAAN;YACO,IAAA,oBAGa,EAFlB,oBAAO,EACP,0BAAU,CACS;YAEpB,IAAM,aAAa,GAAG;gBACrB,GAAG,CAAC,MAAM;gBACV,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI;gBAC5B,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI;gBACzC,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC,CAAC,IAAI;aAC/C,CAAC;YAEF,MAAM,CAAC,KAAC,CAAC,KAAK,EAAE;gBACf,IAAI,EAAE,QAAQ;gBACd,EAAE,EAAE,UAAU,CAAC,EAAE;gBACjB,OAAO,EAAE,IAAI,CAAC,OAAO,OAAZ,IAAI,EAAY,aAAa,CAAC;gBACvC,eAAe,EAAE,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI;gBACpD,eAAe,EAAE,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO;gBACvD,OAAO,EAAE,IAAI,CAAC,QAAQ;gBACtB,WAAW,EAAE,IAAI,CAAC,YAAY;aAC9B,EAAE,CAAE,IAAI,CAAC,WAAW,EAAE,CAAE,CAAC,CAAC;QAC5B,CAAC;QA1CmB,YAAY;YADhC,iBAAK,CAAC,GAAG,CAAC;WACU,YAAY,CA2ChC;QAAD,mBAAC;KAAA,AA3CD,CAA0C,wBAAgB,GA2CzD;sBA3CoB,YAAY","sourcesContent":["import { WidgetBase } from '@dojo/widget-core/WidgetBase';\nimport { DNode } from '@dojo/widget-core/interfaces';\nimport { ThemeableMixin, ThemeableProperties, theme } from '@dojo/widget-core/mixins/Themeable';\nimport { v } from '@dojo/widget-core/d';\nimport * as css from './styles/select.m.css';\n\n/**\n * @type OptionData\n * Settings passed down to the Option\n *\n * @property disabled     Toggle disabled status of the individual option\n * @property id           Optional custom id\n * @property label        Text to display to the user\n * @property selected     Toggle selected/deselected state for multiselect widgets\n * @property value        Option value\n */\nexport interface OptionData {\n\tdisabled?: boolean;\n\tid?: string;\n\tlabel: string;\n\tselected?: boolean;\n\tvalue: string;\n}\n\n/**\n * @type SelectOptionProperties\n *\n * Properties that can be set on a Select component\n *\n * @property focused      Whether this is the currently focused option\n * @property index        Position of this option in list of options\n * @property optionData   Settings for this option\n * @property onMouseDown  Called on the mouse down event for this option\n * @property onClick      Called on the click event for this option\n */\nexport interface SelectOptionProperties extends ThemeableProperties {\n\tfocused?: boolean;\n\tindex: number;\n\toptionData: OptionData;\n\tonMouseDown?(): void;\n\tonClick?(event: MouseEvent, index: number): void;\n}\n\nexport const SelectOptionBase = ThemeableMixin(WidgetBase);\n\n@theme(css)\nexport default class SelectOption extends SelectOptionBase<SelectOptionProperties> {\n\tprivate _onMouseDown() {\n\t\tconst { onMouseDown } = this.properties;\n\n\t\tonMouseDown && onMouseDown();\n\t}\n\n\tprivate _onClick(event: MouseEvent) {\n\t\tconst {\n\t\t\tindex,\n\t\t\tonClick\n\t\t} = this.properties;\n\n\t\tonClick && onClick(event, index);\n\t}\n\n\trenderLabel(): DNode {\n\t\treturn this.properties.optionData.label;\n\t}\n\n\trender(): DNode {\n\t\tconst {\n\t\t\tfocused,\n\t\t\toptionData\n\t\t} = this.properties;\n\n\t\tconst optionClasses = [\n\t\t\tcss.option,\n\t\t\tfocused ? css.focused : null,\n\t\t\toptionData.selected ? css.selected : null,\n\t\t\toptionData.disabled ? css.disabledOption : null\n\t\t];\n\n\t\treturn v('div', {\n\t\t\trole: 'option',\n\t\t\tid: optionData.id,\n\t\t\tclasses: this.classes(...optionClasses),\n\t\t\t'aria-disabled': optionData.disabled ? 'true' : null,\n\t\t\t'aria-selected': optionData.selected ? 'true' : 'false',\n\t\t\tonclick: this._onClick,\n\t\t\tonmousedown: this._onMouseDown\n\t\t}, [ this.renderLabel() ]);\n\t}\n}\n"]}