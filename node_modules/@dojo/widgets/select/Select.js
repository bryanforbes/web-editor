var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "@dojo/widget-core/WidgetBase", "@dojo/widget-core/decorators/diffProperty", "@dojo/widget-core/mixins/Themeable", "@dojo/widget-core/d", "@dojo/widget-core/diff", "@dojo/core/uuid", "@dojo/core/lang", "@dojo/shim/array", "../label/Label", "./SelectOption", "./styles/select.m.css", "../common/styles/icons.m.css"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var WidgetBase_1 = require("@dojo/widget-core/WidgetBase");
    var diffProperty_1 = require("@dojo/widget-core/decorators/diffProperty");
    var Themeable_1 = require("@dojo/widget-core/mixins/Themeable");
    var d_1 = require("@dojo/widget-core/d");
    var diff_1 = require("@dojo/widget-core/diff");
    var uuid_1 = require("@dojo/core/uuid");
    var lang_1 = require("@dojo/core/lang");
    var array_1 = require("@dojo/shim/array");
    var Label_1 = require("../label/Label");
    var SelectOption_1 = require("./SelectOption");
    var css = require("./styles/select.m.css");
    var iconCss = require("../common/styles/icons.m.css");
    exports.SelectBase = Themeable_1.ThemeableMixin(WidgetBase_1.WidgetBase);
    var Select = /** @class */ (function (_super) {
        __extends(Select, _super);
        function Select() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this._focusedIndex = 0;
            _this._ignoreBlur = false;
            _this._open = false;
            _this._selectId = uuid_1.default();
            _this._options = [];
            return _this;
        }
        Select.prototype._onBlur = function (event) { this.properties.onBlur && this.properties.onBlur(event); };
        Select.prototype._onClick = function (event) { this.properties.onClick && this.properties.onClick(event); };
        Select.prototype._onFocus = function (event) { this.properties.onFocus && this.properties.onFocus(event); };
        Select.prototype._onKeyDown = function (event) { this.properties.onKeyDown && this.properties.onKeyDown(event); };
        // native select events
        Select.prototype._onNativeChange = function (event) {
            var onChange = this.properties.onChange;
            var value = event.target.value;
            var option = array_1.find(this._options, function (option) { return option.value === value; });
            onChange && onChange(option);
        };
        // custom select events
        Select.prototype._openSelect = function () {
            this._open = true;
            this._ignoreBlur = false;
            this._focusedIndex = this._focusedIndex || 0;
            this.invalidate();
        };
        Select.prototype._closeSelect = function () {
            this._open = false;
            this.invalidate();
        };
        Select.prototype._onTriggerClick = function (event) {
            this.properties.onClick && this.properties.onClick(event);
            this._open ? this._closeSelect() : this._openSelect();
        };
        Select.prototype._onTriggerBlur = function (event) {
            if (!this._ignoreBlur) {
                this.properties.onBlur && this.properties.onBlur(event);
                this._closeSelect();
            }
        };
        Select.prototype._onOptionMouseDown = function () {
            this._ignoreBlur = true;
        };
        Select.prototype._onOptionClick = function (event, index) {
            var _a = this.properties, onChange = _a.onChange, onClick = _a.onClick;
            onClick && onClick(event);
            var option = this._options[index];
            // if the option exists and isn't disabled, focus it and fire onChange
            if (option && !option.disabled) {
                this._focusedIndex = index;
                onChange && onChange(option);
                this._closeSelect();
            }
            else {
                // prevent the menu from closing when clicking on disabled options
                event.preventDefault();
            }
        };
        Select.prototype._onListboxKeyDown = function (event) {
            this.properties.onKeyDown && this.properties.onKeyDown(event);
            var _a = this.properties, multiple = _a.multiple, onChange = _a.onChange;
            var _focusedIndex = this._focusedIndex;
            switch (event.which) {
                case 13 /* Enter */:
                    if (this._options[_focusedIndex].disabled) {
                        event.preventDefault();
                    }
                    else {
                        onChange && onChange(this._options[_focusedIndex]);
                    }
                    break;
                case 32 /* Space */:
                    if (this._options[_focusedIndex].disabled) {
                        event.preventDefault();
                    }
                    else {
                        onChange && onChange(this._options[_focusedIndex]);
                    }
                    break;
                case 27 /* Escape */:
                    this._closeSelect();
                    break;
                case 40 /* Down */:
                    event.preventDefault();
                    if (this._open || multiple) {
                        this._focusedIndex = (_focusedIndex + 1) % this._options.length;
                    }
                    else {
                        this._openSelect();
                    }
                    this.invalidate();
                    break;
                case 38 /* Up */:
                    event.preventDefault();
                    this._focusedIndex = (_focusedIndex - 1 + this._options.length) % this._options.length;
                    this.invalidate();
                    break;
                case 36 /* Home */:
                    this._focusedIndex = 0;
                    this.invalidate();
                    break;
                case 35 /* End */:
                    this._focusedIndex = this._options.length - 1;
                    this.invalidate();
                    break;
            }
        };
        Select.prototype._renderCustomOptions = function () {
            var _this = this;
            var _a = this.properties, _b = _a.CustomOption, CustomOption = _b === void 0 ? SelectOption_1.default : _b, multiple = _a.multiple, value = _a.value, theme = _a.theme;
            var optionNodes = this._options.map(function (option, i) { return d_1.w(CustomOption, {
                focused: _this._focusedIndex === i,
                index: i,
                key: i + '',
                optionData: lang_1.assign({}, option, {
                    id: option.id,
                    selected: multiple ? option.selected : value === option.value
                }),
                onMouseDown: _this._onOptionMouseDown,
                onClick: _this._onOptionClick,
                theme: theme
            }); });
            return optionNodes;
        };
        Select.prototype.onOptionsChange = function (previousProperties, newProperties) {
            var _a = newProperties.options, options = _a === void 0 ? [] : _a;
            this._options = options.map(function (option) {
                return __assign({ id: uuid_1.default() }, option);
            });
        };
        Select.prototype.renderNativeSelect = function () {
            var _a = this.properties, describedBy = _a.describedBy, disabled = _a.disabled, invalid = _a.invalid, multiple = _a.multiple, name = _a.name, readOnly = _a.readOnly, required = _a.required, value = _a.value;
            /* create option nodes */
            var optionNodes = this._options.map(function (option) { return d_1.v('option', {
                value: option.value,
                innerHTML: option.label,
                disabled: option.disabled,
                selected: option.selected && multiple ? option.selected : null
            }); });
            return d_1.v('div', { classes: this.classes(css.inputWrapper) }, [
                d_1.v('select', {
                    classes: this.classes(css.input),
                    'aria-describedby': describedBy,
                    disabled: disabled,
                    'aria-invalid': invalid ? 'true' : null,
                    multiple: multiple ? true : null,
                    name: name,
                    readOnly: readOnly,
                    'aria-readonly': readOnly ? 'true' : null,
                    required: required,
                    value: value,
                    onblur: this._onBlur,
                    onchange: this._onNativeChange,
                    onclick: this._onClick,
                    onfocus: this._onFocus,
                    onkeydown: this._onKeyDown
                }, optionNodes),
                multiple ? null : d_1.v('span', { classes: this.classes(css.arrow) }, [
                    d_1.v('i', { classes: this.classes(iconCss.icon, iconCss.downIcon),
                        role: 'presentation', 'aria-hidden': 'true'
                    })
                ])
            ]);
        };
        Select.prototype.renderCustomMultiSelect = function () {
            var _focusedIndex = this._focusedIndex;
            var _a = this.properties, describedBy = _a.describedBy, disabled = _a.disabled, invalid = _a.invalid, readOnly = _a.readOnly, required = _a.required;
            return d_1.v('div', { classes: this.classes(css.inputWrapper) }, [
                d_1.v('div', {
                    role: 'listbox',
                    classes: this.classes(css.input),
                    disabled: disabled,
                    'aria-describedby': describedBy,
                    'aria-invalid': invalid ? 'true' : null,
                    'aria-multiselectable': 'true',
                    'aria-activedescendant': this._options.length > 0 ? this._options[_focusedIndex].id : null,
                    'aria-readonly': readOnly ? 'true' : null,
                    'aria-required': required ? 'true' : null,
                    tabIndex: 0,
                    onblur: this._onBlur,
                    onfocus: this._onFocus,
                    onkeydown: this._onListboxKeyDown
                }, this._renderCustomOptions())
            ]);
        };
        Select.prototype.renderCustomSelect = function () {
            var _a = this.properties, describedBy = _a.describedBy, disabled = _a.disabled, invalid = _a.invalid, readOnly = _a.readOnly, required = _a.required, value = _a.value;
            var _b = this, _open = _b._open, _focusedIndex = _b._focusedIndex, _selectId = _b._selectId;
            var selectedOption = array_1.find(this._options, function (option) { return option.value === value; }) || this._options[0];
            // create dropdown trigger and select box
            return d_1.v('div', {
                classes: this.classes(css.inputWrapper, _open ? css.open : null)
            }, [
                d_1.v('button', {
                    classes: this.classes(css.trigger),
                    disabled: disabled,
                    'aria-controls': _selectId,
                    'aria-owns': _selectId,
                    'aria-expanded': _open + '',
                    'aria-haspopup': 'listbox',
                    'aria-activedescendant': this._options.length > 0 ? this._options[_focusedIndex].id : null,
                    value: value,
                    onblur: this._onTriggerBlur,
                    onclick: this._onTriggerClick,
                    onfocus: this._onFocus,
                    onkeydown: this._onListboxKeyDown
                }, [selectedOption ? selectedOption.label : '']),
                d_1.v('span', { classes: this.classes(css.arrow) }, [
                    d_1.v('i', {
                        classes: this.classes(iconCss.icon, iconCss.downIcon),
                        role: 'presentation', 'aria-hidden': 'true'
                    })
                ]),
                d_1.v('div', {
                    role: 'listbox',
                    id: _selectId,
                    classes: this.classes(css.dropdown),
                    'aria-describedby': describedBy,
                    'aria-invalid': invalid ? 'true' : null,
                    'aria-readonly': readOnly ? 'true' : null,
                    'aria-required': required ? 'true' : null
                }, this._renderCustomOptions())
            ]);
        };
        Select.prototype.render = function () {
            var _a = this.properties, disabled = _a.disabled, invalid = _a.invalid, label = _a.label, multiple = _a.multiple, readOnly = _a.readOnly, required = _a.required, _b = _a.useNativeElement, useNativeElement = _b === void 0 ? false : _b, theme = _a.theme;
            var stateClasses = [
                disabled ? css.disabled : null,
                invalid ? css.invalid : null,
                invalid === false ? css.valid : null,
                multiple ? css.multiselect : null,
                readOnly ? css.readonly : null,
                required ? css.required : null
            ];
            var rootWidget, select;
            if (useNativeElement) {
                select = this.renderNativeSelect();
            }
            else {
                select = multiple ? this.renderCustomMultiSelect() : this.renderCustomSelect();
            }
            if (label) {
                rootWidget = d_1.w(Label_1.default, {
                    extraClasses: { root: Label_1.parseLabelClasses(this.classes.apply(this, [css.root].concat(stateClasses))()) },
                    label: label,
                    theme: theme
                }, [select]);
            }
            else {
                rootWidget = d_1.v('div', {
                    classes: this.classes.apply(this, [css.root].concat(stateClasses))
                }, [select]);
            }
            return rootWidget;
        };
        __decorate([
            diffProperty_1.diffProperty('options', diff_1.auto),
            __metadata("design:type", Function),
            __metadata("design:paramtypes", [Object, Object]),
            __metadata("design:returntype", void 0)
        ], Select.prototype, "onOptionsChange", null);
        Select = __decorate([
            Themeable_1.theme(css),
            Themeable_1.theme(iconCss)
        ], Select);
        return Select;
    }(exports.SelectBase));
    exports.default = Select;
});
//# sourceMappingURL=Select.js.map