import { DNode, WNode, PropertiesChangeEvent } from '@dojo/widget-core/interfaces';
import { ThemeableMixin, ThemeableProperties } from '@dojo/widget-core/mixins/Themeable';
import { WidgetBase } from '@dojo/widget-core/WidgetBase';
import { LabelOptions } from '../label/Label';
import { TextInputProperties } from '../textinput/TextInput';
/**
 * @type ComboBoxProperties
 *
 * Properties that can be set on a ComboBox component
 *
 * @property autoBlur           Determines whether the input should blur after value selection
 * @property clearable          Determines whether the input should be able to be cleared
 * @property customResultItem   Can be used to render a custom result
 * @property customResultMenu   Can be used to render a custom result menu
 * @property disabled           Prevents user interaction and styles content accordingly
 * @property formId             ID of a form element associated with the form field
 * @property getResultLabel     Can be used to get the text label of a result based on the underlying result object
 * @property inputProperties    TextInput properties to set on the underlying input
 * @property invalid            Determines if this input is valid
 * @property isResultDisabled   Used to determine if an item should be disabled
 * @property label              Label to show for this input
 * @property onBlur             Called when the input is blurred
 * @property onChange           Called when the value changes
 * @property onFocus            Called when the input is focused
 * @property onMenuChange       Called when menu visibility changes
 * @property onRequestResults   Called when results are shown; should be used to set `results`
 * @property openOnFocus        Determines whether the result list should open when the input is focused
 * @property readOnly           Prevents user interaction
 * @property required           Determines if this input is required, styles accordingly
 * @property results            Results for the current search term; should be set in response to `onRequestResults`
 * @property value              Value to set on the input
 */
export interface ComboBoxProperties extends ThemeableProperties {
    autoBlur?: boolean;
    clearable?: boolean;
    customResultItem?: any;
    customResultMenu?: any;
    disabled?: boolean;
    formId?: string;
    getResultLabel?(result: any): string;
    inputProperties?: TextInputProperties;
    invalid?: boolean;
    isResultDisabled?(result: any): boolean;
    label?: string | LabelOptions;
    onBlur?(value: string): void;
    onChange?(value: string): void;
    onFocus?(value: string): void;
    onMenuChange?(open: boolean): void;
    onRequestResults?(value: string): void;
    openOnFocus?: boolean;
    readOnly?: boolean;
    required?: boolean;
    results?: any[];
    value?: string;
}
export declare const enum Operation {
    increase = 1,
    decrease = -1,
}
export declare const ComboBoxBase: typeof WidgetBase & (new (...args: any[]) => ThemeableMixin);
export default class ComboBox extends ComboBoxBase<ComboBoxProperties> {
    private _activeIndex;
    private _focused;
    private _ignoreBlur;
    private _ignoreFocus;
    private _inputElement;
    private _menuId;
    private _open;
    private _wasOpen;
    private _registry;
    private _closeMenu();
    private _createRegistry(customResultItem, customResultMenu);
    private _getResultLabel(result);
    private _isIndexDisabled(index);
    private _onArrowClick();
    private _onClearClick();
    private _onInput(event);
    private _onInputBlur(event);
    private _onInputFocus(event);
    private _onInputKeyDown(event);
    private _onMenuChange();
    private _onResultMouseDown();
    private _onResultMouseEnter(event, index);
    private _onResultMouseUp(event, index);
    private _openMenu();
    private _restoreFocus();
    private _scrollIntoView(element);
    private _selectIndex(index);
    private _moveActiveIndex(operation);
    protected onElementCreated(element: HTMLElement, key: string): void;
    protected onElementUpdated(element: HTMLElement, key: string): void;
    protected onPropertiesChanged(evt: PropertiesChangeEvent<this, ComboBoxProperties>): void;
    protected renderMenu(results: any[]): WNode | null;
    render(): DNode;
}
