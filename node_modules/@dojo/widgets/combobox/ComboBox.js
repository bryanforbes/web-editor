var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "@dojo/core/uuid", "@dojo/widget-core/d", "@dojo/widget-core/mixins/Themeable", "@dojo/widget-core/WidgetBase", "@dojo/widget-core/decorators/diffProperty", "@dojo/widget-core/diff", "./ResultMenu", "../label/Label", "../textinput/TextInput", "./styles/comboBox.m.css", "../common/styles/icons.m.css"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var uuid_1 = require("@dojo/core/uuid");
    var d_1 = require("@dojo/widget-core/d");
    var Themeable_1 = require("@dojo/widget-core/mixins/Themeable");
    var WidgetBase_1 = require("@dojo/widget-core/WidgetBase");
    var diffProperty_1 = require("@dojo/widget-core/decorators/diffProperty");
    var diff_1 = require("@dojo/widget-core/diff");
    var ResultMenu_1 = require("./ResultMenu");
    var Label_1 = require("../label/Label");
    var TextInput_1 = require("../textinput/TextInput");
    var css = require("./styles/comboBox.m.css");
    var iconCss = require("../common/styles/icons.m.css");
    exports.ComboBoxBase = Themeable_1.ThemeableMixin(WidgetBase_1.WidgetBase);
    var ComboBox = /** @class */ (function (_super) {
        __extends(ComboBox, _super);
        function ComboBox() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this._menuId = uuid_1.default();
            return _this;
        }
        ComboBox.prototype._closeMenu = function () {
            this._open = false;
            this.invalidate();
        };
        ComboBox.prototype._getResultLabel = function (result) {
            var getResultLabel = this.properties.getResultLabel;
            return getResultLabel ? getResultLabel(result) : result;
        };
        ComboBox.prototype._isIndexDisabled = function (index) {
            var _a = this.properties, isResultDisabled = _a.isResultDisabled, _b = _a.results, results = _b === void 0 ? [] : _b;
            return isResultDisabled && isResultDisabled(results[index]);
        };
        ComboBox.prototype._onArrowClick = function () {
            var _a = this.properties, disabled = _a.disabled, readOnly = _a.readOnly;
            !disabled && !readOnly && this._openMenu();
        };
        ComboBox.prototype._onClearClick = function () {
            var onChange = this.properties.onChange;
            this._focused = true;
            this.invalidate();
            onChange && onChange('');
        };
        ComboBox.prototype._onInput = function (event) {
            var onChange = this.properties.onChange;
            this._activeIndex = undefined;
            onChange && onChange(event.target.value);
            this._openMenu();
        };
        ComboBox.prototype._onInputBlur = function (event) {
            var onBlur = this.properties.onBlur;
            if (this._ignoreBlur) {
                return;
            }
            this._focused = false;
            onBlur && onBlur(event.target.value);
            this._closeMenu();
        };
        ComboBox.prototype._onInputFocus = function (event) {
            var _a = this.properties, onFocus = _a.onFocus, openOnFocus = _a.openOnFocus;
            this._focused = true;
            onFocus && onFocus(event.target.value);
            openOnFocus && !this._ignoreFocus && this._openMenu();
            this._ignoreBlur = false;
            this._ignoreFocus = false;
        };
        ComboBox.prototype._onInputKeyDown = function (event) {
            var _a = this.properties.results, results = _a === void 0 ? [] : _a;
            switch (event.which) {
                case 38 /* Up */:
                    event.preventDefault();
                    this._moveActiveIndex(-1 /* decrease */);
                    break;
                case 40 /* Down */:
                    event.preventDefault();
                    this._open ? this._moveActiveIndex(1 /* increase */) : this._openMenu();
                    break;
                case 27 /* Escape */:
                    this._open && this._closeMenu();
                    break;
                case 13 /* Enter */:
                    if (this._open && results.length > 0) {
                        this._activeIndex === undefined ? this._closeMenu() : this._selectIndex(this._activeIndex);
                    }
                    break;
            }
        };
        ComboBox.prototype._onMenuChange = function () {
            var onMenuChange = this.properties.onMenuChange;
            if (!onMenuChange) {
                return;
            }
            this._open && !this._wasOpen && onMenuChange(true);
            !this._open && this._wasOpen && onMenuChange(false);
        };
        ComboBox.prototype._onResultMouseDown = function () {
            // Maintain underlying input focus on next render
            this._ignoreBlur = true;
        };
        ComboBox.prototype._onResultMouseEnter = function (event, index) {
            if (this._isIndexDisabled(index)) {
                return;
            }
            this._activeIndex = index;
            this.invalidate();
        };
        ComboBox.prototype._onResultMouseUp = function (event, index) {
            if (!this._isIndexDisabled(index)) {
                this._ignoreFocus = true;
                this._selectIndex(index);
            }
        };
        ComboBox.prototype._openMenu = function () {
            var onRequestResults = this.properties.onRequestResults;
            this._activeIndex = undefined;
            this._open = true;
            this._focused = true;
            onRequestResults && onRequestResults(this._inputElement.value);
        };
        ComboBox.prototype._restoreFocus = function () {
            var func = this._focused ? 'focus' : 'blur';
            this._inputElement[func]();
        };
        ComboBox.prototype._scrollIntoView = function (element) {
            var menu = element.parentElement;
            // Scroll menu up so top of highlighted result aligns with top of menu container
            if (element.offsetTop - menu.scrollTop < 0) {
                menu.scrollTop = element.offsetTop;
            }
            else if ((element.offsetTop - menu.scrollTop + element.offsetHeight) > menu.clientHeight) {
                menu.scrollTop = element.offsetTop - menu.clientHeight + element.offsetHeight;
            }
        };
        ComboBox.prototype._selectIndex = function (index) {
            var _a = this.properties, autoBlur = _a.autoBlur, onChange = _a.onChange, _b = _a.results, results = _b === void 0 ? [] : _b;
            this._focused = !autoBlur;
            this._closeMenu();
            onChange && onChange(this._getResultLabel(results[index]));
        };
        ComboBox.prototype._moveActiveIndex = function (operation) {
            var _this = this;
            var _a = this.properties.results, results = _a === void 0 ? [] : _a;
            if (results.length === 0) {
                this._activeIndex = 0;
                this.invalidate();
                return;
            }
            if (results.every(function (result, i) { return Boolean(_this._isIndexDisabled(i)); })) {
                return;
            }
            function nextIndex(i) {
                var total = results.length;
                var base = operation === 1 /* increase */ ? 0 : -1;
                var current = i !== undefined ? i + operation : base;
                return (current + total) % total;
            }
            var index = nextIndex(this._activeIndex);
            while (this._isIndexDisabled(index)) {
                index = nextIndex(index);
            }
            this._activeIndex = index;
            this.invalidate();
        };
        ComboBox.prototype.onElementCreated = function (element, key) {
            if (key === 'root') {
                this._inputElement = element.querySelector('input');
                this._restoreFocus();
            }
        };
        ComboBox.prototype.onElementUpdated = function (element, key) {
            if (key === 'root') {
                this._restoreFocus();
                var selectedResult = element.querySelector('[data-selected="true"]');
                selectedResult && this._scrollIntoView(selectedResult);
            }
        };
        ComboBox.prototype.renderMenu = function (results) {
            var _a = this.properties, _b = _a.theme, theme = _b === void 0 ? {} : _b, isResultDisabled = _a.isResultDisabled, _c = _a.CustomResultMenu, CustomResultMenu = _c === void 0 ? ResultMenu_1.default : _c, CustomResultItem = _a.CustomResultItem;
            if (results.length === 0 || !this._open) {
                return null;
            }
            return d_1.w(CustomResultMenu, {
                getResultLabel: this._getResultLabel,
                CustomResultItem: CustomResultItem,
                id: this._menuId,
                isResultDisabled: isResultDisabled,
                onResultMouseDown: this._onResultMouseDown,
                onResultMouseEnter: this._onResultMouseEnter,
                onResultMouseUp: this._onResultMouseUp,
                results: results,
                selectedIndex: this._activeIndex,
                theme: theme
            });
        };
        ComboBox.prototype.render = function () {
            var _a = this.properties, clearable = _a.clearable, disabled = _a.disabled, _b = _a.inputProperties, inputProperties = _b === void 0 ? {} : _b, invalid = _a.invalid, label = _a.label, readOnly = _a.readOnly, required = _a.required, _c = _a.results, results = _c === void 0 ? [] : _c, _d = _a.value, value = _d === void 0 ? '' : _d, _e = _a.theme, theme = _e === void 0 ? {} : _e;
            var menu = this.renderMenu(results);
            var menuId = menu ? this._menuId : '';
            this._onMenuChange();
            this._wasOpen = this._open;
            var controls = d_1.v('div', {
                classes: this.classes(css.controls)
            }, [
                d_1.w(TextInput_1.default, __assign({}, inputProperties, { classes: this.classes(clearable ? css.clearable : null), controls: menuId, disabled: disabled,
                    invalid: invalid, onBlur: this._onInputBlur, onFocus: this._onInputFocus, onInput: this._onInput, onKeyDown: this._onInputKeyDown, readOnly: readOnly,
                    required: required,
                    theme: theme,
                    value: value })),
                clearable ? d_1.v('button', {
                    'aria-controls': menuId,
                    classes: this.classes(css.clear),
                    disabled: disabled,
                    readOnly: readOnly,
                    onclick: this._onClearClick
                }, [
                    'clear combo box',
                    d_1.v('i', { classes: this.classes(iconCss.icon, iconCss.closeIcon),
                        role: 'presentation', 'aria-hidden': 'true'
                    })
                ]) : null,
                d_1.v('button', {
                    'aria-controls': menuId,
                    classes: this.classes(css.trigger),
                    disabled: disabled,
                    readOnly: readOnly,
                    onclick: this._onArrowClick
                }, [
                    'open combo box',
                    d_1.v('i', { classes: this.classes(iconCss.icon, iconCss.downIcon),
                        role: 'presentation', 'aria-hidden': 'true'
                    })
                ])
            ]);
            if (label) {
                controls = d_1.w(Label_1.default, {
                    label: label
                }, [controls]);
            }
            return d_1.v('div', {
                'aria-expanded': this._open ? 'true' : 'false',
                'aria-haspopup': 'true',
                'aria-readonly': readOnly ? 'true' : 'false',
                'aria-required': required ? 'true' : 'false',
                classes: this.classes(css.root, this._open ? css.open : null, invalid ? css.invalid : null, invalid === false ? css.valid : null),
                key: 'root',
                role: 'combobox'
            }, [
                controls,
                menu
            ]);
        };
        ComboBox = __decorate([
            Themeable_1.theme(css),
            Themeable_1.theme(iconCss),
            diffProperty_1.diffProperty('results', diff_1.reference)
        ], ComboBox);
        return ComboBox;
    }(exports.ComboBoxBase));
    exports.default = ComboBox;
});
//# sourceMappingURL=ComboBox.js.map