{"version":3,"file":"ResultMenu.js","sourceRoot":"","sources":["ResultMenu.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;IAAA,2DAA0D;IAC1D,gEAAgG;IAChG,8DAA2F;IAC3F,yCAA2C;IAI3C,6CAA+C;IAyB9C,CAAC;IAEW,QAAA,cAAc,GAAG,wBAAa,CAAC,0BAAc,CAAC,uBAAU,CAAC,CAAC,CAAC;IAGxE,IAAqB,UAAU;QAAS,8BAAoC;QAA5E;;QAqCA,CAAC;QApCA,kCAAa,GAAb,UAAc,OAAgB;YAC7B,MAAM,CAAC,OAAO,CAAC;QAChB,CAAC;QAED,2BAAM,GAAN;YACO,IAAA,oBAUa,EATlB,kCAAc,EACd,UAAE,EACF,wBAA8B,EAA9B,qEAA8B,EAC9B,wCAAiB,EACjB,0CAAkB,EAClB,oCAAe,EACf,oBAAO,EACP,gCAAa,EACb,aAAU,EAAV,+BAAU,CACS;YAEpB,IAAM,cAAc,GAAG,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,GAAG,CAAC,UAAC,MAAM,EAAE,CAAC,IAAK,OAAA,KAAC,CAAa,aAAa,EAAE;gBACjG,cAAc,gBAAA;gBACd,KAAK,EAAE,CAAC;gBACR,UAAU,EAAE,gBAAgB;gBAC5B,GAAG,EAAE,MAAM,CAAC,CAAC,CAAC;gBACd,WAAW,EAAE,iBAAiB;gBAC9B,YAAY,EAAE,kBAAkB;gBAChC,SAAS,EAAE,eAAe;gBAC1B,MAAM,QAAA;gBACN,QAAQ,EAAE,CAAC,KAAK,aAAa;gBAC7B,KAAK,OAAA;aACL,CAAC,EAXmE,CAWnE,CAAC,CAAC,CAAC;YAEL,MAAM,CAAC,KAAC,CAAC,KAAK,EAAE;gBACf,OAAO,EAAE,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC;gBACnC,EAAE,IAAA;gBACF,IAAI,EAAE,SAAS;aACf,EAAE,cAAc,CAAC,CAAC;QACpB,CAAC;QACF,iBAAC;IAAD,CAAC,AArCD,CAAwC,sBAAc,GAqCrD;IArCoB,UAAU;QAD9B,iBAAK,CAAC,GAAG,CAAC;OACU,UAAU,CAqC9B;sBArCoB,UAAU","sourcesContent":["import { WidgetBase } from '@dojo/widget-core/WidgetBase';\nimport { ThemeableMixin, ThemeableProperties, theme } from '@dojo/widget-core/mixins/Themeable';\nimport { RegistryMixin, RegistryMixinProperties } from '@dojo/widget-core/mixins/Registry';\nimport { v, w } from '@dojo/widget-core/d';\nimport { DNode, WNode } from '@dojo/widget-core/interfaces';\nimport ResultItem from './ResultItem';\n\nimport * as css from './styles/comboBox.m.css';\n\n/**\n * @type ResultMenuProperties\n *\n * Properties that can be set on a ResultMenu component\n *\n * @property getResultLabel         Can be used to get the text label of a result based on the underlying result object\n * @property id                     An ID to apply to the ResultMenu DOM element\n * @property isResultDisabled       Used to determine if an item should be disabled\n * @property onResultMouseDown      Called when mouse clicks a result item\n * @property onResultMouseEnter     Called when mouse enters a result item\n * @property onResultMouseUp        Called when mouse releases a result item\n * @property results                List of result data objects\n * @property selectedIndex          Position of the selected result in the list of results\n */\nexport interface ResultMenuProperties extends ThemeableProperties, RegistryMixinProperties {\n\tgetResultLabel(result: any): string;\n\tid?: string;\n\tisResultDisabled?(result: any): boolean;\n\tonResultMouseDown(event: MouseEvent, index: number): void;\n\tonResultMouseEnter(event: MouseEvent, index: number): void;\n\tonResultMouseUp(event: MouseEvent, index: number): void;\n\tresults: any[];\n\tselectedIndex: number | undefined;\n};\n\nexport const ResultMenuBase = RegistryMixin(ThemeableMixin(WidgetBase));\n\n@theme(css)\nexport default class ResultMenu extends ResultMenuBase<ResultMenuProperties> {\n\trenderResults(results: WNode[]): any[] {\n\t\treturn results;\n\t}\n\n\trender(): DNode {\n\t\tconst {\n\t\t\tgetResultLabel,\n\t\t\tid,\n\t\t\tisResultDisabled = () => false,\n\t\t\tonResultMouseDown,\n\t\t\tonResultMouseEnter,\n\t\t\tonResultMouseUp,\n\t\t\tresults,\n\t\t\tselectedIndex,\n\t\t\ttheme = {}\n\t\t} = this.properties;\n\n\t\tconst resultElements = this.renderResults(results.map((result, i) => w<ResultItem>('result-item', {\n\t\t\tgetResultLabel,\n\t\t\tindex: i,\n\t\t\tisDisabled: isResultDisabled,\n\t\t\tkey: String(i),\n\t\t\tonMouseDown: onResultMouseDown,\n\t\t\tonMouseEnter: onResultMouseEnter,\n\t\t\tonMouseUp: onResultMouseUp,\n\t\t\tresult,\n\t\t\tselected: i === selectedIndex,\n\t\t\ttheme\n\t\t})));\n\n\t\treturn v('div', {\n\t\t\tclasses: this.classes(css.dropdown),\n\t\t\tid,\n\t\t\trole: 'listbox'\n\t\t}, resultElements);\n\t}\n}\n"]}