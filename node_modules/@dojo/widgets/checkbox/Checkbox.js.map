{"version":3,"file":"Checkbox.js","sourceRoot":"","sources":["Checkbox.ts"],"names":[],"mappings":"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","sourcesContent":["import { WidgetBase } from '@dojo/widget-core/WidgetBase';\nimport { DNode } from '@dojo/widget-core/interfaces';\nimport { ThemeableMixin, ThemeableProperties, theme } from '@dojo/widget-core/mixins/Themeable';\nimport Label, { LabelOptions } from '../label/Label';\nimport { v, w } from '@dojo/widget-core/d';\nimport * as css from './styles/checkbox.m.css';\n\n/**\n * @type CheckboxProperties\n *\n * Properties that can be set on a Checkbox component\n *\n * @property checked        Checked/unchecked property of the radio\n * @property describedBy    ID of an element that provides more descriptive text\n * @property disabled       Prevents the user from interacting with the form field\n * @property formId         ID of a form element associated with the form field\n * @property invalid        Indicates the valid is invalid, or required and not filled in\n * @property label          Label settings for form label text, position, and visibility\n * @property mode           The type of user interface to show for this Checkbox\n * @property name           The form widget's name\n * @property offLabel       Label to show in the \"off\" positin of a toggle\n * @property onLabel        Label to show in the \"on\" positin of a toggle\n * @property readOnly       Allows or prevents user interaction\n * @property required       Whether or not a value is required\n * @property value          The current value\n * @property onBlur         Called when the input loses focus\n * @property onChange       Called when the node's 'change' event is fired\n * @property onClick        Called when the input is clicked\n * @property onFocus        Called when the input is focused\n * @property onMouseDown    Called on the input's mousedown event\n * @property onMouseUp      Called on the input's mouseup event\n * @property onTouchStart   Called on the input's touchstart event\n * @property onTouchEnd     Called on the input's touchend event\n * @property onTouchCancel  Called on the input's touchcancel event\n */\nexport interface CheckboxProperties extends ThemeableProperties {\n\tchecked?: boolean;\n\tdescribedBy?: string;\n\tdisabled?: boolean;\n\tformId?: string;\n\tinvalid?: boolean;\n\tlabel?: string | LabelOptions;\n\tmode?: Mode;\n\tname?: string;\n\toffLabel?: DNode;\n\tonLabel?: DNode;\n\treadOnly?: boolean;\n\trequired?: boolean;\n\tvalue?: string;\n\tonBlur?(event: FocusEvent): void;\n\tonChange?(event: Event): void;\n\tonClick?(event: MouseEvent): void;\n\tonFocus?(event: FocusEvent): void;\n\tonMouseDown?(event: MouseEvent): void;\n\tonMouseUp?(event: MouseEvent): void;\n\tonTouchStart?(event: TouchEvent): void;\n\tonTouchEnd?(event: TouchEvent): void;\n\tonTouchCancel?(event: TouchEvent): void;\n}\n\n/**\n * The type of UI to show for this Checkbox\n */\nexport const enum Mode {\n\tnormal,\n\ttoggle\n};\n\nexport const CheckboxBase = ThemeableMixin(WidgetBase);\n\n@theme(css)\nexport default class Checkbox extends CheckboxBase<CheckboxProperties> {\n\tprivate _onBlur (event: FocusEvent) { this.properties.onBlur && this.properties.onBlur(event); }\n\tprivate _onChange (event: Event) { this.properties.onChange && this.properties.onChange(event); }\n\tprivate _onClick (event: MouseEvent) { this.properties.onClick && this.properties.onClick(event); }\n\tprivate _onFocus (event: FocusEvent) { this.properties.onFocus && this.properties.onFocus(event); }\n\tprivate _onMouseDown (event: MouseEvent) { this.properties.onMouseDown && this.properties.onMouseDown(event); }\n\tprivate _onMouseUp (event: MouseEvent) { this.properties.onMouseUp && this.properties.onMouseUp(event); }\n\tprivate _onTouchStart (event: TouchEvent) { this.properties.onTouchStart && this.properties.onTouchStart(event); }\n\tprivate _onTouchEnd (event: TouchEvent) { this.properties.onTouchEnd && this.properties.onTouchEnd(event); }\n\tprivate _onTouchCancel (event: TouchEvent) { this.properties.onTouchCancel && this.properties.onTouchCancel(event); }\n\n\trender(): DNode {\n\t\tconst {\n\t\t\tchecked = false,\n\t\t\tdescribedBy,\n\t\t\tdisabled,\n\t\t\tformId,\n\t\t\tinvalid,\n\t\t\tlabel,\n\t\t\tmode,\n\t\t\tname,\n\t\t\toffLabel,\n\t\t\tonLabel,\n\t\t\treadOnly,\n\t\t\trequired,\n\t\t\tvalue\n\t\t} = this.properties;\n\n\t\tconst stateClasses = [\n\t\t\tmode === Mode.toggle ? css.toggle : null,\n\t\t\tchecked ? css.checked : null,\n\t\t\tdisabled ? css.disabled : null,\n\t\t\tinvalid ? css.invalid : null,\n\t\t\tinvalid === false ? css.valid : null,\n\t\t\treadOnly ? css.readonly : null,\n\t\t\trequired ? css.required : null\n\t\t];\n\n\t\tconst children = [\n\t\t\tv('div', { classes: this.classes(css.inputWrapper) }, [\n\t\t\t\tmode === Mode.toggle ? v('div', { classes: this.classes(css.onLabel) }, [ onLabel || null ]) : null,\n\t\t\t\tmode === Mode.toggle ? v('div', { classes: this.classes(css.offLabel) }, [ offLabel || null ]) : null,\n\t\t\t\tv('input', {\n\t\t\t\t\tclasses: this.classes(css.input),\n\t\t\t\t\tchecked,\n\t\t\t\t\t'aria-describedby': describedBy,\n\t\t\t\t\tdisabled,\n\t\t\t\t\t'aria-invalid': invalid ? 'true' : null,\n\t\t\t\t\tname,\n\t\t\t\t\treadOnly,\n\t\t\t\t\t'aria-readonly': readOnly ? 'true' : null,\n\t\t\t\t\trequired,\n\t\t\t\t\ttype: 'checkbox',\n\t\t\t\t\tvalue,\n\t\t\t\t\tonblur: this._onBlur,\n\t\t\t\t\tonchange: this._onChange,\n\t\t\t\t\tonclick: this._onClick,\n\t\t\t\t\tonfocus: this._onFocus,\n\t\t\t\t\tonmousedown: this._onMouseDown,\n\t\t\t\t\tonmouseup: this._onMouseUp,\n\t\t\t\t\tontouchstart: this._onTouchStart,\n\t\t\t\t\tontouchend: this._onTouchEnd,\n\t\t\t\t\tontouchcancel: this._onTouchCancel\n\t\t\t\t})\n\t\t\t])\n\t\t];\n\n\t\tlet checkboxWidget;\n\n\t\tif (label) {\n\t\t\tcheckboxWidget = w(Label, {\n\t\t\t\tclasses: this.classes(css.root, ...stateClasses),\n\t\t\t\tformId,\n\t\t\t\tlabel\n\t\t\t}, children);\n\t\t}\n\t\telse {\n\t\t\tcheckboxWidget = v('div', {\n\t\t\t\tclasses: this.classes(css.root, ...stateClasses)\n\t\t\t}, children);\n\t\t}\n\n\t\treturn checkboxWidget;\n\t}\n}\n"]}