var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "./HistoryBase"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var HistoryBase_1 = require("./HistoryBase");
    /**
     * A memory-backed history manager. Can be used outside of browsers.
     */
    var MemoryHistory = (function (_super) {
        __extends(MemoryHistory, _super);
        function MemoryHistory(_a) {
            var current = (_a === void 0 ? { path: '' } : _a).path;
            var _this = _super.call(this, {}) || this;
            _this._current = current;
            return _this;
        }
        Object.defineProperty(MemoryHistory.prototype, "current", {
            get: function () {
                return this._current;
            },
            enumerable: true,
            configurable: true
        });
        MemoryHistory.prototype.prefix = function (path) {
            return path;
        };
        MemoryHistory.prototype.set = function (path) {
            if (this._current === path) {
                return;
            }
            this._current = path;
            this.emit({
                type: 'change',
                value: path
            });
        };
        MemoryHistory.prototype.replace = function (path) {
            this.set(path);
        };
        return MemoryHistory;
    }(HistoryBase_1.HistoryBase));
    exports.MemoryHistory = MemoryHistory;
    exports.default = MemoryHistory;
});
//# sourceMappingURL=MemoryHistory.js.map