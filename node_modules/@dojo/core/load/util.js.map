{"version":3,"file":"util.js","sourceRoot":"","sources":["util.ts"],"names":[],"mappings":";;;;;;;;;;;IAAA,gDAAqE;IA+BrE,kBAAyB,KAAU;QAClC,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,OAAO,KAAK,CAAC,IAAI,KAAK,UAAU,CAAC;IAC3D,CAAC;IAFD,4BAEC;IAID,oBAA2B,OAAoB;QAC9C,EAAE,CAAC,CAAC,qBAAU,CAAC,OAAO,CAAC,IAAI,sBAAW,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;YACjD,IAAI,kBAAgB,GAAU,EAAE,CAAC;YAEjC,gBAAK,CAAC,OAAO,EAAE,UAAC,MAAM;gBACrB,kBAAgB,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,UAAU,IAAI,MAAM,CAAC,OAAO,CAAC,GAAG,MAAM,CAAC,OAAO,GAAG,MAAM,CAAC,CAAC;YACxF,CAAC,CAAC,CAAC;YAEH,MAAM,CAAC,kBAAgB,CAAC;QACzB,CAAC;QACD,IAAI,CAAC,CAAC;YACL,MAAM,CAAC,CAAC,OAAO,CAAC,UAAU,IAAI,OAAO,CAAC,OAAO,CAAC,GAAG,OAAO,CAAC,OAAO,GAAG,OAAO,CAAC;QAC5E,CAAC;IACF,CAAC;IAbD,gCAaC","sourcesContent":["import { forOf, isIterable, isArrayLike } from '@dojo/shim/iterator';\nimport { Load } from '../load';\n\nexport interface LoadPlugin<T> {\n\t/**\n\t * An optional method that normmalizes a resource id.\n\t *\n\t * @param resourceId\n\t * The raw resource id.\n\t *\n\t * @param resolver\n\t * A method that can resolve an id to an absolute path. Depending on the environment, this will\n\t * usually be either `require.toUrl` or `require.resolve`.\n\t */\n\tnormalize?: (resourceId: string, resolver: (resourceId: string) => string) => string;\n\n\t/**\n\t * A method that loads the specified resource.\n\t *\n\t * @param resourceId\n\t * The id of the resource to load.\n\t *\n\t * @param load\n\t * The `load` method that was used to load and execute the plugin.\n\t *\n\t * @return\n\t * A promise that resolves to the loaded resource.\n\t */\n\tload(resourceId: string, load: Load): Promise<T>;\n}\n\nexport function isPlugin(value: any): value is LoadPlugin<any> {\n\treturn Boolean(value) && typeof value.load === 'function';\n}\n\nexport function useDefault(modules: any[]): any[];\nexport function useDefault(module: any): any;\nexport function useDefault(modules: any | any[]): any[] | any {\n\tif (isIterable(modules) || isArrayLike(modules)) {\n\t\tlet processedModules: any[] = [];\n\n\t\tforOf(modules, (module) => {\n\t\t\tprocessedModules.push((module.__esModule && module.default) ? module.default : module);\n\t\t});\n\n\t\treturn processedModules;\n\t}\n\telse {\n\t\treturn (modules.__esModule && modules.default) ? modules.default : modules;\n\t}\n}\n"]}