{"version":3,"file":"MultiMap.js","sourceRoot":"","sources":["MultiMap.ts"],"names":[],"mappings":"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","sourcesContent":["import '@dojo/shim/Symbol';\nimport Map from '@dojo/shim/Map';\nimport { from as arrayFrom } from '@dojo/shim/array';\nimport { forOf, Iterable, IterableIterator, ShimIterator } from '@dojo/shim/iterator';\n\n/**\n * A map implmentation that supports multiple keys for specific value.\n *\n * @param T Accepts the type of the value\n */\nexport default class MultiMap<T> implements Map<any[], T> {\n\tprivate _map: Map<any, any>;\n\tprivate _key: symbol;\n\n\t/**\n\t * @constructor\n\t *\n\t * @param iterator an array or iterator of tuples to initialize the map with.\n\t */\n\tconstructor(iterable?: ArrayLike<[any[], T]> | Iterable<[any[], T]>) {\n\t\tthis._map = new Map<any, any>();\n\t\tthis._key = Symbol();\n\t\tif (iterable) {\n\t\t\tforOf(iterable, (value: [any[], T]) => {\n\t\t\t\tthis.set(value[0], value[1]);\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * Sets the value for the array of keys provided\n\t *\n\t * @param keys The array of keys to store the value against\n\t * @param value the value of the map entry\n\t *\n\t * @return the multi map instance\n\t */\n\tset(keys: any[], value: T): this {\n\t\tlet map = this._map;\n\t\tlet childMap;\n\n\t\tfor (let i = 0; i < keys.length; i++) {\n\t\t\tif (map.get(keys[i])) {\n\t\t\t\tmap = map.get(keys[i]);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tchildMap = new Map<any, any>();\n\t\t\tmap.set(keys[i], childMap);\n\t\t\tmap = childMap;\n\t\t};\n\n\t\tmap.set(this._key, value);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Returns the value entry for the array of keys\n\t *\n\t * @param keys The array of keys to look up the value for\n\t *\n\t * @return The value if found otherwise `undefined`\n\t */\n\tget(keys: any[]): T | undefined {\n\t\tlet map = this._map;\n\n\t\tfor (let i = 0; i < keys.length; i++) {\n\t\t\tmap = map.get(keys[i]);\n\n\t\t\tif (!map) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t};\n\n\t\treturn map.get(this._key);\n\t}\n\n\t/**\n\t * Returns a boolean indicating if the key exists in the map\n\t *\n\t * @return boolean true if the key exists otherwise false\n\t */\n\thas(keys: any[]): boolean {\n\t\tlet map = this._map;\n\n\t\tfor (let i = 0; i < keys.length; i++) {\n\t\t\tmap = map.get(keys[i]);\n\t\t\tif (!map) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Returns the size of the map, based on the number of unique keys\n\t */\n\tget size(): number {\n\t\treturn arrayFrom(this.keys()).length;\n\t}\n\n\t/**\n\t * Deletes the entry for the key provided.\n\t *\n\t * @param keys the key of the entry to remove\n\t * @return boolean trus if the entry was deleted, false if the entry was not found\n\t */\n\tdelete(keys: any[]): boolean {\n\t\tlet map = this._map;\n\t\tconst path = [this._map];\n\n\t\tfor (let i = 0; i < keys.length; i++) {\n\t\t\tmap = map.get(keys[i]);\n\t\t\tpath.push(map);\n\t\t\tif (!map) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\tmap.delete(this._key);\n\n\t\tfor (let i = keys.length - 1; i >= 0; i--) {\n\t\t\tmap = path[i].get(keys[i]);\n\t\t\tif (map.size) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tpath[i].delete(keys[i]);\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Return an iterator that yields each value in the map\n\t *\n\t * @return An iterator containing the instance's values.\n\t */\n\tvalues(): IterableIterator<T> {\n\t\tconst values: T[] = [];\n\n\t\tconst getValues = (map: Map<any, any>) => {\n\t\t\tmap.forEach((value, key) => {\n\t\t\t\tif (key === this._key) {\n\t\t\t\t\tvalues.push(value);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tgetValues(value);\n\t\t\t\t}\n\t\t\t});\n\t\t};\n\n\t\tgetValues(this._map);\n\t\treturn new ShimIterator<T>(values);\n\t}\n\n\t/**\n\t * Return an iterator that yields each key array in the map\n\t *\n\t * @return An iterator containing the instance's keys.\n\t */\n\tkeys(): IterableIterator<any[]> {\n\t\tconst finalKeys: any[][] = [];\n\n\t\tconst getKeys = (map: Map<any, any>, keys: any[] = []) => {\n\t\t\tmap.forEach((value, key) => {\n\t\t\t\tif (key === this._key) {\n\t\t\t\t\tfinalKeys.push(keys);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tconst nextKeys = [...keys, key];\n\t\t\t\t\tgetKeys(value, nextKeys);\n\t\t\t\t}\n\t\t\t});\n\t\t};\n\n\t\tgetKeys(this._map);\n\t\treturn new ShimIterator<any[]>(finalKeys);\n\t}\n\n\t/**\n\t * Returns an iterator that yields each key/value pair as an array.\n\t *\n\t * @return An iterator for each key/value pair in the instance.\n\t */\n\tentries(): IterableIterator<[any[], T]> {\n\t\tconst finalEntries: [ any[], T ][] = [];\n\n\t\tconst getKeys = (map: Map<any, any>, keys: any[] = []) => {\n\t\t\tmap.forEach((value, key) => {\n\t\t\t\tif (key === this._key) {\n\t\t\t\t\tfinalEntries.push([ keys, value ]);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tconst nextKeys = [...keys, key];\n\t\t\t\t\tgetKeys(value, nextKeys);\n\t\t\t\t}\n\t\t\t});\n\t\t};\n\n\t\tgetKeys(this._map);\n\t\treturn new ShimIterator<[any[], T]>(finalEntries);\n\t}\n\n\t/**\n\t * Executes a given function for each map entry. The function\n\t * is invoked with three arguments: the element value, the\n\t * element key, and the associated Map instance.\n\t *\n\t * @param callback The function to execute for each map entry,\n\t * @param context The value to use for `this` for each execution of the calback\n\t */\n\tforEach(callback: (value: T, key: any[], mapInstance: MultiMap<T>) => any, context?: {}): void {\n\t\tconst entries = this.entries();\n\n\tforOf(entries, (value: [any[], T]) => {\n\t\t\tcallback.call(context, value[1], value[0], this);\n\t\t});\n\t}\n\n\t/**\n\t * Deletes all keys and their associated values.\n\t */\n\tclear(): void {\n\t\tthis._map.clear();\n\t}\n\n\t[Symbol.iterator](): IterableIterator<[any[], T]> {\n\t\treturn this.entries();\n\t}\n\n\t[Symbol.toStringTag] = 'MultiMap';\n}\n"]}