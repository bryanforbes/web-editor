/// <reference types="node" />
import * as http from 'http';
import Task from '../../async/Task';
import Headers from '../Headers';
import { RequestOptions } from '../interfaces';
import Response from '../Response';
/**
 * Request options specific to a node request
 */
export interface NodeRequestOptions extends RequestOptions {
    agent?: any;
    ca?: any;
    cert?: string;
    ciphers?: string;
    dataEncoding?: string;
    followRedirects?: boolean;
    key?: string;
    localAddress?: string;
    passphrase?: string;
    pfx?: any;
    proxy?: string;
    rejectUnauthorized?: boolean;
    secureProtocol?: string;
    socketPath?: string;
    acceptCompression?: boolean;
    socketOptions?: {
        keepAlive?: number;
        noDelay?: boolean;
        timeout?: number;
    };
    streamEncoding?: string;
    redirectOptions?: {
        limit?: number;
        count?: number;
        keepOriginalMethod?: boolean;
    };
}
/**
 * Turn a node native response object into something that resembles the fetch api
 */
export declare class NodeResponse extends Response {
    readonly headers: Headers;
    readonly ok: boolean;
    readonly status: number;
    readonly statusText: string;
    downloadBody: boolean;
    readonly bodyUsed: boolean;
    readonly nativeResponse: http.IncomingMessage;
    readonly requestOptions: NodeRequestOptions;
    readonly url: string;
    constructor(response: http.IncomingMessage);
    arrayBuffer(): Task<ArrayBuffer>;
    blob(): Task<Blob>;
    formData(): Task<FormData>;
    text(): Task<string>;
}
export declare function getAuth(proxyAuth: string | undefined, options: NodeRequestOptions): string | undefined;
export default function node(url: string, options?: NodeRequestOptions): Task<Response>;
