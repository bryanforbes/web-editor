(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "@dojo/shim/iterator", "@dojo/shim/Map"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var iterator_1 = require("@dojo/shim/iterator");
    var Map_1 = require("@dojo/shim/Map");
    function isHeadersLike(object) {
        return typeof object.append === 'function' && typeof object.entries === 'function' && typeof object[Symbol.iterator] === 'function';
    }
    var Headers = (function () {
        function Headers(headers) {
            var _this = this;
            this.map = new Map_1.default();
            if (headers) {
                if (headers instanceof Headers) {
                    this.map = new Map_1.default(headers.map);
                }
                else if (isHeadersLike(headers)) {
                    iterator_1.forOf(headers, function (_a) {
                        var key = _a[0], value = _a[1];
                        _this.append(key, value);
                    });
                }
                else {
                    for (var key in headers) {
                        this.set(key, headers[key]);
                    }
                }
            }
        }
        Headers.prototype.append = function (name, value) {
            var values = this.map.get(name.toLowerCase());
            if (values) {
                values.push(value);
            }
            else {
                this.set(name, value);
            }
        };
        Headers.prototype.delete = function (name) {
            this.map.delete(name.toLowerCase());
        };
        Headers.prototype.entries = function () {
            var entries = [];
            iterator_1.forOf(this.map.entries(), function (_a) {
                var key = _a[0], values = _a[1];
                values.forEach(function (value) {
                    entries.push([key, value]);
                });
            });
            return new iterator_1.ShimIterator(entries);
        };
        Headers.prototype.get = function (name) {
            var values = this.map.get(name.toLowerCase());
            if (values) {
                return values[0];
            }
            else {
                return null;
            }
        };
        Headers.prototype.getAll = function (name) {
            var values = this.map.get(name.toLowerCase());
            if (values) {
                return values.slice(0);
            }
            else {
                return [];
            }
        };
        Headers.prototype.has = function (name) {
            return this.map.has(name.toLowerCase());
        };
        Headers.prototype.keys = function () {
            return this.map.keys();
        };
        Headers.prototype.set = function (name, value) {
            this.map.set(name.toLowerCase(), [value]);
        };
        Headers.prototype.values = function () {
            var values = [];
            iterator_1.forOf(this.map.values(), function (value) {
                values.push.apply(values, value);
            });
            return new iterator_1.ShimIterator(values);
        };
        Headers.prototype[Symbol.iterator] = function () {
            return this.entries();
        };
        return Headers;
    }());
    exports.default = Headers;
});
//# sourceMappingURL=Headers.js.map