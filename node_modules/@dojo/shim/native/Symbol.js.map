{"version":3,"file":"Symbol.js","sourceRoot":"","sources":["Symbol.ts"],"names":[],"mappings":";;;;;;;;;;;IAAA,4CAAuC;IACvC,wCAAqD;IAErD,4CAA4C;IAC5C,IAAM,UAAU,GAAsB,gBAAM,CAAC,MAAM,CAAC;IAEpD;;OAEG;IACH,CAAE,aAAa,EAAE,oBAAoB,EAAE,UAAU,EAAE,SAAS,EAAE,SAAS,EAAE,QAAQ,EAAE,OAAO,EAAE,OAAO,EAAE,aAAa;QACjH,aAAa,EAAE,aAAa,CAAE,CAAC,OAAO,CAAC,UAAC,SAAS;QAChD,EAAE,CAAC,CAAC,CAAQ,MAAO,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;YAChC,MAAM,CAAC,cAAc,CAAC,MAAM,EAAE,SAAS,EAAE,yBAAkB,CAAC,MAAM,CAAC,GAAG,CAAC,SAAS,CAAC,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC,CAAC;QACnG,CAAC;IACF,CAAC,CAAC,CAAC;IAEJ,kBAAyB,KAAU;QAClC,MAAM,CAAC,OAAO,KAAK,KAAK,QAAQ,CAAC;IAClC,CAAC;IAFD,4BAEC;IAAA,CAAC;IAEF,kBAAe,UAAU,CAAC","sourcesContent":["import global from '../support/global';\nimport { getValueDescriptor } from '../support/util';\n\n/* tslint:disable-next-line:variable-name */\nconst SymbolShim: SymbolConstructor = global.Symbol;\n\n/**\n * Fill any missing well known symbols if the native Symbol is missing them\n */\n[ 'hasInstance', 'isConcatSpreadable', 'iterator', 'species', 'replace', 'search', 'split', 'match', 'toPrimitive',\n\t'toStringTag', 'unscopables' ].forEach((wellKnown) => {\n\t\tif (!(<any> Symbol)[wellKnown]) {\n\t\t\tObject.defineProperty(Symbol, wellKnown, getValueDescriptor(Symbol.for(wellKnown), false, false));\n\t\t}\n\t});\n\nexport function isSymbol(value: any): value is symbol {\n\treturn typeof value === 'symbol';\n};\n\nexport default SymbolShim;\n"]}