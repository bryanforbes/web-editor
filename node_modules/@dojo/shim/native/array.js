(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "../support/util"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var util_1 = require("../support/util");
    exports.from = Array.from;
    /**
     * Creates a new array from the function parameters.
     *
     * @param arguments Any number of arguments for the array
     * @return An array from the given arguments
     */
    exports.of = Array.of;
    /* ES6 Array instance methods */
    /**
     * Copies data internally within an array or array-like object.
     *
     * @param target The target array-like object
     * @param offset The index to start copying values to; if negative, it counts backwards from length
     * @param start The first (inclusive) index to copy; if negative, it counts backwards from length
     * @param end The last (exclusive) index to copy; if negative, it counts backwards from length
     * @return The target
     */
    exports.copyWithin = util_1.wrapNative(Array.prototype.copyWithin);
    /**
     * Fills elements of an array-like object with the specified value.
     *
     * @param target The target to fill
     * @param value The value to fill each element of the target with
     * @param start The first index to fill
     * @param end The (exclusive) index at which to stop filling
     * @return The filled target
     */
    exports.fill = util_1.wrapNative(Array.prototype.fill);
    /**
     * Finds and returns the first instance matching the callback or undefined if one is not found.
     *
     * @param target An array-like object
     * @param callback A function returning if the current value matches a criteria
     * @param [thisArg] The execution context for the find function
     * @return The first element matching the callback, or undefined if one does not exist
     */
    exports.find = util_1.wrapNative(Array.prototype.find);
    /**
     * Performs a linear search and returns the first index whose value satisfies the passed callback,
     * or -1 if no values satisfy it.
     *
     * @param target An array-like object
     * @param callback A function returning true if the current value satisfies its criteria
     * @param [thisArg] The execution context for the find function
     * @return The first index whose value satisfies the passed callback, or -1 if no values satisfy it
     */
    exports.findIndex = util_1.wrapNative(Array.prototype.findIndex);
    /* ES7 Array instance methods */
    /**
     * Determines whether an array includes a given value
     *
     * @param target the target array-like object
     * @param searchElement the item to search for
     * @param fromIndex the starting index to search from
     */
    exports.includes = util_1.wrapNative(Array.prototype.includes);
});
//# sourceMappingURL=array.js.map