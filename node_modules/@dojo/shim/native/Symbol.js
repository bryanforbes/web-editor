(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "../support/global", "../support/util"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var global_1 = require("../support/global");
    var util_1 = require("../support/util");
    /* tslint:disable-next-line:variable-name */
    var SymbolShim = global_1.default.Symbol;
    /**
     * Fill any missing well known symbols if the native Symbol is missing them
     */
    ['hasInstance', 'isConcatSpreadable', 'iterator', 'species', 'replace', 'search', 'split', 'match', 'toPrimitive',
        'toStringTag', 'unscopables'].forEach(function (wellKnown) {
        if (!Symbol[wellKnown]) {
            Object.defineProperty(Symbol, wellKnown, util_1.getValueDescriptor(Symbol.for(wellKnown), false, false));
        }
    });
    function isSymbol(value) {
        return typeof value === 'symbol';
    }
    exports.isSymbol = isSymbol;
    ;
    exports.default = SymbolShim;
});
//# sourceMappingURL=Symbol.js.map