{"version":3,"file":"number.js","sourceRoot":"","sources":["number.ts"],"names":[],"mappings":";;;;;;;;;;;IAAA,4CAAuC;IAEvC;;OAEG;IACU,QAAA,OAAO,GAAG,gBAAM,CAAC,MAAM,CAAC,OAAO,CAAC;IAE7C;;OAEG;IACU,QAAA,gBAAgB,GAAG,gBAAM,CAAC,MAAM,CAAC,gBAAgB,CAAC;IAE/D;;OAEG;IACU,QAAA,gBAAgB,GAAG,gBAAM,CAAC,MAAM,CAAC,gBAAgB,CAAC;IAE/D;;;;;OAKG;IACU,QAAA,KAAK,GAAG,gBAAM,CAAC,MAAM,CAAC,KAAK,CAAC;IAEzC;;;;;OAKG;IACU,QAAA,QAAQ,GAAG,gBAAM,CAAC,MAAM,CAAC,QAAQ,CAAC;IAE/C;;;;;OAKG;IACU,QAAA,SAAS,GAAG,gBAAM,CAAC,MAAM,CAAC,SAAS,CAAC;IAEjD;;;;;;;;;OASG;IACU,QAAA,aAAa,GAAG,gBAAM,CAAC,MAAM,CAAC,aAAa,CAAC","sourcesContent":["import global from '../support/global';\n\n/**\n * The smallest interval between two representable numbers.\n */\nexport const EPSILON = global.Number.EPSILON;\n\n/**\n * The maximum safe integer in JavaScript\n */\nexport const MAX_SAFE_INTEGER = global.Number.MAX_SAFE_INTEGER;\n\n/**\n * The minimum safe integer in JavaScript\n */\nexport const MIN_SAFE_INTEGER = global.Number.MIN_SAFE_INTEGER;\n\n/**\n * Determines whether the passed value is NaN without coersion.\n *\n * @param value The value to test\n * @return true if the value is NaN, false if it is not\n */\nexport const isNaN = global.Number.isNaN;\n\n/**\n * Determines whether the passed value is a finite number without coersion.\n *\n * @param value The value to test\n * @return true if the value is finite, false if it is not\n */\nexport const isFinite = global.Number.isFinite;\n\n/**\n * Determines whether the passed value is an integer.\n *\n * @param value The value to test\n * @return true if the value is an integer, false if it is not\n */\nexport const isInteger = global.Number.isInteger;\n\n/**\n * Determines whether the passed value is an integer that is 'safe,' meaning:\n *   1. it can be expressed as an IEEE-754 double precision number\n *   2. it has a one-to-one mapping to a mathematical integer, meaning its\n *      IEEE-754 representation cannot be the result of rounding any other\n *      integer to fit the IEEE-754 representation\n *\n * @param value The value to test\n * @return true if the value is an integer, false if it is not\n */\nexport const isSafeInteger = global.Number.isSafeInteger;\n"]}