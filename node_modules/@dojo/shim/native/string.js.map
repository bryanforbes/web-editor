{"version":3,"file":"string.js","sourceRoot":"","sources":["string.ts"],"names":[],"mappings":";;;;;;;;;;;IAAA,wCAA6C;IAE7C;;OAEG;IACU,QAAA,kBAAkB,GAAG,MAAM,CAAC;IAEzC;;OAEG;IACU,QAAA,kBAAkB,GAAG,MAAM,CAAC;IAEzC;;OAEG;IACU,QAAA,iBAAiB,GAAG,MAAM,CAAC;IAExC;;OAEG;IACU,QAAA,iBAAiB,GAAG,MAAM,CAAC;IAExC;;;;;;;;;;;;;;;OAeG;IACU,QAAA,GAAG,GAA+E,MAAO,CAAC,GAAG,CAAC;IAE3G;;;;;;OAMG;IACU,QAAA,aAAa,GAA+C,MAAO,CAAC,aAAa,CAAC;IAE/F;;;;;;OAMG;IACU,QAAA,WAAW,GAAgD,iBAAU,CAAQ,MAAM,CAAC,SAAU,CAAC,WAAW,CAAC,CAAC;IAEzH;;;;;;OAMG;IACU,QAAA,MAAM,GAA6C,iBAAU,CAAQ,MAAM,CAAC,SAAU,CAAC,MAAM,CAAC,CAAC;IAE5G;;;;;;;OAOG;IACU,QAAA,UAAU,GAAiE,iBAAU,CAAQ,MAAM,CAAC,SAAU,CAAC,UAAU,CAAC,CAAC;IAExI;;;;;;;OAOG;IACU,QAAA,QAAQ,GAAoE,iBAAU,CAAQ,MAAM,CAAC,SAAU,CAAC,QAAQ,CAAC,CAAC;IAEvI;;;;;;;OAOG;IACU,QAAA,QAAQ,GAAiE,iBAAU,CAAQ,MAAM,CAAC,SAAU,CAAC,QAAQ,CAAC,CAAC","sourcesContent":["import { wrapNative } from '../support/util';\n\n/**\n * The minimum location of high surrogates\n */\nexport const HIGH_SURROGATE_MIN = 0xD800;\n\n/**\n * The maximum location of high surrogates\n */\nexport const HIGH_SURROGATE_MAX = 0xDBFF;\n\n/**\n * The minimum location of low surrogates\n */\nexport const LOW_SURROGATE_MIN = 0xDC00;\n\n/**\n * The maximum location of low surrogates\n */\nexport const LOW_SURROGATE_MAX = 0xDFFF;\n\n/**\n * A tag function for template strings to get the template string's raw string form.\n *\n * @param callSite Call site object (or a template string in TypeScript, which will transpile to one)\n * @param substitutions Values to substitute within the template string (TypeScript will generate these automatically)\n * @return String containing the raw template string with variables substituted\n *\n * @example\n * // Within TypeScript; logs 'The answer is:\\\\n42'\n * let answer = 42;\n * console.log(string.raw`The answer is:\\n${answer}`);\n *\n * @example\n * // The same example as above, but directly specifying a JavaScript object and substitution\n * console.log(string.raw({ raw: [ 'The answer is:\\\\n', '' ] }, 42));\n */\nexport const raw: (callSite: TemplateStringsArray, ...substitutions: any[]) => string = (<any> String).raw;\n\n/**\n * Returns the UTF-16 encoded code point value of a given position in a string.\n *\n * @param text The string containing the element whose code point is to be determined\n * @param position Position of an element within the string to retrieve the code point value from\n * @return A non-negative integer representing the UTF-16 encoded code point value\n */\nexport const fromCodePoint: (...codePoints: number[]) => string = (<any> String).fromCodePoint;\n\n/**\n * Returns the UTF-16 encoded code point value of a given position in a string.\n *\n * @param text The string containing the element whose code point is to be determined\n * @param position Position of an element within the string to retrieve the code point value from\n * @return A non-negative integer representing the UTF-16 encoded code point value\n */\nexport const codePointAt: (text: string, position?: number) => number = wrapNative((<any> String.prototype).codePointAt);\n\n/**\n * Returns a string containing the given string repeated the specified number of times.\n *\n * @param text The string to repeat\n * @param count The number of times to repeat the string\n * @return A string containing the input string repeated count times\n */\nexport const repeat: (text: string, count?: number) => string = wrapNative((<any> String.prototype).repeat);\n\n/**\n * Determines whether a string begins with the given substring (optionally starting from a given index).\n *\n * @param text The string to look for the search string within\n * @param search The string to search for\n * @param position The index to begin searching at\n * @return Boolean indicating if the search string was found at the beginning of the given string\n */\nexport const startsWith: (text: string, search: string, position?: number) => boolean = wrapNative((<any> String.prototype).startsWith);\n\n/**\n * Determines whether a string ends with the given substring.\n *\n * @param text The string to look for the search string within\n * @param search The string to search for\n * @param endPosition The index searching should stop before (defaults to text.length)\n * @return Boolean indicating if the search string was found at the end of the given string\n */\nexport const endsWith: (text: string, search: string, endPosition?: number) => boolean = wrapNative((<any> String.prototype).endsWith);\n\n/**\n * Determines whether a string includes the given substring (optionally starting from a given index).\n *\n * @param text The string to look for the search string within\n * @param search The string to search for\n * @param position The index to begin searching at\n * @return Boolean indicating if the search string was found within the given string\n */\nexport const includes: (text: string, search: string, position?: number) => boolean = wrapNative((<any> String.prototype).includes);\n"]}