{"version":3,"file":"math.js","sourceRoot":"","sources":["math.ts"],"names":[],"mappings":";;;;;;;;;;;IAAA;;;;;OAKG;IACU,QAAA,KAAK,GAAiC,IAAK,CAAC,KAAK,CAAC;IAE/D;;;;;OAKG;IACU,QAAA,KAAK,GAAiC,IAAK,CAAC,KAAK,CAAC;IAE/D;;;;;OAKG;IACU,QAAA,KAAK,GAAiC,IAAK,CAAC,KAAK,CAAC;IAE/D;;;;;OAKG;IACU,QAAA,IAAI,GAAiC,IAAK,CAAC,IAAI,CAAC;IAE7D;;;;;;OAMG;IACU,QAAA,KAAK,GAAiC,IAAK,CAAC,KAAK,CAAC;IAE/D;;;;;OAKG;IACU,QAAA,IAAI,GAAiC,IAAK,CAAC,IAAI,CAAC;IAE7D;;;;;OAKG;IACU,QAAA,KAAK,GAAiC,IAAK,CAAC,KAAK,CAAC;IAE/D;;;;;OAKG;IACU,QAAA,MAAM,GAAiC,IAAK,CAAC,MAAM,CAAC;IAEjE;;;;OAIG;IACU,QAAA,KAAK,GAAyC,IAAK,CAAC,KAAK,CAAC;IAEvE;;;;;;OAMG;IACU,QAAA,IAAI,GAA4C,IAAK,CAAC,IAAI,CAAC;IAExE;;;;;OAKG;IACU,QAAA,IAAI,GAAiC,IAAK,CAAC,IAAI,CAAC;IAE7D;;;;;OAKG;IACU,QAAA,KAAK,GAAiC,IAAK,CAAC,KAAK,CAAC;IAE/D;;;;;OAKG;IACU,QAAA,KAAK,GAAiC,IAAK,CAAC,KAAK,CAAC;IAE/D;;;;;OAKG;IACU,QAAA,IAAI,GAAiC,IAAK,CAAC,IAAI,CAAC;IAE7D;;;;;OAKG;IACU,QAAA,IAAI,GAAiC,IAAK,CAAC,IAAI,CAAC;IAE7D;;;;;OAKG;IACU,QAAA,IAAI,GAAiC,IAAK,CAAC,IAAI,CAAC;IAE7D;;;;;OAKG;IACU,QAAA,KAAK,GAAiC,IAAK,CAAC,KAAK,CAAC","sourcesContent":["/**\n * Returns the hyperbolic arccosine of a number.\n *\n * @param n The number to use in calculation\n * @return The result\n */\nexport const acosh: (n: number) => number = (<any> Math).acosh;\n\n/**\n * Returns the hyperbolic arcsine of a number.\n *\n * @param n The number to use in calculation\n * @return The result\n */\nexport const asinh: (n: number) => number = (<any> Math).asinh;\n\n/**\n * Returns the hyperbolic arctangent of a number.\n *\n * @param n The number to use in calculation\n * @return The result\n */\nexport const atanh: (n: number) => number = (<any> Math).atanh;\n\n/**\n * Returns the cube root of a number.\n *\n * @param n The number to use in calculation\n * @return The result\n */\nexport const cbrt: (n: number) => number = (<any> Math).cbrt;\n\n/**\n * Returns the number of leading zero bits in the 32-bit\n * binary representation of a number.\n *\n * @param n The number to use in calculation\n * @return The result\n */\nexport const clz32: (n: number) => number = (<any> Math).clz32;\n\n/**\n * Returns the hyperbolic cosine of a number.\n *\n * @param n The number to use in calculation\n * @return The result\n */\nexport const cosh: (n: number) => number = (<any> Math).cosh;\n\n/**\n * Returns e raised to the specified power minus one.\n *\n * @param n The number to use in calculation\n * @return The result\n */\nexport const expm1: (n: number) => number = (<any> Math).expm1;\n\n/**\n * Returns the nearest single-precision float representation of a number.\n *\n * @param n The number to use in calculation\n * @return The result\n */\nexport const fround: (n: number) => number = (<any> Math).fround;\n\n/**\n * Returns the square root of the sum of squares of its arguments.\n *\n * @return The result\n */\nexport const hypot: (...args: number[]) => number = (<any> Math).hypot;\n\n/**\n * Returns the result of the 32-bit multiplication of the two parameters.\n *\n * @param n The number to use in calculation\n * @param m The number to use in calculation\n * @return The result\n */\nexport const imul: (n: number, m: number) => number = (<any> Math).imul;\n\n/**\n * Returns the base 2 logarithm of a number.\n *\n * @param n The number to use in calculation\n * @return The result\n */\nexport const log2: (n: number) => number = (<any> Math).log2;\n\n/**\n * Returns the base 10 logarithm of a number.\n *\n * @param n The number to use in calculation\n * @return The result\n */\nexport const log10: (n: number) => number = (<any> Math).log10;\n\n/**\n * Returns the natural logarithm of 1 + a number.\n *\n * @param n The number to use in calculation\n * @return The result\n */\nexport const log1p: (n: number) => number = (<any> Math).log1p;\n\n/**\n * Returns the sign of a number, indicating whether the number is positive.\n *\n * @param n The number to use in calculation\n * @return 1 if the number is positive, -1 if the number is negative, or 0 if the number is 0\n */\nexport const sign: (n: number) => number = (<any> Math).sign;\n\n/**\n * Returns the hyperbolic sine of a number.\n *\n * @param n The number to use in calculation\n * @return The result\n */\nexport const sinh: (n: number) => number = (<any> Math).sinh;\n\n/**\n * Returns the hyperbolic tangent of a number.\n *\n * @param n The number to use in calculation\n * @return The result\n */\nexport const tanh: (n: number) => number = (<any> Math).tanh;\n\n/**\n * Returns the integral part of a number by removing any fractional digits.\n *\n * @param n The number to use in calculation\n * @return The result\n */\nexport const trunc: (n: number) => number = (<any> Math).trunc;\n"]}