{"version":3,"file":"array.js","sourceRoot":"","sources":["array.ts"],"names":[],"mappings":";;;;;;;;;;;IAAA,wCAA6C;IAwChC,QAAA,IAAI,GAAgB,KAAM,CAAC,IAAI,CAAC;IAE7C;;;;;OAKG;IACU,QAAA,EAAE,GAAsC,KAAM,CAAC,EAAE,CAAC;IAE/D,gCAAgC;IAEhC;;;;;;;;OAQG;IACU,QAAA,UAAU,GAA2F,iBAAU,CAAQ,KAAK,CAAC,SAAU,CAAC,UAAU,CAAC,CAAC;IAEjK;;;;;;;;OAQG;IACU,QAAA,IAAI,GAAwF,iBAAU,CAAQ,KAAK,CAAC,SAAU,CAAC,IAAI,CAAC,CAAC;IAElJ;;;;;;;OAOG;IACU,QAAA,IAAI,GAA4E,iBAAU,CAAQ,KAAK,CAAC,SAAU,CAAC,IAAI,CAAC,CAAC;IAEtI;;;;;;;;OAQG;IACU,QAAA,SAAS,GAAiF,iBAAU,CAAQ,KAAK,CAAC,SAAU,CAAC,SAAS,CAAC,CAAC;IAErJ,gCAAgC;IAEhC;;;;;;OAMG;IACU,QAAA,QAAQ,GAA+E,iBAAU,CAAQ,KAAK,CAAC,SAAU,CAAC,QAAQ,CAAC,CAAC","sourcesContent":["import { wrapNative } from '../support/util';\nimport { Iterable } from './iterator';\n\nexport interface MapCallback<T> {\n\t/**\n\t * A callback function when mapping\n\t *\n\t * @param element The element that is currently being mapped\n\t * @param index The current index of the element\n\t */\n\t(element: T, index: number): T;\n}\n\nexport interface FindCallback<T> {\n\t/**\n\t * A callback function when using find\n\t *\n\t * @param element The element that is currenty being analysed\n\t * @param index The current index of the element that is being analysed\n\t * @param array The source array\n\t */\n\t(element: T, index: number, array: ArrayLike<T>): boolean;\n}\n\n/* ES6 Array static methods */\n\nexport interface From {\n\t(arrayLike: string, mapFunction?: MapCallback<string>, thisArg?: {}): Array<string>;\n\t<T>(arrayLike: Iterable<T> | ArrayLike<T>, mapFunction?: MapCallback<T>, thisArg?: {}): Array<T>;\n\t/**\n\t * The Array.from() method creates a new Array instance from an array-like or iterable object.\n\t *\n\t * @param arrayLike An array-like or iterable object to convert to an array\n\t * @param mapFunction A map function to call on each element in the array\n\t * @param thisArg The execution context for the map function\n\t * @return The new Array\n\t */\n\t<T>(arrayLike: (string | Iterable<T> | ArrayLike<T>), mapFunction?: MapCallback<T>, thisArg?: {}): Array<T>;\n}\n\nexport const from: From = (<any> Array).from;\n\n/**\n * Creates a new array from the function parameters.\n *\n * @param arguments Any number of arguments for the array\n * @return An array from the given arguments\n */\nexport const of: (...items: any[]) => any[] = (<any> Array).of;\n\n/* ES6 Array instance methods */\n\n/**\n * Copies data internally within an array or array-like object.\n *\n * @param target The target array-like object\n * @param offset The index to start copying values to; if negative, it counts backwards from length\n * @param start The first (inclusive) index to copy; if negative, it counts backwards from length\n * @param end The last (exclusive) index to copy; if negative, it counts backwards from length\n * @return The target\n */\nexport const copyWithin: <T>(target: ArrayLike<T>, offset: number, start: number, end?: number) => ArrayLike<T> = wrapNative((<any> Array.prototype).copyWithin);\n\n/**\n * Fills elements of an array-like object with the specified value.\n *\n * @param target The target to fill\n * @param value The value to fill each element of the target with\n * @param start The first index to fill\n * @param end The (exclusive) index at which to stop filling\n * @return The filled target\n */\nexport const fill: <T>(target: ArrayLike<T>, value: any, start?: number, end?: number) => ArrayLike<T> = wrapNative((<any> Array.prototype).fill);\n\n/**\n * Finds and returns the first instance matching the callback or undefined if one is not found.\n *\n * @param target An array-like object\n * @param callback A function returning if the current value matches a criteria\n * @param [thisArg] The execution context for the find function\n * @return The first element matching the callback, or undefined if one does not exist\n */\nexport const find: <T>(target: ArrayLike<T>, callback: FindCallback<T>, thisArg?: {}) => T = wrapNative((<any> Array.prototype).find);\n\n/**\n * Performs a linear search and returns the first index whose value satisfies the passed callback,\n * or -1 if no values satisfy it.\n *\n * @param target An array-like object\n * @param callback A function returning true if the current value satisfies its criteria\n * @param [thisArg] The execution context for the find function\n * @return The first index whose value satisfies the passed callback, or -1 if no values satisfy it\n */\nexport const findIndex: <T>(target: ArrayLike<T>, callback: FindCallback<T>, thisArg?: {}) => number = wrapNative((<any> Array.prototype).findIndex);\n\n/* ES7 Array instance methods */\n\n/**\n * Determines whether an array includes a given value\n *\n * @param target the target array-like object\n * @param searchElement the item to search for\n * @param fromIndex the starting index to search from\n */\nexport const includes: <T>(target: ArrayLike<T>, searchElement: T, fromIndex?: number) => boolean = wrapNative((<any> Array.prototype).includes);\n"]}