{"version":3,"file":"math.js","sourceRoot":"","sources":["math.ts"],"names":[],"mappings":"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","sourcesContent":["import has from './support/has';\n\nconst FRACTION_UNITS = Math.pow(2, 23);\nconst MAX_FLOAT32 = 3.4028234663852886e+38;\nconst MIN_FLOAT32 = 1.401298464324817e-45;\n\nexport namespace Shim {\n\texport function acosh(n: number): number {\n\t\treturn Math.log(n + Math.sqrt(n * n - 1));\n\t}\n\n\texport function asinh(n: number): number {\n\t\tif (n === -Infinity) {\n\t\t\treturn n;\n\t\t}\n\t\telse {\n\t\t\treturn Math.log(n + Math.sqrt(n * n + 1));\n\t\t}\n\t}\n\n\texport function atanh(n: number): number {\n\t\treturn Math.log((1 + n) / (1 - n)) / 2;\n\t}\n\n\texport function cbrt(n: number): number {\n\t\tconst y = Math.pow(Math.abs(n), 1 / 3);\n\t\treturn n < 0 ? -y : y;\n\t}\n\n\texport function clz32(n: number): number {\n\t\tn = Number(n) >>> 0;\n\t\treturn n ? 32 - n.toString(2).length : 32;\n\t}\n\n\texport function cosh(n: number): number {\n\t\tconst m = Math.exp(n);\n\t\treturn (m + 1 / m) / 2;\n\t}\n\n\texport function expm1(n: number): number {\n\t\treturn Math.exp(n) - 1;\n\t}\n\n\texport const fround: (n: number) => number = has('float32array') ? function (n: number): number {\n\t\treturn new Float32Array([n])[0];\n\t} :\n\tfunction (n: number): number {\n\t\t// Further fallback for IE9, which doesn't support Float32Array.\n\t\t// This gives a fair approximation in most cases.\n\n\t\tif (n === 0 || !isFinite(n)) {\n\t\t\treturn n;\n\t\t}\n\t\tif (Math.abs(n) > MAX_FLOAT32) {\n\t\t\treturn n > 0 ? Infinity : -Infinity;\n\t\t}\n\t\tif (Math.abs(n) < MIN_FLOAT32) {\n\t\t\treturn 0;\n\t\t}\n\t\tconst exponent = Math.floor(log2(Math.abs(n)));\n\t\treturn (Math.round((n / Math.pow(2, exponent) - 1) * FRACTION_UNITS) / FRACTION_UNITS + 1) * Math.pow(2, exponent);\n\t};\n\n\texport function hypot(...args: number[]): number {\n\t\t// See: http://mzl.la/1HDi6xP\n\t\tlet n = 0;\n\n\t\tfor (let arg of args) {\n\t\t\tif (arg === Infinity || arg === -Infinity) {\n\t\t\t\treturn Infinity;\n\t\t\t}\n\t\t\tn += arg * arg;\n\t\t}\n\t\treturn Math.sqrt(n);\n\t}\n\n\texport function imul(n: number, m: number): number {\n\t\t// See: http://mzl.la/1K279FK\n\t\tconst ah = (n >>> 16) & 0xffff;\n\t\tconst al = n & 0xffff;\n\t\tconst bh = (m >>> 16) & 0xffff;\n\t\tconst bl = m & 0xffff;\n\t\treturn ((al * bl) + (((ah * bl + al * bh) << 16) >>> 0) | 0);\n\t}\n\n\texport function log2(n: number): number {\n\t\treturn Math.log(n) / Math.LN2;\n\t}\n\n\texport function log10(n: number): number {\n\t\treturn Math.log(n) / Math.LN10;\n\t}\n\n\texport function log1p(n: number): number {\n\t\treturn Math.log(1 + n);\n\t}\n\n\texport function sign(n: number): number {\n\t\tn = Number(n);\n\t\tif (n === 0 || n !== n) {\n\t\t\treturn n;\n\t\t}\n\t\treturn n > 0 ? 1 : -1;\n\t}\n\n\texport function sinh(n: number): number {\n\t\tconst m = Math.exp(n);\n\t\treturn (m - 1 / m) / 2;\n\t}\n\n\texport function tanh(n: number): number {\n\t\tif (n === Infinity) {\n\t\t\treturn 1;\n\t\t}\n\t\telse if (n === -Infinity) {\n\t\t\treturn -1;\n\t\t}\n\t\telse {\n\t\t\tconst y = Math.exp(2 * n);\n\t\t\treturn (y - 1) / (y + 1);\n\t\t}\n\t}\n\n\texport function trunc(n: number): number {\n\t\treturn n < 0 ? Math.ceil(n) : Math.floor(n);\n\t}\n}\n\n/**\n * Returns the hyperbolic arccosine of a number.\n *\n * @param n The number to use in calculation\n * @return The result\n */\nexport const acosh: (n: number) => number = has('es6-math-acosh')\n\t? (<any> Math).acosh\n\t: Shim.acosh;\n\n/**\n * Returns the hyperbolic arcsine of a number.\n *\n * @param n The number to use in calculation\n * @return The result\n */\nexport const asinh: (n: number) => number = 'asinh' in Math\n\t? (<any> Math).asinh\n\t: Shim.asinh;\n\n/**\n * Returns the hyperbolic arctangent of a number.\n *\n * @param n The number to use in calculation\n * @return The result\n */\nexport const atanh: (n: number) => number = 'atanh' in Math\n\t? (<any> Math).atanh\n\t: Shim.atanh;\n\n/**\n * Returns the cube root of a number.\n *\n * @param n The number to use in calculation\n * @return The result\n */\nexport const cbrt: (n: number) => number = 'cbrt' in Math\n\t? (<any> Math).cbrt\n\t: Shim.cbrt;\n\n/**\n * Returns the number of leading zero bits in the 32-bit\n * binary representation of a number.\n *\n * @param n The number to use in calculation\n * @return The result\n */\nexport const clz32: (n: number) => number = 'clz32' in Math\n\t? (<any> Math).clz32\n\t: Shim.clz32;\n\n/**\n * Returns the hyperbolic cosine of a number.\n *\n * @param n The number to use in calculation\n * @return The result\n */\nexport const cosh: (n: number) => number = 'cosh' in Math\n\t? (<any> Math).cosh\n\t: Shim.cosh;\n\n/**\n * Returns e raised to the specified power minus one.\n *\n * @param n The number to use in calculation\n * @return The result\n */\nexport const expm1: (n: number) => number = 'expm1' in Math\n\t? (<any> Math).expm1\n\t: Shim.expm1;\n\n/**\n * Returns the nearest single-precision float representation of a number.\n *\n * @param n The number to use in calculation\n * @return The result\n */\nexport const fround: (n: number) => number = 'fround' in Math\n\t? (<any> Math).fround\n\t: Shim.fround;\n\n/**\n * Returns the square root of the sum of squares of its arguments.\n *\n * @return The result\n */\nexport const hypot: (...args: number[]) => number = 'hypot' in Math\n\t? (<any> Math).hypot\n\t: Shim.hypot;\n\n/**\n * Returns the result of the 32-bit multiplication of the two parameters.\n *\n * @param n The number to use in calculation\n * @param m The number to use in calculation\n * @return The result\n */\nexport const imul: (n: number, m: number) => number = has('es6-math-imul')\n\t? (<any> Math).imul\n\t: Shim.imul;\n\n/**\n * Returns the base 2 logarithm of a number.\n *\n * @param n The number to use in calculation\n * @return The result\n */\nexport const log2: (n: number) => number = 'log2' in Math\n\t? (<any> Math).log2\n\t: Shim.log2;\n\n/**\n * Returns the base 10 logarithm of a number.\n *\n * @param n The number to use in calculation\n * @return The result\n */\nexport const log10: (n: number) => number = 'log10' in Math\n\t? (<any> Math).log10\n\t: Shim.log10;\n\n/**\n * Returns the natural logarithm of 1 + a number.\n *\n * @param n The number to use in calculation\n * @return The result\n */\nexport const log1p: (n: number) => number = 'log1p' in Math\n\t? (<any> Math).log1p\n\t: Shim.log1p;\n\n/**\n * Returns the sign of a number, indicating whether the number is positive.\n *\n * @param n The number to use in calculation\n * @return 1 if the number is positive, -1 if the number is negative, or 0 if the number is 0\n */\nexport const sign: (n: number) => number = 'sign' in Math\n\t? (<any> Math).sign\n\t: Shim.sign;\n\n/**\n * Returns the hyperbolic sine of a number.\n *\n * @param n The number to use in calculation\n * @return The result\n */\nexport const sinh: (n: number) => number = 'sinh' in Math\n\t? (<any> Math).sinh\n\t: Shim.sinh;\n\n/**\n * Returns the hyperbolic tangent of a number.\n *\n * @param n The number to use in calculation\n * @return The result\n */\nexport const tanh: (n: number) => number = 'tanh' in Math\n\t? (<any> Math).tanh\n\t: Shim.tanh;\n\n/**\n * Returns the integral part of a number by removing any fractional digits.\n *\n * @param n The number to use in calculation\n * @return The result\n */\nexport const trunc: (n: number) => number = 'trunc' in Math\n\t? (<any> Math).trunc\n\t: Shim.trunc;\n"]}