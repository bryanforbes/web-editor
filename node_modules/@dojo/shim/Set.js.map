{"version":3,"file":"Set.js","sourceRoot":"","sources":["Set.ts"],"names":[],"mappings":"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","sourcesContent":["import { ArrayLike } from './interfaces';\nimport { hasClass } from './support/decorators';\nimport global from './support/global';\nimport { forOf, IterableIterator, Iterable, ShimIterator } from './iterator';\nimport './Symbol';\n\nexport namespace Shim {\n\texport class Set<T> {\n\t\tprivate readonly _setData: T[] = [];\n\n\t\tconstructor(iterable?: ArrayLike<T> | Iterable<T>) {\n\t\t\tif (iterable) {\n\t\t\t\tforOf(iterable, (value) => this.add(value));\n\t\t\t}\n\t\t};\n\n\t\tadd(value: T): this {\n\t\t\tif (this.has(value)) {\n\t\t\t\treturn this;\n\t\t\t}\n\t\t\tthis._setData.push(value);\n\t\t\treturn this;\n\t\t};\n\n\t\tclear(): void {\n\t\t\tthis._setData.length = 0;\n\t\t};\n\n\t\tdelete(value: T): boolean {\n\t\t\tconst idx = this._setData.indexOf(value);\n\t\t\tif (idx === -1) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tthis._setData.splice(idx, 1);\n\t\t\treturn true;\n\t\t};\n\n\t\tentries(): IterableIterator<[T, T]> {\n\t\t\treturn new ShimIterator<[any, any]>(this._setData.map<[any, any]>((value) => [ value, value ]));\n\t\t};\n\n\t\tforEach(callbackfn: (value: T, index: T, set: Set<T>) => void, thisArg?: any): void {\n\t\t\tconst iterator = this.values();\n\t\t\tlet result = iterator.next();\n\t\t\twhile (!result.done) {\n\t\t\t\tcallbackfn.call(thisArg, result.value, result.value, this);\n\t\t\t\tresult = iterator.next();\n\t\t\t}\n\t\t};\n\n\t\thas(value: T): boolean {\n\t\t\treturn this._setData.indexOf(value) > -1;\n\t\t};\n\n\t\tkeys(): IterableIterator<T> {\n\t\t\treturn new ShimIterator(this._setData);\n\t\t};\n\n\t\tget size(): number {\n\t\t\treturn this._setData.length;\n\t\t};\n\n\t\tvalues(): IterableIterator<T> {\n\t\t\treturn new ShimIterator(this._setData);\n\t\t};\n\n\t\t[Symbol.iterator](): IterableIterator<T> {\n\t\t\treturn new ShimIterator(this._setData);\n\t\t};\n\n\t\t[Symbol.toStringTag] = 'Set';\n\t}\n}\n\n@hasClass('es6-set', global.Set, Shim.Set)\nexport default class Set<T> {\n\t/* istanbul ignore next */\n\tconstructor(iterable?: ArrayLike<T> | Iterable<T>) { };\n\n\t/* istanbul ignore next */\n\tadd(value: T): this { throw new Error('Abstract method'); };\n\t/* istanbul ignore next */\n\tclear(): void { throw new Error('Abstract method'); };\n\t/* istanbul ignore next */\n\tdelete(value: T): boolean { throw new Error('Abstract method'); };\n\t/* istanbul ignore next */\n\tentries(): IterableIterator<[T, T]> { throw new Error('Abstract method'); };\n\t/* istanbul ignore next */\n\tforEach(callbackfn: (value: T, index: T, set: Set<T>) => void, thisArg?: any): void { throw new Error('Abstract method'); };\n\t/* istanbul ignore next */\n\thas(value: T): boolean { throw new Error('Abstract method'); };\n\t/* istanbul ignore next */\n\tkeys(): IterableIterator<T> { throw new Error('Abstract method'); };\n\t/* istanbul ignore next */\n\tget size(): number { throw new Error('Abstract method'); };\n\t/* istanbul ignore next */\n\tvalues(): IterableIterator<T> { throw new Error('Abstract method'); };\n\t/* istanbul ignore next */\n\t[Symbol.iterator](): IterableIterator<T> { throw new Error('Abstract method'); };\n\t/* istanbul ignore next */\n\t[Symbol.toStringTag] = 'Set';\n}\n"]}