{"version":3,"file":"array.js","sourceRoot":"","sources":["array.ts"],"names":[],"mappings":"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","sourcesContent":["import { ArrayLike } from './interfaces';\nimport has from './support/has';\nimport { wrapNative } from './support/util';\nimport { forOf, isArrayLike, isIterable, Iterable } from './iterator';\nimport { MAX_SAFE_INTEGER as maxSafeInteger } from './number';\n\nexport interface MapCallback<T, U> {\n\t/**\n\t * A callback function when mapping\n\t *\n\t * @param element The element that is currently being mapped\n\t * @param index The current index of the element\n\t */\n\t(element: T, index: number): U;\n}\n\nexport interface FindCallback<T> {\n\t/**\n\t * A callback function when using find\n\t *\n\t * @param element The element that is currenty being analysed\n\t * @param index The current index of the element that is being analysed\n\t * @param array The source array\n\t */\n\t(element: T, index: number, array: ArrayLike<T>): boolean;\n}\n\n/**\n * Ensures a non-negative, non-infinite, safe integer.\n *\n * @param length The number to validate\n * @return A proper length\n */\nfunction toLength(length: number): number {\n\tlength = Number(length);\n\tif (isNaN(length)) {\n\t\treturn 0;\n\t}\n\tif (isFinite(length)) {\n\t\tlength = Math.floor(length);\n\t}\n\t// Ensure a non-negative, real, safe integer\n\treturn Math.min(Math.max(length, 0), maxSafeInteger);\n}\n\n/**\n * From ES6 7.1.4 ToInteger()\n *\n * @param value A value to convert\n * @return An integer\n */\nfunction toInteger(value: any): number {\n\tvalue = Number(value);\n\tif (isNaN(value)) {\n\t\treturn 0;\n\t}\n\tif (value === 0 || !isFinite(value)) {\n\t\treturn value;\n\t}\n\n\treturn (value > 0 ? 1 : -1) * Math.floor(Math.abs(value));\n}\n\n/**\n * Normalizes an offset against a given length, wrapping it if negative.\n *\n * @param value The original offset\n * @param length The total length to normalize against\n * @return If negative, provide a distance from the end (length); otherwise provide a distance from 0\n */\nfunction normalizeOffset(value: number, length: number): number {\n\treturn value < 0 ? Math.max(length + value, 0) : Math.min(value, length);\n}\n\n/**\n * A namespace that contains the polyfilled functionality that is then exported below, depending on if\n * the functionality is required or not.\n */\nexport namespace Shim {\n\texport function from(this: ArrayConstructor, arrayLike: Iterable<any> | ArrayLike<any>, mapFunction?: MapCallback<any, any>, thisArg?: any): Array<any> {\n\t\tif (arrayLike == null) {\n\t\t\tthrow new TypeError('from: requires an array-like object');\n\t\t}\n\n\t\tif (mapFunction && thisArg) {\n\t\t\tmapFunction = mapFunction.bind(thisArg);\n\t\t}\n\n\t\t/* tslint:disable-next-line:variable-name */\n\t\tconst Constructor = this;\n\t\tconst length: number = toLength((<any> arrayLike).length);\n\t\t// Support extension\n\t\tconst array: any[] = (typeof Constructor === 'function') ? <any[]> Object(new Constructor(length)) : new Array(length);\n\n\t\tif (!isArrayLike(arrayLike) && !isIterable(arrayLike)) {\n\t\t\treturn array;\n\t\t}\n\n\t\tlet i = 0;\n\t\tforOf(arrayLike, function (value): void {\n\t\t\tarray[i] = mapFunction ? mapFunction(value, i) : value;\n\t\t\ti++;\n\t\t});\n\n\t\tif ((<any> arrayLike).length !== undefined) {\n\t\t\tarray.length = length;\n\t\t}\n\n\t\treturn array;\n\t}\n\n\texport function of<T>(...items: T[]): Array<T> {\n\t\treturn Array.prototype.slice.call(items);\n\t}\n\n\texport function copyWithin<T>(target: ArrayLike<T>, offset: number, start: number, end?: number): ArrayLike<T> {\n\t\tif (target == null) {\n\t\t\tthrow new TypeError('copyWithin: target must be an array-like object');\n\t\t}\n\n\t\tconst length = toLength(target.length);\n\t\toffset = normalizeOffset(toInteger(offset), length);\n\t\tstart = normalizeOffset(toInteger(start), length);\n\t\tend = normalizeOffset(end === undefined ? length : toInteger(end), length);\n\t\tlet count = Math.min(end - start, length - offset);\n\n\t\tlet direction = 1;\n\t\tif (offset > start && offset < (start + count)) {\n\t\t\tdirection = -1;\n\t\t\tstart += count - 1;\n\t\t\toffset += count - 1;\n\t\t}\n\n\t\twhile (count > 0) {\n\t\t\tif (start in target) {\n\t\t\t\ttarget[offset] = target[start];\n\t\t\t}\n\t\t\telse {\n\t\t\t\tdelete target[offset];\n\t\t\t}\n\n\t\t\toffset += direction;\n\t\t\tstart += direction;\n\t\t\tcount--;\n\t\t}\n\n\t\treturn target;\n\t}\n\n\texport function fill<T>(target: ArrayLike<T>, value: any, start?: number, end?: number): ArrayLike<T> {\n\t\tconst length = toLength(target.length);\n\t\tlet i = normalizeOffset(toInteger(start), length);\n\t\tend = normalizeOffset(end === undefined ? length : toInteger(end), length);\n\n\t\twhile (i < end) {\n\t\t\ttarget[i++] = value;\n\t\t}\n\n\t\treturn target;\n\t}\n\n\texport function find<T>(target: ArrayLike<T>, callback: FindCallback<T>, thisArg?: {}): T | undefined {\n\t\tconst index = findIndex<T>(target, callback, thisArg);\n\t\treturn index !== -1 ? target[index] : undefined;\n\t}\n\n\texport function findIndex<T>(target: ArrayLike<T>, callback: FindCallback<T>, thisArg?: {}): number {\n\t\tconst length = toLength(target.length);\n\n\t\tif (!callback) {\n\t\t\tthrow new TypeError('find: second argument must be a function');\n\t\t}\n\n\t\tif (thisArg) {\n\t\t\tcallback = callback.bind(thisArg);\n\t\t}\n\n\t\tfor (let i = 0; i < length; i++) {\n\t\t\tif (callback(target[i], i, target)) {\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\n\t\treturn -1;\n\t}\n\n\texport function includes<T>(target: ArrayLike<T>, searchElement: T, fromIndex: number = 0): boolean {\n\t\tlet len = toLength(target.length);\n\n\t\tfor (let i = fromIndex; i < len; ++i) {\n\t\t\tconst currentElement = target[i];\n\t\t\tif (searchElement === currentElement ||\n\t\t\t\t(searchElement !== searchElement && currentElement !== currentElement)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n}\n\n/* ES6 Array static methods */\n\nexport interface From {\n\t/**\n\t * The Array.from() method creates a new Array instance from an array-like or iterable object.\n\t *\n\t * @param source An array-like or iterable object to convert to an array\n\t * @param mapFunction A map function to call on each element in the array\n\t * @param thisArg The execution context for the map function\n\t * @return The new Array\n\t */\n\t<T, U>(source: ArrayLike<T> | Iterable<T>, mapFunction: MapCallback<T, U>, thisArg?: any): Array<U>;\n\n\t/**\n\t * The Array.from() method creates a new Array instance from an array-like or iterable object.\n\t *\n\t * @param source An array-like or iterable object to convert to an array\n\t * @return The new Array\n\t */\n\t<T>(source: ArrayLike<T> | Iterable<T>): Array<T>;\n}\n\nexport const from: From = has('es6-array-from')\n\t? (<any> Array).from\n\t: Shim.from;\n\n/**\n * Creates a new array from the function parameters.\n *\n * @param arguments Any number of arguments for the array\n * @return An array from the given arguments\n */\nexport const of: <T>(...items: T[]) => Array<T> = has('es6-array-of')\n\t? (<any> Array).of\n\t: Shim.of;\n\n/* ES6 Array instance methods */\n\n/**\n * Copies data internally within an array or array-like object.\n *\n * @param target The target array-like object\n * @param offset The index to start copying values to; if negative, it counts backwards from length\n * @param start The first (inclusive) index to copy; if negative, it counts backwards from length\n * @param end The last (exclusive) index to copy; if negative, it counts backwards from length\n * @return The target\n */\nexport const copyWithin: <T>(target: ArrayLike<T>, offset: number, start: number, end?: number) => ArrayLike<T> = has('es6-array-copywithin')\n\t? wrapNative((<any> Array.prototype).copyWithin)\n\t: Shim.copyWithin;\n\n/**\n * Fills elements of an array-like object with the specified value.\n *\n * @param target The target to fill\n * @param value The value to fill each element of the target with\n * @param start The first index to fill\n * @param end The (exclusive) index at which to stop filling\n * @return The filled target\n */\nexport const fill: <T>(target: ArrayLike<T>, value: T, start?: number, end?: number) => ArrayLike<T> = has('es6-array-fill')\n\t? wrapNative((<any> Array.prototype).fill)\n\t: Shim.fill;\n\n/**\n * Finds and returns the first instance matching the callback or undefined if one is not found.\n *\n * @param target An array-like object\n * @param callback A function returning if the current value matches a criteria\n * @param [thisArg] The execution context for the find function\n * @return The first element matching the callback, or undefined if one does not exist\n */\nexport const find: <T>(target: ArrayLike<T>, callback: FindCallback<T>, thisArg?: {}) => T = has('es6-array-find')\n\t? wrapNative((<any> Array.prototype).find)\n\t: Shim.find;\n\n/**\n * Performs a linear search and returns the first index whose value satisfies the passed callback,\n * or -1 if no values satisfy it.\n *\n * @param target An array-like object\n * @param callback A function returning true if the current value satisfies its criteria\n * @param [thisArg] The execution context for the find function\n * @return The first index whose value satisfies the passed callback, or -1 if no values satisfy it\n */\nexport const findIndex: <T>(target: ArrayLike<T>, callback: FindCallback<T>, thisArg?: {}) => number = has('es6-array-findindex')\n\t? wrapNative((<any> Array.prototype).findIndex)\n\t: Shim.findIndex;\n\n/* ES7 Array instance methods */\n\n/**\n * Determines whether an array includes a given value\n *\n * @param target the target array-like object\n * @param searchElement the item to search for\n * @param fromIndex the starting index to search from\n * @return `true` if the array includes the element, otherwise `false`\n */\nexport const includes: <T>(target: ArrayLike<T>, searchElement: T, fromIndex?: number) => boolean = has('es7-array-includes')\n\t? wrapNative((<any> Array.prototype).includes)\n\t: Shim.includes;\n"]}