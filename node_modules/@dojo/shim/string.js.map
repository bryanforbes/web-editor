{"version":3,"file":"string.js","sourceRoot":"","sources":["string.ts"],"names":[],"mappings":"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","sourcesContent":["import has from './support/has';\nimport { wrapNative } from './support/util';\n\n/**\n * The minimum location of high surrogates\n */\nexport const HIGH_SURROGATE_MIN = 0xD800;\n\n/**\n * The maximum location of high surrogates\n */\nexport const HIGH_SURROGATE_MAX = 0xDBFF;\n\n/**\n * The minimum location of low surrogates\n */\nexport const LOW_SURROGATE_MIN = 0xDC00;\n\n/**\n * The maximum location of low surrogates\n */\nexport const LOW_SURROGATE_MAX = 0xDFFF;\n\nexport namespace Shim {\n\t/**\n\t * Validates that text is defined, and normalizes position (based on the given default if the input is NaN).\n\t * Used by startsWith, includes, and endsWith.\n\t *\n\t * @return Normalized position.\n\t */\n\tfunction normalizeSubstringArgs(name: string, text: string, search: string, position: number,\n\t\t\tisEnd: boolean = false): [ string, string, number ] {\n\t\tif (text == null) {\n\t\t\tthrow new TypeError('string.' + name + ' requires a valid string to search against.');\n\t\t}\n\n\t\tconst length = text.length;\n\t\tposition = position !== position ? (isEnd ? length : 0) : position;\n\t\treturn [ text, String(search), Math.min(Math.max(position, 0), length) ];\n\t}\n\n\texport function raw(callSite: TemplateStringsArray, ...substitutions: any[]): string {\n\t\tlet rawStrings = callSite.raw;\n\t\tlet result = '';\n\t\tlet numSubstitutions = substitutions.length;\n\n\t\tif (callSite == null || callSite.raw == null) {\n\t\t\tthrow new TypeError('string.raw requires a valid callSite object with a raw value');\n\t\t}\n\n\t\tfor (let i = 0, length = rawStrings.length; i < length; i++) {\n\t\t\tresult += rawStrings[i] + (i < numSubstitutions && i < length - 1 ? substitutions[i] : '');\n\t\t}\n\n\t\treturn result;\n\t}\n\n\texport function fromCodePoint(...codePoints: number[]): string {\n\t\t// Adapted from https://github.com/mathiasbynens/String.fromCodePoint\n\t\tconst length = arguments.length;\n\t\tif (!length) {\n\t\t\treturn '';\n\t\t}\n\n\t\tconst fromCharCode = String.fromCharCode;\n\t\tconst MAX_SIZE = 0x4000;\n\t\tlet codeUnits: number[] = [];\n\t\tlet index = -1;\n\t\tlet result = '';\n\n\t\twhile (++index < length) {\n\t\t\tlet codePoint = Number(arguments[index]);\n\n\t\t\t// Code points must be finite integers within the valid range\n\t\t\tlet isValid = isFinite(codePoint) && Math.floor(codePoint) === codePoint &&\n\t\t\t\tcodePoint >= 0 && codePoint <= 0x10FFFF;\n\t\t\tif (!isValid) {\n\t\t\t\tthrow RangeError('string.fromCodePoint: Invalid code point ' + codePoint);\n\t\t\t}\n\n\t\t\tif (codePoint <= 0xFFFF) {\n\t\t\t\t// BMP code point\n\t\t\t\tcodeUnits.push(codePoint);\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// Astral code point; split in surrogate halves\n\t\t\t\t// https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\n\t\t\t\tcodePoint -= 0x10000;\n\t\t\t\tlet highSurrogate = (codePoint >> 10) + HIGH_SURROGATE_MIN;\n\t\t\t\tlet lowSurrogate = (codePoint % 0x400) + LOW_SURROGATE_MIN;\n\t\t\t\tcodeUnits.push(highSurrogate, lowSurrogate);\n\t\t\t}\n\n\t\t\tif (index + 1 === length || codeUnits.length > MAX_SIZE) {\n\t\t\t\tresult += fromCharCode.apply(null, codeUnits);\n\t\t\t\tcodeUnits.length = 0;\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\texport function codePointAt(text: string, position: number = 0): number | undefined {\n\t\t// Adapted from https://github.com/mathiasbynens/String.prototype.codePointAt\n\t\tif (text == null) {\n\t\t\tthrow new TypeError('string.codePointAt requries a valid string.');\n\t\t}\n\t\tconst length = text.length;\n\n\t\tif (position !== position) {\n\t\t\tposition = 0;\n\t\t}\n\t\tif (position < 0 || position >= length) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\t// Get the first code unit\n\t\tconst first = text.charCodeAt(position);\n\t\tif (first >= HIGH_SURROGATE_MIN && first <= HIGH_SURROGATE_MAX && length > position + 1) {\n\t\t\t// Start of a surrogate pair (high surrogate and there is a next code unit); check for low surrogate\n\t\t\t// https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\n\t\t\tconst second = text.charCodeAt(position + 1);\n\t\t\tif (second >= LOW_SURROGATE_MIN && second <= LOW_SURROGATE_MAX) {\n\t\t\t\treturn (first - HIGH_SURROGATE_MIN) * 0x400 + second - LOW_SURROGATE_MIN + 0x10000;\n\t\t\t}\n\t\t}\n\t\treturn first;\n\t}\n\n\t/* TODO: Missing normalize */\n\n\texport function repeat(text: string, count: number = 0): string {\n\t\t// Adapted from https://github.com/mathiasbynens/String.prototype.repeat\n\t\tif (text == null) {\n\t\t\tthrow new TypeError('string.repeat requires a valid string.');\n\t\t}\n\t\tif (count !== count) {\n\t\t\tcount = 0;\n\t\t}\n\t\tif (count < 0 || count === Infinity) {\n\t\t\tthrow new RangeError('string.repeat requires a non-negative finite count.');\n\t\t}\n\n\t\tlet result = '';\n\t\twhile (count) {\n\t\t\tif (count % 2) {\n\t\t\t\tresult += text;\n\t\t\t}\n\t\t\tif (count > 1) {\n\t\t\t\ttext += text;\n\t\t\t}\n\t\t\tcount >>= 1;\n\t\t}\n\t\treturn result;\n\t}\n\n\texport function startsWith(text: string, search: string, position: number = 0): boolean {\n\t\tsearch = String(search);\n\t\t[ text, search, position ] = normalizeSubstringArgs('startsWith', text, search, position);\n\n\t\tconst end = position + search.length;\n\t\tif (end > text.length) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn text.slice(position, end) === search;\n\t}\n\n\texport function endsWith(text: string, search: string, endPosition?: number): boolean {\n\t\tif (endPosition == null) {\n\t\t\tendPosition = text.length;\n\t\t}\n\n\t\t[ text, search, endPosition ] = normalizeSubstringArgs('endsWith', text, search, endPosition, true);\n\n\t\tconst start = endPosition - search.length;\n\t\tif (start < 0) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn text.slice(start, endPosition) === search;\n\t}\n\n\texport function includes(text: string, search: string, position: number = 0): boolean {\n\t\t[ text, search, position ] = normalizeSubstringArgs('includes', text, search, position);\n\t\treturn text.indexOf(search, position) !== -1;\n\t}\n\n\texport function padEnd(text: string, maxLength: number, fillString: string = ' '): string {\n\t\tif (text === null || text === undefined) {\n\t\t\tthrow new TypeError('string.repeat requires a valid string.');\n\t\t}\n\n\t\tif (maxLength === Infinity) {\n\t\t\tthrow new RangeError('string.padEnd requires a non-negative finite count.');\n\t\t}\n\n\t\tif (maxLength === null || maxLength === undefined || maxLength < 0) {\n\t\t\tmaxLength = 0;\n\t\t}\n\n\t\tlet strText = String(text);\n\t\tconst padding = maxLength - strText.length;\n\n\t\tif (padding > 0) {\n\t\t\tstrText += repeat(fillString, Math.floor(padding / fillString.length)) + fillString.slice(0, padding % fillString.length);\n\t\t}\n\n\t\treturn strText;\n\t}\n\n\texport function padStart(text: string, maxLength: number, fillString: string = ' '): string {\n\t\tif (text === null || text === undefined) {\n\t\t\tthrow new TypeError('string.repeat requires a valid string.');\n\t\t}\n\n\t\tif (maxLength === Infinity) {\n\t\t\tthrow new RangeError('string.padStart requires a non-negative finite count.');\n\t\t}\n\n\t\tif (maxLength === null || maxLength === undefined || maxLength < 0) {\n\t\t\tmaxLength = 0;\n\t\t}\n\n\t\tlet strText = String(text);\n\t\tconst padding = maxLength - strText.length;\n\n\t\tif (padding > 0) {\n\t\t\tstrText = repeat(fillString, Math.floor(padding / fillString.length)) + fillString.slice(0, padding % fillString.length) + strText;\n\t\t}\n\n\t\treturn strText;\n\t}\n\n\t/* TODO: Provide an iterator for a string to mimic [Symbol.iterator]? */\n}\n\n/**\n * A tag function for template strings to get the template string's raw string form.\n *\n * @param callSite Call site object (or a template string in TypeScript, which will transpile to one)\n * @param substitutions Values to substitute within the template string (TypeScript will generate these automatically)\n * @return String containing the raw template string with variables substituted\n *\n * @example\n * // Within TypeScript; logs 'The answer is:\\\\n42'\n * let answer = 42;\n * console.log(string.raw`The answer is:\\n${answer}`);\n *\n * @example\n * // The same example as above, but directly specifying a JavaScript object and substitution\n * console.log(string.raw({ raw: [ 'The answer is:\\\\n', '' ] }, 42));\n */\nexport const raw: (callSite: TemplateStringsArray, ...substitutions: any[]) => string = has('es6-string-raw')\n\t? (<any> String).raw\n\t: Shim.raw;\n\n/**\n * Returns the UTF-16 encoded code point value of a given position in a string.\n *\n * @param text The string containing the element whose code point is to be determined\n * @param position Position of an element within the string to retrieve the code point value from\n * @return A non-negative integer representing the UTF-16 encoded code point value\n */\nexport const fromCodePoint: (...codePoints: number[]) => string = has('es6-string-fromcodepoint')\n\t? (<any> String).fromCodePoint\n\t: Shim.fromCodePoint;\n\n/**\n * Returns the UTF-16 encoded code point value of a given position in a string.\n *\n * @param text The string containing the element whose code point is to be determined\n * @param position Position of an element within the string to retrieve the code point value from\n * @return A non-negative integer representing the UTF-16 encoded code point value\n */\nexport const codePointAt: (text: string, position?: number) => number = has('es6-string-codepointat')\n\t? wrapNative((<any> String.prototype).codePointAt)\n\t: Shim.codePointAt;\n\n/**\n * Returns a string containing the given string repeated the specified number of times.\n *\n * @param text The string to repeat\n * @param count The number of times to repeat the string\n * @return A string containing the input string repeated count times\n */\nexport const repeat: (text: string, count?: number) => string = has('es6-string-repeat')\n\t? wrapNative((<any> String.prototype).repeat)\n\t: Shim.repeat;\n\n/**\n * Determines whether a string begins with the given substring (optionally starting from a given index).\n *\n * @param text The string to look for the search string within\n * @param search The string to search for\n * @param position The index to begin searching at\n * @return Boolean indicating if the search string was found at the beginning of the given string\n */\nexport const startsWith: (text: string, search: string, position?: number) => boolean = has('es6-string-startswith')\n\t? wrapNative((<any> String.prototype).startsWith)\n\t: Shim.startsWith;\n\n/**\n * Determines whether a string ends with the given substring.\n *\n * @param text The string to look for the search string within\n * @param search The string to search for\n * @param endPosition The index searching should stop before (defaults to text.length)\n * @return Boolean indicating if the search string was found at the end of the given string\n */\nexport const endsWith: (text: string, search: string, endPosition?: number) => boolean = has('es6-string-endswith')\n\t? wrapNative((<any> String.prototype).endsWith)\n\t: Shim.endsWith;\n\n/**\n * Determines whether a string includes the given substring (optionally starting from a given index).\n *\n * @param text The string to look for the search string within\n * @param search The string to search for\n * @param position The index to begin searching at\n * @return Boolean indicating if the search string was found within the given string\n */\nexport const includes: (text: string, search: string, position?: number) => boolean = has('es6-string-includes')\n\t? wrapNative((<any> String.prototype).includes)\n\t: Shim.includes;\n\n/**\n * Pads the beginning of a string with a fill string until the string is a certain length.\n *\n * @param text          The string to pad\n * @param maxLength     The desired length of the string\n * @param fillString    The string to be repeated (fully or partially) until text is the maximum length\n *\n * @return A string that is at least the maximum length specified, padded in the front if necessary.\n */\nexport const padStart: (text: string, maxLength: number, fillString?: string) => string = has('es6-string-padstart')\n\t? wrapNative((<any> String.prototype).padStart)\n\t: Shim.padStart;\n\n/**\n * Pads the end of a string with a fill string until the string is a certain length.\n *\n * @param text          The string to pad\n * @param maxLength     The desired length of the string\n * @param fillString    The string to be repeated (fully or partially) until text is the maximum length\n *\n * @return A string that is at least the maximum length specified, padded at the end if necessary.\n */\nexport const padEnd: (text: string, maxLength: number, fillString?: string) => string = has('es6-string-padend')\n\t? wrapNative((<any> String.prototype).padEnd)\n\t: Shim.padEnd;\n"]}