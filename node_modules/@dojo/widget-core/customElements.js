(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "@dojo/core/lang", "@dojo/shim/array", "@dojo/core/global", "./d", "./mixins/Projector", "./util/DomWrapper"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var lang_1 = require("@dojo/core/lang");
    var array_1 = require("@dojo/shim/array");
    var global_1 = require("@dojo/core/global");
    var d_1 = require("./d");
    var Projector_1 = require("./mixins/Projector");
    var DomWrapper_1 = require("./util/DomWrapper");
    function getWidgetPropertyFromAttribute(attributeName, attributeValue, descriptor) {
        var _a = descriptor.propertyName, propertyName = _a === void 0 ? attributeName : _a, _b = descriptor.value, value = _b === void 0 ? attributeValue : _b;
        if (typeof value === 'function') {
            value = value(attributeValue);
        }
        return [propertyName, value];
    }
    var customEventClass = global_1.default.CustomEvent;
    if (typeof customEventClass !== 'function') {
        var customEvent = function (event, params) {
            params = params || { bubbles: false, cancelable: false, detail: undefined };
            var evt = document.createEvent('CustomEvent');
            evt.initCustomEvent(event, params.bubbles, params.cancelable, params.detail);
            return evt;
        };
        if (global_1.default.Event) {
            customEvent.prototype = global_1.default.Event.prototype;
        }
        customEventClass = customEvent;
    }
    /**
     * Called by HTMLElement subclass to initialize itself with the appropriate attributes/properties/events.
     *
     * @param {CustomElement} element
     */
    function initializeElement(element) {
        var initialProperties = {};
        var _a = element.getDescriptor(), _b = _a.attributes, attributes = _b === void 0 ? [] : _b, _c = _a.events, events = _c === void 0 ? [] : _c, _d = _a.properties, properties = _d === void 0 ? [] : _d, initialization = _a.initialization;
        attributes.forEach(function (attribute) {
            var attributeName = attribute.attributeName;
            var _a = getWidgetPropertyFromAttribute(attributeName, element.getAttribute(attributeName), attribute), propertyName = _a[0], propertyValue = _a[1];
            initialProperties[propertyName] = propertyValue;
        });
        var customProperties = {};
        attributes.reduce(function (properties, attribute) {
            var _a = attribute.propertyName, propertyName = _a === void 0 ? attribute.attributeName : _a;
            properties[propertyName] = {
                get: function () {
                    return element.getWidgetInstance().properties[propertyName];
                },
                set: function (value) {
                    var _a = getWidgetPropertyFromAttribute(attribute.attributeName, value, attribute), propertyName = _a[0], propertyValue = _a[1];
                    element.getWidgetInstance().__setProperties__(lang_1.assign({}, element.getWidgetInstance().properties, (_b = {},
                        _b[propertyName] = propertyValue,
                        _b)));
                    var _b;
                }
            };
            return properties;
        }, customProperties);
        properties.reduce(function (properties, property) {
            var propertyName = property.propertyName, getValue = property.getValue, setValue = property.setValue;
            var _a = property.widgetPropertyName, widgetPropertyName = _a === void 0 ? propertyName : _a;
            properties[propertyName] = {
                get: function () {
                    var value = element.getWidgetInstance().properties[widgetPropertyName];
                    return getValue ? getValue(value) : value;
                },
                set: function (value) {
                    element.getWidgetInstance().__setProperties__(lang_1.assign({}, element.getWidgetInstance().properties, (_a = {}, _a[widgetPropertyName] = setValue ? setValue(value) : value, _a)));
                    var _a;
                }
            };
            return properties;
        }, customProperties);
        Object.defineProperties(element, customProperties);
        // define events
        events.forEach(function (event) {
            var propertyName = event.propertyName, eventName = event.eventName;
            initialProperties[propertyName] = function (event) {
                element.dispatchEvent(new customEventClass(eventName, {
                    bubbles: false,
                    detail: event
                }));
            };
        });
        // find children
        var children = [];
        array_1.from(element.children).forEach(function (childNode, index) {
            children.push(d_1.w(DomWrapper_1.DomWrapper, {
                key: "child-" + index,
                domNode: childNode
            }));
        });
        if (initialization) {
            initialization.call(element, initialProperties);
        }
        array_1.from(element.children).forEach(function (childNode) {
            element.removeChild(childNode);
        });
        var projector = Projector_1.ProjectorMixin(element.getWidgetConstructor());
        var widgetInstance = new projector();
        widgetInstance.__setProperties__(initialProperties);
        widgetInstance.__setChildren__(children);
        element.setWidgetInstance(widgetInstance);
        widgetInstance.append(element);
    }
    exports.initializeElement = initializeElement;
    /**
     * Called by HTMLElement subclass when an HTML attribute has changed.
     *
     * @param {CustomElement}   element     The element whose attributes are being watched
     * @param {string}          name        The name of the attribute
     * @param {string?}         newValue    The new value of the attribute
     * @param {string?}         oldValue    The old value of the attribute
     */
    function handleAttributeChanged(element, name, newValue, oldValue) {
        var attributes = element.getDescriptor().attributes || [];
        attributes.forEach(function (attribute) {
            if (attribute.attributeName === name) {
                var _a = getWidgetPropertyFromAttribute(name, newValue, attribute), propertyName = _a[0], propertyValue = _a[1];
                element.getWidgetInstance().__setProperties__(lang_1.assign({}, element.getWidgetInstance().properties, (_b = {}, _b[propertyName] = propertyValue, _b)));
            }
            var _b;
        });
    }
    exports.handleAttributeChanged = handleAttributeChanged;
});
//# sourceMappingURL=customElements.js.map