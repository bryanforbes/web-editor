{"version":3,"file":"diff.js","sourceRoot":"","sources":["diff.ts"],"names":[],"mappings":"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","sourcesContent":["import { PropertyChangeRecord } from './interfaces';\n\nexport const enum DiffType {\n\tCUSTOM = 1,\n\tALWAYS,\n\tIGNORE,\n\tREFERENCE,\n\tSHALLOW,\n\tAUTO\n}\n\nfunction isObjectOrArray(value: any): boolean {\n\treturn Object.prototype.toString.call(value) === '[object Object]' || Array.isArray(value);\n}\n\nfunction always(previousProperty: any, newProperty: any): PropertyChangeRecord {\n\treturn {\n\t\tchanged: true,\n\t\tvalue: newProperty\n\t};\n}\n\nfunction ignore(previousProperty: any, newProperty: any): PropertyChangeRecord {\n\treturn {\n\t\tchanged: false,\n\t\tvalue: newProperty\n\t};\n}\n\nfunction custom(previousProperty: any, newProperty: any, meta: any): PropertyChangeRecord {\n\tconst { diffFunction, scope } = meta;\n\tif (!diffFunction) {\n\t\treturn {\n\t\t\tchanged: false,\n\t\t\tvalue: newProperty\n\t\t};\n\t}\n\treturn diffFunction.call(scope, previousProperty, newProperty);\n}\n\nfunction reference(previousProperty: any, newProperty: any): PropertyChangeRecord {\n\treturn {\n\t\tchanged: previousProperty !== newProperty,\n\t\tvalue: newProperty\n\t};\n}\n\nfunction shallow(previousProperty: any, newProperty: any): PropertyChangeRecord {\n\tlet changed = false;\n\n\tconst validOldProperty = previousProperty && isObjectOrArray(previousProperty);\n\tconst validNewProperty = newProperty && isObjectOrArray(newProperty);\n\n\tif (!validOldProperty || !validNewProperty) {\n\t\treturn {\n\t\t\tchanged: true,\n\t\t\tvalue: newProperty\n\t\t};\n\t}\n\n\tconst previousKeys = Object.keys(previousProperty);\n\tconst newKeys = Object.keys(newProperty);\n\n\tif (previousKeys.length !== newKeys.length) {\n\t\tchanged = true;\n\t}\n\telse {\n\t\tchanged = newKeys.some((key) => {\n\t\t\treturn newProperty[key] !== previousProperty[key];\n\t\t});\n\t}\n\treturn {\n\t\tchanged,\n\t\tvalue: newProperty\n\t};\n}\n\nexport default function diff(propertyName: string, diffDiffType: DiffType, previousProperty: any, newProperty: any, meta?: any) {\n\tlet result;\n\tswitch (diffDiffType) {\n\t\tcase DiffType.CUSTOM:\n\t\t\tresult = custom(previousProperty, newProperty, meta);\n\t\tbreak;\n\t\tcase DiffType.ALWAYS:\n\t\t\tresult = always(previousProperty, newProperty);\n\t\tbreak;\n\t\tcase DiffType.IGNORE:\n\t\t\tresult = ignore(previousProperty, newProperty);\n\t\tbreak;\n\t\tcase DiffType.REFERENCE:\n\t\t\tresult = reference(previousProperty, newProperty);\n\t\tbreak;\n\t\tcase DiffType.SHALLOW:\n\t\t\tresult = shallow(previousProperty, newProperty);\n\t\tbreak;\n\t\tcase DiffType.AUTO:\n\t\t\tif (typeof newProperty === 'function') {\n\t\t\t\tresult = ignore(previousProperty, newProperty);\n\t\t\t}\n\t\t\telse if (isObjectOrArray(newProperty)) {\n\t\t\t\tresult = shallow(previousProperty, newProperty);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tresult = reference(previousProperty, newProperty);\n\t\t\t}\n\t\tbreak;\n\t\tdefault:\n\t\t\tconsole.warn(`no valid DiffType provided, will mark property '${propertyName}' as changed`);\n\t\t\tresult = always(previousProperty, newProperty);\n\t}\n\treturn result;\n}\n"]}