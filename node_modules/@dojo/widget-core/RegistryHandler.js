var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "@dojo/core/Evented"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var Evented_1 = require("@dojo/core/Evented");
    var RegistryHandler = (function (_super) {
        __extends(RegistryHandler, _super);
        function RegistryHandler() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this._registries = [];
            return _this;
        }
        RegistryHandler.prototype.add = function (registry) {
            this._registries.unshift({ registry: registry });
        };
        RegistryHandler.prototype.remove = function (registry) {
            var _this = this;
            return this._registries.some(function (registryWrapper, i) {
                if (registryWrapper.registry === registry) {
                    registry.destroy();
                    _this._registries.splice(i, 1);
                    return true;
                }
                return false;
            });
        };
        RegistryHandler.prototype.replace = function (original, replacement) {
            return this._registries.some(function (registryWrapper, i) {
                if (registryWrapper.registry === original) {
                    original.destroy();
                    registryWrapper.registry = replacement;
                    return true;
                }
                return false;
            });
        };
        RegistryHandler.prototype.has = function (widgetLabel) {
            return this._registries.some(function (registryWrapper) {
                return registryWrapper.registry.has(widgetLabel);
            });
        };
        RegistryHandler.prototype.get = function (widgetLabel) {
            var _this = this;
            var _loop_1 = function (i) {
                var registryWrapper = this_1._registries[i];
                var item = registryWrapper.registry.get(widgetLabel);
                if (item) {
                    return { value: item };
                }
                else if (!registryWrapper.handle) {
                    registryWrapper.handle = registryWrapper.registry.on(widgetLabel, function (event) {
                        if (event.action === 'loaded') {
                            _this.emit({ type: 'invalidate' });
                            registryWrapper.handle.destroy();
                            registryWrapper.handle = undefined;
                        }
                    });
                }
            };
            var this_1 = this;
            for (var i = 0; i < this._registries.length; i++) {
                var state_1 = _loop_1(i);
                if (typeof state_1 === "object")
                    return state_1.value;
            }
            return null;
        };
        return RegistryHandler;
    }(Evented_1.Evented));
    exports.default = RegistryHandler;
});
//# sourceMappingURL=RegistryHandler.js.map