var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "@dojo/core/lang", "@dojo/core/Evented", "./WidgetBase", "./d"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var lang_1 = require("@dojo/core/lang");
    var Evented_1 = require("@dojo/core/Evented");
    var WidgetBase_1 = require("./WidgetBase");
    var d_1 = require("./d");
    /**
     * Default noop Mappers for the container.
     */
    exports.defaultMappers = {
        getProperties: function (inject, properties) {
            return Object.create(null);
        },
        getChildren: function (inject, children) {
            return [];
        }
    };
    /**
     * Base context class that extends Evented and
     * returns the context using `.get()`.
     */
    var Context = (function (_super) {
        __extends(Context, _super);
        function Context(context) {
            if (context === void 0) { context = {}; }
            var _this = _super.call(this, {}) || this;
            _this._context = context;
            return _this;
        }
        Context.prototype.get = function () {
            return this._context;
        };
        Context.prototype.set = function (context) {
            this._context = context;
            this.emit({ type: 'invalidate' });
        };
        return Context;
    }(Evented_1.Evented));
    exports.Context = Context;
    var BaseInjector = (function (_super) {
        __extends(BaseInjector, _super);
        function BaseInjector(context) {
            var _this = _super.call(this) || this;
            _this.context = {};
            if (context) {
                _this.context = context;
                _this.context.on('invalidate', _this.invalidate.bind(_this));
            }
            return _this;
        }
        BaseInjector.prototype.toInject = function () {
            return this.context;
        };
        return BaseInjector;
    }(WidgetBase_1.WidgetBase));
    exports.BaseInjector = BaseInjector;
    /**
     * Mixin that extends the supplied Injector class with the proxy `render` and passing the provided to `context` to the Injector
     * class via the constructor.
     */
    function Injector(Base, context) {
        var Injector = (function (_super) {
            __extends(Injector, _super);
            function Injector() {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                return _super.call(this, context) || this;
            }
            Injector.prototype.decorateBind = function (node) {
                var scope = this.properties.scope;
                d_1.decorate(node, function (node) {
                    var properties = node.properties;
                    properties.bind = scope;
                }, function (node) { return d_1.isHNode(node) || d_1.isWNode(node); });
                return node;
            };
            Injector.prototype.render = function () {
                var _a = this.properties, render = _a.render, properties = _a.properties, _b = _a.getProperties, getProperties = _b === void 0 ? exports.defaultMappers.getProperties : _b, children = _a.children, _c = _a.getChildren, getChildren = _c === void 0 ? exports.defaultMappers.getChildren : _c;
                var injectedChildren = getChildren(this.toInject(), children);
                lang_1.assign(properties, getProperties(this.toInject(), properties));
                if (injectedChildren && injectedChildren.length) {
                    children.push.apply(children, injectedChildren);
                }
                return render();
            };
            return Injector;
        }(Base));
        __decorate([
            WidgetBase_1.afterRender(),
            __metadata("design:type", Function),
            __metadata("design:paramtypes", [Object]),
            __metadata("design:returntype", Object)
        ], Injector.prototype, "decorateBind", null);
        Injector = __decorate([
            WidgetBase_1.diffProperty('render', 2 /* ALWAYS */),
            __metadata("design:paramtypes", [Object])
        ], Injector);
        return Injector;
    }
    exports.Injector = Injector;
    exports.default = Injector;
});
//# sourceMappingURL=Injector.js.map