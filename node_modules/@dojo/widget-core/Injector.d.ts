import { WidgetBase } from './WidgetBase';
import { Constructor, DNode, WidgetProperties } from './interfaces';
export interface GetProperties {
    <C, P extends WidgetProperties>(inject: C, properties: P): any;
}
export interface GetChildren {
    <C>(inject: C, children: DNode[]): DNode[];
}
/**
 * The binding mappers for properties and children.
 */
export interface Mappers {
    getProperties: GetProperties;
    getChildren: GetChildren;
}
/**
 * Default noop Mappers for the container.
 */
export declare const defaultMappers: Mappers;
export interface InjectorProperties extends WidgetProperties {
    bind: any;
    render(): DNode;
    getProperties?: GetProperties;
    properties: WidgetProperties;
    getChildren?: GetChildren;
    children: DNode[];
}
export declare class BaseInjector<C> extends WidgetBase<InjectorProperties> {
    private _context;
    constructor(context?: C);
    toInject(): C;
}
/**
 * Mixin that extends the supplied Injector class with the proxy `render` and passing the provided to `context` to the Injector
 * class via the constructor.
 */
export declare function Injector<C, T extends Constructor<BaseInjector<C>>>(Base: T, context: C): T;
export default Injector;
