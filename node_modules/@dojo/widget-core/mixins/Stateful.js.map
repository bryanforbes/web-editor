{"version":3,"file":"Stateful.js","sourceRoot":"","sources":["Stateful.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;IAAA,wCAA6C;IA8B7C;;OAEG;IACH,IAAM,qBAAqB,GAAG,eAAe,CAAC;IAE9C,uBAAsE,IAAO;QAC5E,MAAM;YAAe,2BAAI;YAIxB;gBAAY,cAAc;qBAAd,UAAc,EAAd,qBAAc,EAAd,IAAc;oBAAd,yBAAc;;gBAA1B,+BACU,IAAI,UAKb;gBAJA,KAAI,CAAC,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;gBAClC,KAAI,CAAC,GAAG,CAAC,KAAI,CAAC,EAAE,CAAC,eAAe,EAAE;oBACjC,KAAI,CAAC,UAAU,EAAE,CAAC;gBACnB,CAAC,CAAC,CAAC,CAAC;;YACL,CAAC;YAED,sBAAW,0BAAK;qBAAhB;oBACC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC;gBACpB,CAAC;;;eAAA;YAEM,0BAAQ,GAAf,UAAgB,KAAqB;gBACpC,IAAI,CAAC,MAAM,GAAG,iBAAU,CAAC,EAAE,EAAE,IAAI,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;gBACjD,IAAM,WAAW,GAAG;oBACnB,IAAI,EAAE,qBAAqB;oBAC3B,KAAK,EAAE,IAAI,CAAC,MAAM;oBAClB,MAAM,EAAE,IAAI;iBACZ,CAAC;gBACF,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;YACxB,CAAC;YACF,cAAC;QAAD,CAAC,AAzBM,CAAc,IAAI,GAyBvB;IACH,CAAC;IA3BD,sCA2BC;IAED,kBAAe,aAAa,CAAC","sourcesContent":["import { deepAssign } from '@dojo/core/lang';\nimport { Constructor } from './../interfaces';\nimport { WidgetBase } from './../WidgetBase';\n\n/**\n * State\n */\nexport interface State {\n\t[key: string]: any;\n}\n\n/**\n * Stateful interface\n */\nexport interface StatefulMixin {\n\n\t/**\n\t * state property\n\t */\n\treadonly state: State;\n\n\t/**\n\t * Set the internal state. Accepts a partial and mixes on top of the existing state.\n\t * To clear a key it needs to be specifically set to undefined.\n\t *\n\t * @param state state to mix over the stored state\n\t */\n\tsetState(state: Partial<State>): void;\n}\n\n/**\n * State change event type\n */\nconst stateChangedEventType = 'state:changed';\n\nexport function StatefulMixin<T extends Constructor<WidgetBase<any>>>(Base: T): T & Constructor<StatefulMixin> {\n\treturn class extends Base {\n\n\t\tprivate _state: State;\n\n\t\tconstructor(...args: any[]) {\n\t\t\tsuper(...args);\n\t\t\tthis._state = Object.create(null);\n\t\t\tthis.own(this.on('state:changed', () => {\n\t\t\t\tthis.invalidate();\n\t\t\t}));\n\t\t}\n\n\t\tpublic get state(): State {\n\t\t\treturn this._state;\n\t\t}\n\n\t\tpublic setState(state: Partial<State>): void {\n\t\t\tthis._state = deepAssign({}, this._state, state);\n\t\t\tconst eventObject = {\n\t\t\t\ttype: stateChangedEventType,\n\t\t\t\tstate: this._state,\n\t\t\t\ttarget: this\n\t\t\t};\n\t\t\tthis.emit(eventObject);\n\t\t}\n\t};\n}\n\nexport default StatefulMixin;\n"]}