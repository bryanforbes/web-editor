var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "@dojo/core/lang"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var lang_1 = require("@dojo/core/lang");
    /**
     * State change event type
     */
    var stateChangedEventType = 'state:changed';
    function StatefulMixin(base) {
        return (function (_super) {
            __extends(class_1, _super);
            function class_1() {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                var _this = _super.apply(this, args) || this;
                _this._state = Object.create(null);
                _this.own(_this.on('state:changed', function () {
                    _this.invalidate();
                }));
                return _this;
            }
            Object.defineProperty(class_1.prototype, "state", {
                get: function () {
                    return this._state;
                },
                enumerable: true,
                configurable: true
            });
            class_1.prototype.setState = function (state) {
                this._state = lang_1.deepAssign({}, this._state, state);
                var eventObject = {
                    type: stateChangedEventType,
                    state: this._state,
                    target: this
                };
                this.emit(eventObject);
            };
            return class_1;
        }(base));
    }
    exports.StatefulMixin = StatefulMixin;
    exports.default = StatefulMixin;
});
//# sourceMappingURL=Stateful.js.map