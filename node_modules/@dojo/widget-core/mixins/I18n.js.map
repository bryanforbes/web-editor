{"version":3,"file":"I18n.js","sourceRoot":"","sources":["I18n.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAAA,mCAAmC;IACnC,wCAAyC;IACzC,wCAA0G;IAG1G,8CAA0D;IAC1D,4BAAiC;IA8DjC,mBAAkE,IAAO;QACxE;YAAmB,wBAAI;YAItB;gBAAY,cAAc;qBAAd,UAAc,EAAd,qBAAc,EAAd,IAAc;oBAAd,yBAAc;;gBAA1B,+BACU,IAAI,UAab;gBAZA,IAAM,YAAY,GAAG,oBAAa,CAAC;oBAClC,IAAI,EAAE;wBACL,EAAE,CAAC,CAAC,CAAC,KAAI,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC;4BAC7B,KAAI,CAAC,UAAU,EAAE,CAAC;wBACnB,CAAC;oBACF,CAAC;iBACD,CAAC,CAAC;gBACH,KAAI,CAAC,GAAG,CAAC;oBACR,OAAO;wBACN,YAAY,CAAC,WAAW,EAAE,CAAC;oBAC5B,CAAC;iBACD,CAAC,CAAC;;YACJ,CAAC;YAEM,6BAAc,GAArB,UAA0C,MAAiB;gBAClD,IAAA,+BAAM,CAAqB;gBACnC,IAAM,QAAQ,GAAG,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,IAAI,MAAM,CAAC,QAAQ,CAAC;gBAEnE,MAAM,CAAC,aAAM,CAAC,MAAM,CAAC,MAAM,CAAC;oBAC3B,MAAM,YAAC,GAAW,EAAE,OAAa;wBAChC,MAAM,CAAC,oBAAa,CAAC,MAAM,CAAC,UAAU,EAAE,GAAG,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC;oBAC/D,CAAC;iBACD,CAAC,EAAE,QAAQ,CAAyB,CAAC;YACvC,CAAC;YAGS,8BAAe,GAAzB,UAA0B,MAAa;gBACtC,EAAE,CAAC,CAAC,WAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;oBACf,IAAA,oBAAiC,EAA/B,kBAAM,EAAE,YAAG,CAAqB;oBACxC,IAAM,eAAe,GAAwB;wBAC5C,GAAG,EAAE,IAAI;wBACT,IAAI,EAAE,IAAI;qBACV,CAAC;oBAEF,EAAE,CAAC,CAAC,OAAO,GAAG,KAAK,SAAS,CAAC,CAAC,CAAC;wBAC9B,eAAe,CAAC,KAAK,CAAC,GAAG,GAAG,GAAG,KAAK,GAAG,KAAK,CAAC;oBAC9C,CAAC;oBACD,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;wBACZ,eAAe,CAAC,MAAM,CAAC,GAAG,MAAM,CAAC;oBAClC,CAAC;oBAED,aAAM,CAAC,MAAM,CAAC,UAAU,EAAE,eAAe,CAAC,CAAC;gBAC5C,CAAC;gBACD,MAAM,CAAC,MAAM,CAAC;YACf,CAAC;YAED;;;;;;;;;;eAUG;YACK,gCAAiB,GAAzB,UAA0B,MAAwB;gBAAlD,iBAYC;gBAXQ,IAAA,4BAAU,CAAU;gBAC5B,IAAM,MAAM,GAAG,UAAU,CAAC,MAAM,IAAI,cAAI,CAAC,MAAM,CAAC;gBAChD,IAAM,cAAc,GAAG,wBAAiB,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;gBAEzD,EAAE,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC;oBACpB,MAAM,CAAC,cAAc,CAAC;gBACvB,CAAC;gBAED,cAAI,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC,IAAI,CAAC;oBACzB,KAAI,CAAC,UAAU,EAAE,CAAC;gBACnB,CAAC,CAAC,CAAC;YACJ,CAAC;YACF,WAAC;QAAD,CAAC,AA5ED,CAAmB,IAAI,GA4EtB;QA5CA;YADC,wBAAW,EAAE;;;;mDAmBb;QA4BF,MAAM,CAAC,IAAI,CAAC;IACb,CAAC;IAhFD,8BAgFC;IAED,kBAAe,SAAS,CAAC","sourcesContent":["/* tslint:disable:interface-name */\nimport { assign } from '@dojo/core/lang';\nimport i18n, { Bundle, formatMessage, getCachedMessages, Messages, observeLocale } from '@dojo/i18n/i18n';\nimport { VNodeProperties } from '@dojo/interfaces/vdom';\nimport { Constructor, DNode, WidgetProperties } from './../interfaces';\nimport { WidgetBase, afterRender } from './../WidgetBase';\nimport { isHNode } from './../d';\n\nexport interface I18nProperties extends WidgetProperties {\n\t/**\n\t * The locale for the widget. If not specified, then the root locale (as determined by `@dojo/i18n`) is assumed.\n\t * If specified, the widget's node will have a `lang` property set to the locale.\n\t */\n\tlocale?: string;\n\n\t/**\n\t * An optional flag indicating the widget's text direction. If `true`, then the underlying node's `dir`\n\t * property is set to \"rtl\". If it is `false`, then the `dir` property is set to \"ltr\". Otherwise, the property\n\t * is not set.\n\t */\n\trtl?: boolean;\n}\n\n/**\n * @private\n * An internal helper interface for defining locale and text direction attributes on widget nodes.\n */\ninterface I18nVNodeProperties extends VNodeProperties {\n\tdir: string | null;\n\tlang: string | null;\n}\n\nexport type LocalizedMessages<T extends Messages> = T & {\n\t/**\n\t * Formats an ICU-formatted message template for the represented bundle.\n\t *\n\t * @param key\n\t * The message key.\n\t *\n\t * @param options\n\t * The values to pass to the formatter.\n\t *\n\t * @return\n\t * The formatted string.\n\t */\n\tformat(key: string, options?: any): string;\n};\n\n/**\n * interface for I18n functionality\n */\nexport interface I18nMixin {\n\t/**\n\t * Return the cached messages for the specified bundle for the current locale, assuming they have already\n\t * been loaded. If the locale-specific messages have not been loaded, they are fetched and the widget state\n\t * is updated.\n\t *\n\t * @param bundle\n\t * The required bundle object for which available locale messages should be loaded.\n\t *\n\t * @return\n\t * The localized messages, along with a `format` method for formatting ICU-formatted templates.\n\t */\n\tlocalizeBundle<T extends Messages>(bundle: Bundle<T>): LocalizedMessages<T>;\n\n\tproperties: I18nProperties;\n}\n\nexport function I18nMixin<T extends Constructor<WidgetBase<any>>>(base: T): T & Constructor<I18nMixin> {\n\tclass I18n extends base {\n\n\t\tpublic properties: I18nProperties;\n\n\t\tconstructor(...args: any[]) {\n\t\t\tsuper(...args);\n\t\t\tconst subscription = observeLocale({\n\t\t\t\tnext: () => {\n\t\t\t\t\tif (!this.properties.locale) {\n\t\t\t\t\t\tthis.invalidate();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t\tthis.own({\n\t\t\t\tdestroy() {\n\t\t\t\t\tsubscription.unsubscribe();\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tpublic localizeBundle<T extends Messages>(bundle: Bundle<T>): LocalizedMessages<T> {\n\t\t\tconst { locale } = this.properties;\n\t\t\tconst messages = this.getLocaleMessages(bundle) || bundle.messages;\n\n\t\t\treturn assign(Object.create({\n\t\t\t\tformat(key: string, options?: any) {\n\t\t\t\t\treturn formatMessage(bundle.bundlePath, key, options, locale);\n\t\t\t\t}\n\t\t\t}), messages) as LocalizedMessages<T>;\n\t\t}\n\n\t\t@afterRender()\n\t\tprotected renderDecorator(result: DNode): DNode {\n\t\t\tif (isHNode(result)) {\n\t\t\t\tconst { locale, rtl } = this.properties;\n\t\t\t\tconst vNodeProperties: I18nVNodeProperties = {\n\t\t\t\t\tdir: null,\n\t\t\t\t\tlang: null\n\t\t\t\t};\n\n\t\t\t\tif (typeof rtl === 'boolean') {\n\t\t\t\t\tvNodeProperties['dir'] = rtl ? 'rtl' : 'ltr';\n\t\t\t\t}\n\t\t\t\tif (locale) {\n\t\t\t\t\tvNodeProperties['lang'] = locale;\n\t\t\t\t}\n\n\t\t\t\tassign(result.properties, vNodeProperties);\n\t\t\t}\n\t\t\treturn result;\n\t\t}\n\n\t\t/**\n\t\t * @private\n\t\t * Return the cached dictionary for the specified bundle and locale, if it exists. If the requested dictionary does not\n\t\t * exist, then load it and update the instance's state with the appropriate messages.\n\t\t *\n\t\t * @param bundle\n\t\t * The bundle for which to load a locale-specific dictionary.\n\t\t *\n\t\t * @return\n\t\t * The locale-specific dictionary, if it has already been loaded and cached.\n\t\t */\n\t\tprivate getLocaleMessages(bundle: Bundle<Messages>): Messages | void {\n\t\t\tconst { properties } = this;\n\t\t\tconst locale = properties.locale || i18n.locale;\n\t\t\tconst localeMessages = getCachedMessages(bundle, locale);\n\n\t\t\tif (localeMessages) {\n\t\t\t\treturn localeMessages;\n\t\t\t}\n\n\t\t\ti18n(bundle, locale).then(() => {\n\t\t\t\tthis.invalidate();\n\t\t\t});\n\t\t}\n\t}\n\n\treturn I18n;\n}\n\nexport default I18nMixin;\n"]}