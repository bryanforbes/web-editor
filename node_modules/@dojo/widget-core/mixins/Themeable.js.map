{"version":3,"file":"Themeable.js","sourceRoot":"","sources":["Themeable.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAAA,wCAAyC;IACzC,8CAA6C;IAC7C,0CAAkD;IAClD,sCAAiC;IAEjC,4BAAqC;IAErC,0CAAuD;IACvD,8CAAiG;IAoDjG,IAAM,SAAS,GAAG,OAAO,CAAC;IAEb,QAAA,kBAAkB,GAAG,MAAM,CAAC,OAAO,CAAC,CAAC;IAiBlD;;OAEG;IACH,eAAuB,KAAS;QAC/B,MAAM,CAAC,4BAAe,CAAC,UAAC,MAAM;YAC7B,MAAM,CAAC,YAAY,CAAC,kBAAkB,EAAE,KAAK,CAAC,CAAC;QAChD,CAAC,CAAC,CAAC;IACJ,CAAC;IAJD,sBAIC;IAED;;;;;;OAMG;IACH,2BAA2B,OAAiB;QAC3C,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,UAAC,YAAsB,EAAE,SAAS;YACvD,EAAE,CAAC,CAAC,SAAS,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;gBACjC,YAAY,CAAC,IAAI,OAAjB,YAAY,EAAS,SAAS,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE;YAC5C,CAAC;YACD,IAAI,CAAC,CAAC;gBACL,YAAY,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;YAC9B,CAAC;YACD,MAAM,CAAC,YAAY,CAAC;QACrB,CAAC,EAAE,EAAE,CAAC,CAAC;IACR,CAAC;IAED;;;;;;OAMG;IACH,+BAA+B,UAAoB,EAAE,OAAgB;QACpE,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,UAAC,iBAAiC,EAAE,SAAS;YACrE,iBAAiB,CAAC,SAAS,CAAC,GAAG,OAAO,CAAC;YACvC,MAAM,CAAC,iBAAiB,CAAC;QAC1B,CAAC,EAAE,EAAE,CAAC,CAAC;IACR,CAAC;IAED;;;;;OAKG;IACH,kCAAkC,OAAuB;QACxD,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,UAAC,iBAAiB,EAAE,SAAS;YAClD,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC,UAAC,GAAW;gBAC1C,iBAAiB,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,GAAG,GAAG,CAAC;YACzC,CAAC,CAAC,CAAC;YACH,MAAM,CAAC,iBAAiB,CAAC;QAC1B,CAAC,EAAe,EAAE,CAAC,CAAC;IACrB,CAAC;IAED;;;OAGG;IACH;QAA0C,wCAAO;QAIhD;;WAEG;QACH,8BAAY,KAAW;YAAvB,YACC,kBAAM,EAAE,CAAC,SAET;YADA,KAAI,CAAC,MAAM,GAAG,KAAK,CAAC;;QACrB,CAAC;QAED;;WAEG;QACI,kCAAG,GAAV,UAAW,KAAU;YACpB,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;YACpB,IAAI,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,YAAY,EAAE,CAAC,CAAC;QACnC,CAAC;QAKD,sBAAW,uCAAK;YAHhB;;eAEG;iBACH;gBACC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC;YACpB,CAAC;;;WAAA;QACF,2BAAC;IAAD,CAAC,AA1BD,CAA0C,iBAAO,GA0BhD;IA1BY,oDAAoB;IA4BjC;;;;OAIG;IACH;QAAmC,iCAAkC;QACpE,uBAAY,OAA6B;YAAzC,YACC,kBAAM,OAAO,CAAC,SAEd;YADA,KAAI,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE,CAAC,YAAY,EAAE,KAAI,CAAC,UAAU,CAAC,IAAI,CAAC,KAAI,CAAC,CAAC,CAAC,CAAC;;QAChE,CAAC;QACF,oBAAC;IAAD,CAAC,AALD,CAAmC,uBAAY,GAK9C;IALY,sCAAa;IAO1B;;;;;;;;;OASG;IACH,+BAAsC,KAAU,EAAE,aAAwC;QAAxC,8BAAA,EAAA,gBAAgC,YAAQ;QACzF,IAAM,oBAAoB,GAAG,IAAI,oBAAoB,CAAC,KAAK,CAAC,CAAC;QAC7D,IAAM,iBAAiB,GAAG,mBAAQ,CAAC,aAAa,EAAE,oBAAoB,CAAC,CAAC;QACxE,aAAa,CAAC,MAAM,CAAC,0BAAkB,EAAE,iBAAiB,CAAC,CAAC;QAC5D,MAAM,CAAC,oBAAoB,CAAC;IAC7B,CAAC;IALD,sDAKC;IAED;;OAEG;IACH,wBAAuF,IAAO;QAC7F;YAAwB,6BAAI;YAA5B;gBAAA,qEAkOC;gBA3NA;;mBAEG;gBACK,iBAAW,GAAmB,EAAE,CAAC;gBAOzC;;mBAEG;gBACK,yBAAmB,GAAG,IAAI,CAAC;gBAEnC;;mBAEG;gBACK,2BAAqB,GAAgC,IAAI,aAAG,EAA0B,CAAC;gBAE/F;;mBAEG;gBACK,YAAM,GAAe,EAAE,CAAC;;YAoMjC,CAAC;YAlMA;;;;;;;;;;eAUG;YACI,2BAAO,GAAd;gBAAe,oBAAgC;qBAAhC,UAAgC,EAAhC,qBAAgC,EAAhC,IAAgC;oBAAhC,+BAAgC;;gBAC9C,EAAE,CAAC,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC,CAAC;oBAC9B,IAAI,CAAC,uBAAuB,EAAE,CAAC;gBAChC,CAAC;gBAED,IAAM,SAAS,GAAG,IAAI,CAAC;gBACvB;oBACC,IAAM,YAAY,GAAG,SAAS,CAAC,eAAe,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;oBAC7D,IAAM,YAAY,GAAG,SAAS,CAAC,eAAe,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;oBAClE,MAAM,CAAC,aAAM,CAAC,EAAE,EAAE,SAAS,CAAC,WAAW,EAAE,YAAY,EAAE,YAAY,CAAC,CAAC;gBACtE,CAAC;gBACD,IAAM,oBAAoB,GAAG;oBAC5B,OAAO,EAAE,UAAU;oBACnB,YAAY,EAAE,EAAE;oBAChB,KAAK;wBAA6B,oBAAgC;6BAAhC,UAAgC,EAAhC,qBAAgC,EAAhC,IAAgC;4BAAhC,+BAAgC;;wBACjE,IAAM,kBAAkB,GAAc,UAAU,CAAC,MAAM,CAAC,UAAC,SAAS,IAAK,OAAA,SAAS,KAAK,IAAI,EAAlB,CAAkB,CAAC,CAAC;wBAC3F,CAAA,KAAA,IAAI,CAAC,YAAY,CAAA,CAAC,IAAI,WAAI,kBAAkB,EAAE;wBAC9C,MAAM,CAAC,IAAI,CAAC;;oBACb,CAAC;oBACD,GAAG,EAAE,aAAa;iBAClB,CAAC;gBAEF,MAAM,CAAC,aAAM,CAAC,aAAa,CAAC,IAAI,CAAC,oBAAoB,CAAC,EAAE,oBAAoB,CAAC,CAAC;YAC/E,CAAC;YAGS,+BAAW,GAArB,UAAsB,UAAuB,EAAE,UAA+B,EAAE,QAAiB;gBADjG,iBAoBC;gBAlBA,MAAM,CAAC;oBACN,IAAM,gBAAgB,GAAG,KAAI,CAAC,UAAU,CAAC,GAAG,CAAC,0BAAkB,CAAC,CAAC;oBACjE,EAAE,CAAC,CAAC,gBAAgB,CAAC,CAAC,CAAC;wBACtB,MAAM,CAAC,KAAC,CAAgB,0BAAkB,EAAE;4BAC3C,IAAI,EAAE,KAAI;4BACV,MAAM,EAAE,UAAU;4BAClB,aAAa,EAAE,UAAC,MAA4B,EAAE,UAA+B;gCAC5E,EAAE,CAAC,CAAC,CAAC,UAAU,CAAC,KAAK,IAAI,KAAI,CAAC,MAAM,KAAK,UAAU,CAAC,aAAa,CAAC,CAAC,CAAC;oCACnE,KAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC;gCACjC,CAAC;gCACD,MAAM,CAAC,EAAE,aAAa,EAAE,MAAM,CAAC,KAAK,EAAE,CAAC;4BACxC,CAAC;4BACD,UAAU,YAAA;4BACV,QAAQ,UAAA;yBACR,CAAC,CAAC;oBACJ,CAAC;oBACD,MAAM,CAAC,UAAU,EAAE,CAAC;gBACrB,CAAC,CAAC;YACH,CAAC;YAED;;eAEG;YACK,mCAAe,GAAvB,UAAwB,UAAoB;gBAA5C,iBAcC;gBAbA,MAAM,CAAC,UAAU;qBACf,MAAM,CAAC,UAAC,SAAS,IAAK,OAAA,SAAS,KAAK,IAAI,EAAlB,CAAkB,CAAC;qBACzC,MAAM,CAAC,UAAC,cAAkB,EAAE,SAAiB;oBAC7C,EAAE,CAAC,CAAC,CAAC,KAAI,CAAC,8BAA8B,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;wBACrD,OAAO,CAAC,IAAI,CAAC,iBAAe,SAAS,mDAAgD,CAAC,CAAC;wBACvF,MAAM,CAAC,cAAc,CAAC;oBACvB,CAAC;oBACD,SAAS,GAAG,KAAI,CAAC,8BAA8B,CAAC,SAAS,CAAC,CAAC;oBAC3D,EAAE,CAAC,CAAC,CAAC,KAAI,CAAC,qBAAqB,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;wBAChD,KAAI,CAAC,kBAAkB,CAAC,SAAS,CAAC,CAAC;oBACpC,CAAC;oBACD,MAAM,CAAC,aAAM,CAAC,cAAc,EAAE,KAAI,CAAC,qBAAqB,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC;gBAC1E,CAAC,EAAE,EAAE,CAAC,CAAC;YACT,CAAC;YAED;;eAEG;YACK,mCAAe,GAAvB,UAAwB,UAAoB;gBAC3C,IAAM,YAAY,GAAG,iBAAiB,CAAC,UAAU,CAAC,CAAC;gBACnD,IAAI,CAAC,qBAAqB,CAAC,YAAY,CAAC,CAAC;gBACzC,MAAM,CAAC,qBAAqB,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC;YAClD,CAAC;YAED;;;;eAIG;YAEO,uCAAmB,GAA7B,UAA8B,EAAyE;oBAAvE,4CAAmB;gBAClD,IAAM,YAAY,GAAG,gBAAQ,CAAC,mBAAmB,EAAE,OAAO,CAAC,CAAC;gBAC5D,IAAM,mBAAmB,GAAG,gBAAQ,CAAC,mBAAmB,EAAE,cAAc,CAAC,CAAC;gBAE1E,EAAE,CAAC,CAAC,YAAY,IAAI,mBAAmB,CAAC,CAAC,CAAC;oBACzC,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC;gBACjC,CAAC;YACF,CAAC;YAED;;;;eAIG;YACK,yCAAqB,GAA7B,UAA8B,UAAoB;gBACjD,IAAM,kBAAkB,GAAG,qBAAqB,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC;gBACpE,IAAI,CAAC,WAAW,GAAG,aAAM,CAAC,EAAE,EAAE,IAAI,CAAC,WAAW,EAAE,kBAAkB,CAAC,CAAC;YACrE,CAAC;YAED;;;;eAIG;YACK,sCAAkB,GAA1B,UAA2B,SAAiB;gBAA5C,iBAWC;gBAVsB,IAAA,iCAAiB,EAAjB,sCAAiB,CAAY;gBACnD,IAAM,UAAU,GAAG,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,GAAG,IAAI,CAAC,iBAAiB,CAAC,SAAS,CAAC,CAAC;gBACvG,IAAM,eAAe,GAAG,YAAY,CAAC,SAAS,CAAC,GAAG,YAAY,CAAC,SAAS,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC;gBAC1F,IAAM,aAAa,GAAG,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC;gBACpE,IAAM,aAAa,GAAG,aAAa,CAAC,MAAM,CAAC,UAAC,aAAa,EAAE,YAAY;oBACtE,aAAa,CAAC,YAAY,CAAC,GAAG,IAAI,CAAC;oBACnC,KAAI,CAAC,WAAW,CAAC,YAAY,CAAC,GAAG,KAAK,CAAC;oBACvC,MAAM,CAAC,aAAa,CAAC;gBACtB,CAAC,EAAQ,EAAE,CAAC,CAAC;gBACb,IAAI,CAAC,qBAAqB,CAAC,GAAG,CAAC,SAAS,EAAE,aAAa,CAAC,CAAC;YAC1D,CAAC;YAED;;eAEG;YACK,2CAAuB,GAA/B;gBAAA,iBAmBC;gBAlBQ,IAAA,oBAAyD,EAA3C,qBAAkB,EAAlB,uCAAkB,EAAE,aAAqB,EAArB,0CAAqB,CAAY;gBAC3E,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAAC,CAAC;oBACjC,IAAI,CAAC,qBAAqB,GAAQ,IAAI,CAAC,YAAY,CAAC,kBAAkB,CAAC,SAAG,OAAO,EAAE,CAAC;oBACpF,IAAI,CAAC,kBAAkB,EAAE,CAAC;gBAC3B,CAAC;gBACD,IAAM,uBAAuB,GAAG,IAAI,CAAC,qBAAqB,CAAC,GAAG,CAAC,UAAC,0BAA0B;oBACzF,MAAM,CAAC,0BAA0B,CAAC,SAAS,CAAC,CAAC;gBAC9C,CAAC,CAAC,CAAC;gBAEH,IAAI,CAAC,8BAA8B,GAAG,wBAAwB,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAAC;gBAC3F,IAAI,CAAC,MAAM,GAAG,uBAAuB,CAAC,MAAM,CAAC,UAAC,SAAS,EAAE,QAAQ;oBAChE,MAAM,CAAC,aAAM,CAAC,SAAS,EAAE,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC;gBAC3C,CAAC,EAAE,EAAE,CAAC,CAAC;gBAEP,IAAI,CAAC,qBAAqB,CAAC,OAAO,CAAC,UAAC,KAAK,EAAE,GAAG;oBAC7C,KAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,CAAC;gBAC9B,CAAC,CAAC,CAAC;gBACH,IAAI,CAAC,mBAAmB,GAAG,KAAK,CAAC;YAClC,CAAC;YAED;;eAEG;YACK,qCAAiB,GAAzB,UAA0B,SAAiB;gBAC1C,IAAM,mBAAmB,GAAG,YAAI,CAAC,IAAI,CAAC,qBAAqB,EAAE,UAAC,0BAA0B;oBACvF,MAAM,CAAC,OAAO,CAAC,0BAA0B,CAAC,SAAS,CAAC,CAAC,CAAC;gBACvD,CAAC,CAAC,CAAC;gBACH,MAAM,CAAC,mBAAmB,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC;YAC7C,CAAC;YAED;;eAEG;YACK,sCAAkB,GAA1B;gBAAA,iBAMC;gBALA,IAAI,CAAC,qBAAqB,CAAC,OAAO,CAAC,UAAC,0BAA0B,EAAE,KAAK;oBACpE,MAAM,CAAC,IAAI,CAAC,0BAA0B,CAAC,CAAC,IAAI,CAAC,UAAC,GAAG;wBAChD,MAAM,CAAC,KAAI,CAAC,WAAW,CAAC,GAAG,EAAE,0BAA0B,CAAC,CAAC;oBAC1D,CAAC,CAAC,CAAC;gBACJ,CAAC,CAAC,CAAC;YACJ,CAAC;YAED;;eAEG;YACK,+BAAW,GAAnB,UAAoB,GAAW,EAAE,oBAAkC;gBAClE,IAAI,SAAS,GAAG,KAAK,CAAC;gBACtB,EAAE,CAAC,CAAC,GAAG,KAAK,SAAS,CAAC,CAAC,CAAC;oBACvB,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,qBAAqB,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;wBAC5D,EAAE,CAAC,CAAC,oBAAoB,KAAK,IAAI,CAAC,qBAAqB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;4BAC5D,QAAQ,CAAC;wBACV,CAAC;wBACD,EAAE,CAAC,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;4BACxC,OAAO,CAAC,IAAI,CAAC,qCAAmC,GAAG,oDAAiD,CAAC,CAAC;4BACtG,SAAS,GAAG,IAAI,CAAC;4BACjB,KAAK,CAAC;wBACP,CAAC;oBACF,CAAC;oBACD,MAAM,CAAC,SAAS,CAAC;gBAClB,CAAC;gBACD,MAAM,CAAC,SAAS,CAAC;YAClB,CAAC;YACF,gBAAC;QAAD,CAAC,AAlOD,CAAwB,IAAI,GAkO3B;QA7JA;YADC,yBAAY,EAAE;;;;oDAoBd;QAoCD;YADC,gCAAmB,EAAE;;;;4DAQrB;QAiGF,MAAM,CAAC,SAAS,CAAC;IAClB,CAAC;IAtOD,wCAsOC;IAED,kBAAe,cAAc,CAAC","sourcesContent":["import { assign } from '@dojo/core/lang';\nimport { Evented } from '@dojo/core/Evented';\nimport { includes, find } from '@dojo/shim/array';\nimport Map from '@dojo/shim/Map';\nimport { Constructor, DNode, WidgetProperties, PropertiesChangeEvent } from './../interfaces';\nimport { w, registry } from './../d';\nimport { WidgetRegistry } from './../WidgetRegistry';\nimport { BaseInjector, Injector } from './../Injector';\nimport { beforeRender, WidgetBase, onPropertiesChanged, handleDecorator } from './../WidgetBase';\n\n/**\n * A representation of the css class names to be applied and\n * removed.\n */\nexport type ClassNameFlags = {\n\t[key: string]: boolean;\n};\n\n/**\n * A lookup object for available class names\n */\nexport type ClassNames = {\n\t[key: string]: string;\n};\n\n/**\n * Properties required for the themeable mixin\n */\nexport interface ThemeableProperties extends WidgetProperties {\n\tinjectedTheme?: any;\n\ttheme?: any;\n\textraClasses?: any;\n}\n\n/**\n * Returned by classes function.\n */\nexport interface ClassesFunctionChain {\n\t(): ClassNameFlags;\n\t/**\n\t * The theme classes to be returned when get() is called\n\t */\n\tclasses: string[];\n\t/**\n\t * The fixed classes to be returned when get() is called\n\t */\n\tfixedClasses: string[];\n\t/**\n\t * Function to pass fixed class names that bypass the theming\n\t * process\n\t */\n\tfixed: (...classes: (string | null)[]) => ClassesFunctionChain;\n\t/**\n\t * Finalize function to return the generated class names\n\t */\n\tget: () => ClassNameFlags;\n}\n\ntype ThemeClasses = { [key: string]: string; };\n\nconst THEME_KEY = ' _key';\n\nexport const INJECTED_THEME_KEY = Symbol('theme');\n\n/**\n * Interface for the ThemeableMixin\n */\nexport interface ThemeableMixin {\n\n\t/**\n\t * Processes all the possible classes for the instance with setting the passed class names to\n\t * true.\n\t *\n\t * @param ...classNames an array of class names\n\t * @returns a function chain to `get` or process more classes using `fixed`\n\t */\n\tclasses(...classNames: (string | null)[]): ClassesFunctionChain;\n}\n\n/**\n * Decorator for base css classes\n */\nexport function theme (theme: {}) {\n\treturn handleDecorator((target) => {\n\t\ttarget.addDecorator('baseThemeClasses', theme);\n\t});\n}\n\n/**\n * Split class strings containing spaces into separate array entries.\n * ie. ['class1 class2', 'class3] -> ['class1', 'class2', 'class3'];\n *\n * @param classes The array of class strings to split.\n * @return the complete classes array including any split classes.\n */\nfunction splitClassStrings(classes: string[]): string[] {\n\treturn classes.reduce((splitClasses: string[], className) => {\n\t\tif (className.indexOf(' ') > -1) {\n\t\t\tsplitClasses.push(...className.split(' '));\n\t\t}\n\t\telse {\n\t\t\tsplitClasses.push(className);\n\t\t}\n\t\treturn splitClasses;\n\t}, []);\n}\n\n/**\n * Returns the class object map based on the class names and whether they are\n * active.\n *\n * @param className an array of string class names\n * @param applied indicates is the class is applied\n */\nfunction createClassNameObject(classNames: string[], applied: boolean) {\n\treturn classNames.reduce((flaggedClassNames: ClassNameFlags, className) => {\n\t\tflaggedClassNames[className] = applied;\n\t\treturn flaggedClassNames;\n\t}, {});\n}\n\n/**\n * Creates a reverse lookup for the classes passed in via the `theme` function.\n *\n * @param classes The baseClasses object\n * @requires\n */\nfunction createThemeClassesLookup(classes: ThemeClasses[]): ClassNames {\n\treturn classes.reduce((currentClassNames, baseClass) => {\n\t\tObject.keys(baseClass).forEach((key: string) => {\n\t\t\tcurrentClassNames[baseClass[key]] = key;\n\t\t});\n\t\treturn currentClassNames;\n\t}, <ClassNames> {});\n}\n\n/**\n * The class for the theme injector context, used to control the theme once the\n * theme injector has been defined in the registry.\n */\nexport class ThemeInjectorContext extends Evented {\n\n\tprivate _theme: any;\n\n\t/**\n\t * @param theme optional theme to initialize the context\n\t */\n\tconstructor(theme?: any) {\n\t\tsuper({});\n\t\tthis._theme = theme;\n\t}\n\n\t/**\n\t * @param theme the theme object to set\n\t */\n\tpublic set(theme: any) {\n\t\tthis._theme = theme;\n\t\tthis.emit({ type: 'invalidate' });\n\t}\n\n\t/**\n\t * Return the current theme\n\t */\n\tpublic get theme(): any {\n\t\treturn this._theme;\n\t}\n}\n\n/**\n * Custom `ThemeInjector` class that listens to the `invalidate` event\n * from the context to `invalidate` any widgets the have had a theme\n * injected.\n */\nexport class ThemeInjector extends BaseInjector<ThemeInjectorContext> {\n\tconstructor(context: ThemeInjectorContext) {\n\t\tsuper(context);\n\t\tthis.own(context.on('invalidate', this.invalidate.bind(this)));\n\t}\n}\n\n/**\n * Convenience function that is given a theme and an optional registry, the theme\n * injector is defined against the registry, returning the theme context.\n *\n * @param theme the theme to set\n * @param themeRegistry registry to define the theme injector against. Defaults\n * to the global registry\n *\n * @returns the theme context instance used to set the theme\n */\nexport function registerThemeInjector(theme: any, themeRegistry: WidgetRegistry = registry): ThemeInjectorContext {\n\tconst themeInjectorContext = new ThemeInjectorContext(theme);\n\tconst ThemeInjectorBase = Injector(ThemeInjector, themeInjectorContext);\n\tthemeRegistry.define(INJECTED_THEME_KEY, ThemeInjectorBase);\n\treturn themeInjectorContext;\n}\n\n/**\n * Function that returns a class decorated with with Themeable functionality\n */\nexport function ThemeableMixin<T extends Constructor<WidgetBase<ThemeableProperties>>>(base: T): T & Constructor<ThemeableMixin> {\n\tclass Themeable extends base {\n\n\t\t/**\n\t\t * The Themeable baseClasses\n\t\t */\n\t\tprivate _registeredBaseThemes: ThemeClasses[];\n\n\t\t/**\n\t\t * All classes ever seen by the instance\n\t\t */\n\t\tprivate _allClasses: ClassNameFlags = {};\n\n\t\t/**\n\t\t * Reverse lookup of the theme classes\n\t\t */\n\t\tprivate _baseThemeClassesReverseLookup: ClassNames;\n\n\t\t/**\n\t\t * Indicates if classes meta data need to be calculated.\n\t\t */\n\t\tprivate _recalculateClasses = true;\n\n\t\t/**\n\t\t * Map of registered classes\n\t\t */\n\t\tprivate _registeredClassesMap: Map<string, ClassNameFlags> = new Map<string, ClassNameFlags>();\n\n\t\t/**\n\t\t * Loaded theme\n\t\t */\n\t\tprivate _theme: ClassNames = {};\n\n\t\t/**\n\t\t * Function used to add themeable classes to a widget. Returns a chained function 'fixed'\n\t\t * that can be used to pass non-themeable classes to a widget. Filters out any null\n\t\t * values passed.\n\t\t *\n\t\t * @param classNames the classes to be added to the domNode. These classes must come from\n\t\t * the baseClasses passed into the @theme decorator.\n\t\t * @return A function chain continaing the 'fixed' function and a 'get' finaliser function.\n\t\t * Class names passed to the 'fixed' function can be any string.\n\t\t *\n\t\t */\n\t\tpublic classes(...classNames: (string | null)[]): ClassesFunctionChain {\n\t\t\tif (this._recalculateClasses) {\n\t\t\t\tthis.recalculateThemeClasses();\n\t\t\t}\n\n\t\t\tconst themeable = this;\n\t\t\tfunction classesGetter(this: ClassesFunctionChain) {\n\t\t\t\tconst themeClasses = themeable.getThemeClasses(this.classes);\n\t\t\t\tconst fixedClasses = themeable.getFixedClasses(this.fixedClasses);\n\t\t\t\treturn assign({}, themeable._allClasses, themeClasses, fixedClasses);\n\t\t\t}\n\t\t\tconst classesFunctionChain = {\n\t\t\t\tclasses: classNames,\n\t\t\t\tfixedClasses: [],\n\t\t\t\tfixed(this: ClassesFunctionChain, ...classNames: (string | null)[]) {\n\t\t\t\t\tconst filteredClassNames = <string[]> classNames.filter((className) => className !== null);\n\t\t\t\t\tthis.fixedClasses.push(...filteredClassNames);\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\t\t\t\tget: classesGetter\n\t\t\t};\n\n\t\t\treturn assign(classesGetter.bind(classesFunctionChain), classesFunctionChain);\n\t\t}\n\n\t\t@beforeRender()\n\t\tprotected injectTheme(renderFunc: () => DNode, properties: ThemeableProperties, children: DNode[]): () => DNode {\n\t\t\treturn () => {\n\t\t\t\tconst hasInjectedTheme = this.registries.has(INJECTED_THEME_KEY);\n\t\t\t\tif (hasInjectedTheme) {\n\t\t\t\t\treturn w<ThemeInjector>(INJECTED_THEME_KEY, {\n\t\t\t\t\t\tbind: this,\n\t\t\t\t\t\trender: renderFunc,\n\t\t\t\t\t\tgetProperties: (inject: ThemeInjectorContext, properties: ThemeableProperties): ThemeableProperties => {\n\t\t\t\t\t\t\tif (!properties.theme && this._theme !== properties.injectedTheme) {\n\t\t\t\t\t\t\t\tthis._recalculateClasses = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn { injectedTheme: inject.theme };\n\t\t\t\t\t\t},\n\t\t\t\t\t\tproperties,\n\t\t\t\t\t\tchildren\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn renderFunc();\n\t\t\t};\n\t\t}\n\n\t\t/**\n\t\t * Get theme class object from classNames\n\t\t */\n\t\tprivate getThemeClasses(classNames: string[]): ClassNameFlags  {\n\t\t\treturn classNames\n\t\t\t\t.filter((className) => className !== null)\n\t\t\t\t.reduce((appliedClasses: {}, className: string) => {\n\t\t\t\t\tif (!this._baseThemeClassesReverseLookup[className]) {\n\t\t\t\t\t\tconsole.warn(`Class name: ${className} not found, use chained 'fixed' method instead`);\n\t\t\t\t\t\treturn appliedClasses;\n\t\t\t\t\t}\n\t\t\t\t\tclassName = this._baseThemeClassesReverseLookup[className];\n\t\t\t\t\tif (!this._registeredClassesMap.has(className)) {\n\t\t\t\t\t\tthis.registerThemeClass(className);\n\t\t\t\t\t}\n\t\t\t\t\treturn assign(appliedClasses, this._registeredClassesMap.get(className));\n\t\t\t\t}, {});\n\t\t}\n\n\t\t/**\n\t\t * Get fixed class object from classNames\n\t\t */\n\t\tprivate getFixedClasses(classNames: string[]): ClassNameFlags {\n\t\t\tconst splitClasses = splitClassStrings(classNames);\n\t\t\tthis.appendToAllClassNames(splitClasses);\n\t\t\treturn createClassNameObject(splitClasses, true);\n\t\t}\n\n\t\t/**\n\t\t * Function fired when properties are changed on the widget.\n\t\t *\n\t\t * @param changedPropertyKeys Array of properties that have changed\n\t\t */\n\t\t@onPropertiesChanged()\n\t\tprotected onPropertiesChanged({ changedPropertyKeys }: PropertiesChangeEvent<this, ThemeableProperties>) {\n\t\t\tconst themeChanged = includes(changedPropertyKeys, 'theme');\n\t\t\tconst extraClassesChanged = includes(changedPropertyKeys, 'extraClasses');\n\n\t\t\tif (themeChanged || extraClassesChanged) {\n\t\t\t\tthis._recalculateClasses = true;\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * Adds classes to the internal allClasses property\n\t\t *\n\t\t * @param classNames an array of string class names\n\t\t */\n\t\tprivate appendToAllClassNames(classNames: string[]): void {\n\t\t\tconst negativeClassFlags = createClassNameObject(classNames, false);\n\t\t\tthis._allClasses = assign({}, this._allClasses, negativeClassFlags);\n\t\t}\n\n\t\t/**\n\t\t * Register the classes object for the class name and adds the class to the instances `allClasses` object.\n\t\t *\n\t\t * @param className the name of the class to register.\n\t\t */\n\t\tprivate registerThemeClass(className: string) {\n\t\t\tconst { properties: { extraClasses = {} } } = this;\n\t\t\tconst themeClass = this._theme[className] ? this._theme[className] : this.getBaseThemeClass(className);\n\t\t\tconst extraClassNames = extraClasses[className] ? extraClasses[className].split(' ') : [];\n\t\t\tconst cssClassNames = themeClass.split(' ').concat(extraClassNames);\n\t\t\tconst classesObject = cssClassNames.reduce((classesObject, cssClassName) => {\n\t\t\t\tclassesObject[cssClassName] = true;\n\t\t\t\tthis._allClasses[cssClassName] = false;\n\t\t\t\treturn classesObject;\n\t\t\t}, <any> {});\n\t\t\tthis._registeredClassesMap.set(className, classesObject);\n\t\t}\n\n\t\t/**\n\t\t * Recalculate registered classes for current theme.\n\t\t */\n\t\tprivate recalculateThemeClasses() {\n\t\t\tconst { properties: { injectedTheme = {}, theme = injectedTheme } } = this;\n\t\t\tif (!this._registeredBaseThemes) {\n\t\t\t\tthis._registeredBaseThemes = [ ...this.getDecorator('baseThemeClasses') ].reverse();\n\t\t\t\tthis.checkForDuplicates();\n\t\t\t}\n\t\t\tconst registeredBaseThemeKeys = this._registeredBaseThemes.map((registeredBaseThemeClasses) => {\n\t\t\t\treturn registeredBaseThemeClasses[THEME_KEY];\n\t\t\t});\n\n\t\t\tthis._baseThemeClassesReverseLookup = createThemeClassesLookup(this._registeredBaseThemes);\n\t\t\tthis._theme = registeredBaseThemeKeys.reduce((baseTheme, themeKey) => {\n\t\t\t\treturn assign(baseTheme, theme[themeKey]);\n\t\t\t}, {});\n\n\t\t\tthis._registeredClassesMap.forEach((value, key) => {\n\t\t\t\tthis.registerThemeClass(key);\n\t\t\t});\n\t\t\tthis._recalculateClasses = false;\n\t\t}\n\n\t\t/**\n\t\t * Find the base theme class for the class name\n\t\t */\n\t\tprivate getBaseThemeClass(className: string): string {\n\t\t\tconst registeredBaseTheme = find(this._registeredBaseThemes, (registeredBaseThemeClasses) => {\n\t\t\t\treturn Boolean(registeredBaseThemeClasses[className]);\n\t\t\t});\n\t\t\treturn registeredBaseTheme[className] || '';\n\t\t}\n\n\t\t/**\n\t\t * Check for duplicates across the registered base themes.\n\t\t */\n\t\tprivate checkForDuplicates(): void {\n\t\t\tthis._registeredBaseThemes.forEach((registeredBaseThemeClasses, index) => {\n\t\t\t\tObject.keys(registeredBaseThemeClasses).some((key) => {\n\t\t\t\t\treturn this.isDuplicate(key, registeredBaseThemeClasses);\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\t/**\n\t\t * Search for classname in other base themes\n\t\t */\n\t\tprivate isDuplicate(key: string, originatingBaseTheme: ThemeClasses): boolean {\n\t\t\tlet duplicate = false;\n\t\t\tif (key !== THEME_KEY) {\n\t\t\t\tfor (let i = 0; i < this._registeredBaseThemes.length; i++) {\n\t\t\t\t\tif (originatingBaseTheme === this._registeredBaseThemes[i]) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tif (this._registeredBaseThemes[i][key]) {\n\t\t\t\t\t\tconsole.warn(`Duplicate base theme class key '${key}' detected, this could cause unexpected results`);\n\t\t\t\t\t\tduplicate = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn duplicate;\n\t\t\t}\n\t\t\treturn duplicate;\n\t\t}\n\t}\n\n\treturn Themeable;\n}\n\nexport default ThemeableMixin;\n"]}