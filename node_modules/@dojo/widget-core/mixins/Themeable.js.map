{"version":3,"file":"Themeable.js","sourceRoot":"","sources":["Themeable.ts"],"names":[],"mappings":"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","sourcesContent":["import { assign } from '@dojo/core/lang';\nimport { find } from '@dojo/shim/array';\nimport Map from '@dojo/shim/Map';\nimport { ClassesFunction, Constructor, WidgetProperties } from './../interfaces';\nimport { Registry } from './../Registry';\nimport { Injector } from './../Injector';\nimport { inject } from './../decorators/inject';\nimport { WidgetBase } from './../WidgetBase';\nimport { handleDecorator } from './../decorators/handleDecorator';\nimport { diffProperty } from './../decorators/diffProperty';\nimport { shallow } from './../diff';\n\n/**\n * A representation of the css class names to be applied and\n * removed.\n */\nexport type ClassNameFlags = {\n\t[key: string]: boolean;\n};\n\n/**\n * A lookup object for available class names\n */\nexport type ClassNames = {\n\t[key: string]: string;\n};\n\n/**\n * A lookup object for available widget classes names\n */\nexport interface Theme {\n\t[key: string]: object;\n}\n\n/**\n * Properties required for the themeable mixin\n */\nexport interface ThemeableProperties<T = ClassNames> extends WidgetProperties {\n\tinjectedTheme?: any;\n\ttheme?: Theme;\n\textraClasses?: { [P in keyof T]?: string };\n}\n\n/**\n * Returned by classes function.\n */\nexport interface ClassesFunctionChain {\n\t(): ClassNameFlags;\n\t/**\n\t * The theme classes to be returned when get() is called\n\t */\n\tclasses: string[];\n\t/**\n\t * The fixed classes to be returned when get() is called\n\t */\n\tfixedClasses: string[];\n\t/**\n\t * Function to pass fixed class names that bypass the theming\n\t * process\n\t */\n\tfixed: (...classes: (string | null)[]) => ClassesFunctionChain;\n\t/**\n\t * Finalize function to return the generated class names\n\t */\n\tget: ClassesFunction;\n}\n\nconst THEME_KEY = ' _key';\n\nexport const INJECTED_THEME_KEY = Symbol('theme');\n\n/**\n * Interface for the ThemeableMixin\n */\nexport interface ThemeableMixin<T = ClassNames> {\n\n\t/**\n\t * Processes all the possible classes for the instance with setting the passed class names to\n\t * true.\n\t *\n\t * @param ...classNames an array of class names\n\t * @returns a function chain to `get` or process more classes using `fixed`\n\t */\n\tclasses(...classNames: (string | null)[]): ClassesFunctionChain;\n\n\tproperties: ThemeableProperties<T>;\n}\n\n/**\n * Decorator for base css classes\n */\nexport function theme (theme: {}) {\n\treturn handleDecorator((target) => {\n\t\ttarget.addDecorator('baseThemeClasses', theme);\n\t});\n}\n\n/**\n * Split class strings containing spaces into separate array entries.\n * ie. ['class1 class2', 'class3] -> ['class1', 'class2', 'class3'];\n *\n * @param classes The array of class strings to split.\n * @return the complete classes array including any split classes.\n */\nfunction splitClassStrings(classes: string[]): string[] {\n\treturn classes.reduce((splitClasses: string[], className) => {\n\t\tif (className.indexOf(' ') > -1) {\n\t\t\tsplitClasses.push(...className.split(' '));\n\t\t}\n\t\telse {\n\t\t\tsplitClasses.push(className);\n\t\t}\n\t\treturn splitClasses;\n\t}, []);\n}\n\n/**\n * Returns the class object map based on the class names and whether they are\n * active.\n *\n * @param className an array of string class names\n * @param applied indicates is the class is applied\n */\nfunction createClassNameObject(classNames: string[], applied: boolean) {\n\treturn classNames.reduce((flaggedClassNames: ClassNameFlags, className) => {\n\t\tflaggedClassNames[className] = applied;\n\t\treturn flaggedClassNames;\n\t}, {});\n}\n\n/**\n * Creates a reverse lookup for the classes passed in via the `theme` function.\n *\n * @param classes The baseClasses object\n * @requires\n */\nfunction createThemeClassesLookup(classes: ClassNames[]): ClassNames {\n\treturn classes.reduce((currentClassNames, baseClass) => {\n\t\tObject.keys(baseClass).forEach((key: string) => {\n\t\t\tcurrentClassNames[baseClass[key]] = key;\n\t\t});\n\t\treturn currentClassNames;\n\t}, <ClassNames> {});\n}\n\n/**\n * Convenience function that is given a theme and an optional registry, the theme\n * injector is defined against the registry, returning the theme.\n *\n * @param theme the theme to set\n * @param themeRegistry registry to define the theme injector against. Defaults\n * to the global registry\n *\n * @returns the theme injector used to set the theme\n */\nexport function registerThemeInjector(theme: any, themeRegistry: Registry): Injector {\n\tconst themeInjector = new Injector(theme);\n\tthemeRegistry.defineInjector(INJECTED_THEME_KEY, themeInjector);\n\treturn themeInjector;\n}\n\n/**\n * Function that returns a class decorated with with Themeable functionality\n */\nexport function ThemeableMixin<E, T extends Constructor<WidgetBase<ThemeableProperties<E>>>>(Base: T): Constructor<ThemeableMixin<E>> & T {\n\t@inject({\n\t\tname: INJECTED_THEME_KEY,\n\t\tgetProperties: (theme: Theme, properties: ThemeableProperties): ThemeableProperties  => {\n\t\tif (!properties.theme) {\n\t\t\treturn { theme };\n\t\t}\n\t\treturn {};\n\t}})\n\tclass Themeable extends Base {\n\n\t\tpublic properties: ThemeableProperties<E>;\n\n\t\t/**\n\t\t * The Themeable baseClasses\n\t\t */\n\t\tprivate _registeredBaseThemes: ClassNames[];\n\n\t\t/**\n\t\t * All classes ever seen by the instance\n\t\t */\n\t\tprivate _allClasses: ClassNameFlags = {};\n\n\t\t/**\n\t\t * Reverse lookup of the theme classes\n\t\t */\n\t\tprivate _baseThemeClassesReverseLookup: ClassNames;\n\n\t\t/**\n\t\t * Indicates if classes meta data need to be calculated.\n\t\t */\n\t\tprivate _recalculateClasses = true;\n\n\t\t/**\n\t\t * Map of registered classes\n\t\t */\n\t\tprivate _registeredClassesMap: Map<string, ClassNameFlags> = new Map<string, ClassNameFlags>();\n\n\t\t/**\n\t\t * Loaded theme\n\t\t */\n\t\tprivate _theme: ClassNames = {};\n\n\t\t/**\n\t\t * Function used to add themeable classes to a widget. Returns a chained function 'fixed'\n\t\t * that can be used to pass non-themeable classes to a widget. Filters out any null\n\t\t * values passed.\n\t\t *\n\t\t * @param classNames the classes to be added to the domNode. These classes must come from\n\t\t * the baseClasses passed into the @theme decorator.\n\t\t * @return A function chain containing the 'fixed' function and a 'get' finalizer function.\n\t\t * Class names passed to the 'fixed' function can be any string.\n\t\t *\n\t\t */\n\t\tpublic classes(...classNames: (string | null)[]): ClassesFunctionChain {\n\t\t\tif (this._recalculateClasses) {\n\t\t\t\tthis._recalculateThemeClasses();\n\t\t\t}\n\n\t\t\tconst themeable = this;\n\t\t\tfunction classesGetter(this: ClassesFunctionChain) {\n\t\t\t\tconst themeClasses = themeable._getThemeClasses(this.classes as (keyof E)[]);\n\t\t\t\tconst fixedClasses = themeable._getFixedClasses(this.fixedClasses);\n\t\t\t\treturn assign({}, themeable._allClasses, themeClasses, fixedClasses);\n\t\t\t}\n\t\t\tconst classesFunctionChain = {\n\t\t\t\tclasses: classNames,\n\t\t\t\tfixedClasses: [],\n\t\t\t\tfixed(this: ClassesFunctionChain, ...classNames: (string | null)[]) {\n\t\t\t\t\tconst filteredClassNames = <string[]> classNames.filter((className) => className !== null);\n\t\t\t\t\tthis.fixedClasses.push(...filteredClassNames);\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\t\t\t\tget: classesGetter\n\t\t\t};\n\n\t\t\treturn assign(classesGetter.bind(classesFunctionChain), classesFunctionChain);\n\t\t}\n\n\t\t/**\n\t\t * Function fired when `theme` or `extraClasses` are changed.\n\t\t */\n\t\t@diffProperty('theme', shallow)\n\t\t@diffProperty('extraClasses', shallow)\n\t\tprotected onPropertiesChanged() {\n\t\t\tthis._recalculateClasses = true;\n\t\t}\n\n\t\t/**\n\t\t * Get theme class object from classNames\n\t\t */\n\t\tprivate _getThemeClasses(classNames: (keyof E)[]): ClassNameFlags  {\n\t\t\treturn classNames\n\t\t\t\t.filter((className) => !!className)\n\t\t\t\t.reduce((appliedClasses: {}, className: string) => {\n\t\t\t\t\tif (!this._baseThemeClassesReverseLookup[className]) {\n\t\t\t\t\t\tconsole.warn(`Class name: ${className} not found, use chained 'fixed' method instead`);\n\t\t\t\t\t\treturn appliedClasses;\n\t\t\t\t\t}\n\t\t\t\t\tclassName = this._baseThemeClassesReverseLookup[className];\n\t\t\t\t\tif (!this._registeredClassesMap.has(className)) {\n\t\t\t\t\t\tthis._registerThemeClass(className as keyof E);\n\t\t\t\t\t}\n\t\t\t\t\treturn assign(appliedClasses, this._registeredClassesMap.get(className));\n\t\t\t\t}, {});\n\t\t}\n\n\t\t/**\n\t\t * Get fixed class object from classNames\n\t\t */\n\t\tprivate _getFixedClasses(classNames: string[]): ClassNameFlags {\n\t\t\tconst splitClasses = splitClassStrings(classNames);\n\t\t\tthis._appendToAllClassNames(splitClasses);\n\t\t\treturn createClassNameObject(splitClasses, true);\n\t\t}\n\n\t\t/**\n\t\t * Adds classes to the internal allClasses property\n\t\t *\n\t\t * @param classNames an array of string class names\n\t\t */\n\t\tprivate _appendToAllClassNames(classNames: string[]): void {\n\t\t\tconst negativeClassFlags = createClassNameObject(classNames, false);\n\t\t\tthis._allClasses = assign({}, this._allClasses, negativeClassFlags);\n\t\t}\n\n\t\t/**\n\t\t * Register the classes object for the class name and adds the class to the instances `allClasses` object.\n\t\t *\n\t\t * @param className the name of the class to register.\n\t\t */\n\t\tprivate _registerThemeClass(className: keyof E) {\n\t\t\tconst { properties: { extraClasses = {} } } = this;\n\t\t\tconst themeClass = this._theme[className] ? this._theme[className] : this._getBaseThemeClass(className);\n\t\t\tconst extraClassesClassNames = extraClasses[className];\n\t\t\tconst extraClassesClassNamesArray = extraClassesClassNames ? extraClassesClassNames.split(' ') : [];\n\t\t\tconst cssClassNames = themeClass.split(' ').concat(extraClassesClassNamesArray);\n\t\t\tconst classesObject = cssClassNames.reduce((classesObject, cssClassName) => {\n\t\t\t\tclassesObject[cssClassName] = true;\n\t\t\t\tthis._allClasses[cssClassName] = false;\n\t\t\t\treturn classesObject;\n\t\t\t}, <any> {});\n\t\t\tthis._registeredClassesMap.set(className, classesObject);\n\t\t}\n\n\t\t/**\n\t\t * Recalculate registered classes for current theme.\n\t\t */\n\t\tprivate _recalculateThemeClasses() {\n\t\t\tconst { properties: { injectedTheme = {}, theme = injectedTheme } } = this;\n\t\t\tif (!this._registeredBaseThemes) {\n\t\t\t\tthis._registeredBaseThemes = [ ...this.getDecorator('baseThemeClasses') ];\n\t\t\t\tthis._checkForDuplicates();\n\t\t\t}\n\t\t\tconst registeredBaseThemeKeys = this._registeredBaseThemes.map((registeredBaseThemeClasses) => {\n\t\t\t\treturn registeredBaseThemeClasses[THEME_KEY];\n\t\t\t});\n\n\t\t\tthis._baseThemeClassesReverseLookup = createThemeClassesLookup(this._registeredBaseThemes);\n\t\t\tthis._theme = registeredBaseThemeKeys.reduce((baseTheme, themeKey) => {\n\t\t\t\treturn assign(baseTheme, theme[themeKey]);\n\t\t\t}, {});\n\n\t\t\tthis._registeredClassesMap.forEach((value, key: keyof E) => {\n\t\t\t\tthis._registerThemeClass(key);\n\t\t\t});\n\t\t\tthis._recalculateClasses = false;\n\t\t}\n\n\t\t/**\n\t\t * Find the base theme class for the class name\n\t\t */\n\t\tprivate _getBaseThemeClass(className: string): string {\n\t\t\tconst registeredBaseTheme = find(this._registeredBaseThemes, (registeredBaseThemeClasses) => {\n\t\t\t\treturn Boolean(registeredBaseThemeClasses[className]);\n\t\t\t});\n\t\t\treturn (registeredBaseTheme && registeredBaseTheme[className]) || '';\n\t\t}\n\n\t\t/**\n\t\t * Check for duplicates across the registered base themes.\n\t\t */\n\t\tprivate _checkForDuplicates(): void {\n\t\t\tthis._registeredBaseThemes.forEach((registeredBaseThemeClasses, index) => {\n\t\t\t\tObject.keys(registeredBaseThemeClasses).some((key) => {\n\t\t\t\t\treturn this._isDuplicate(key, registeredBaseThemeClasses);\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\t/**\n\t\t * Search for the class name in other base themes\n\t\t */\n\t\tprivate _isDuplicate(key: string, originatingBaseTheme: ClassNames): boolean {\n\t\t\tlet duplicate = false;\n\t\t\tif (key !== THEME_KEY) {\n\t\t\t\tfor (let i = 0; i < this._registeredBaseThemes.length; i++) {\n\t\t\t\t\tif (originatingBaseTheme === this._registeredBaseThemes[i]) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tif (this._registeredBaseThemes[i][key]) {\n\t\t\t\t\t\tconsole.warn(`Duplicate base theme class key '${key}' detected, this could cause unexpected results`);\n\t\t\t\t\t\tduplicate = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn duplicate;\n\t\t\t}\n\t\t\treturn duplicate;\n\t\t}\n\t}\n\n\treturn Themeable;\n}\n\nexport default ThemeableMixin;\n"]}