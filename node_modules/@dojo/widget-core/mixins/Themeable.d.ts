import { Constructor, WidgetProperties } from './../interfaces';
import { WidgetRegistry } from './../WidgetRegistry';
import { Context } from './../Injector';
import { WidgetBase } from './../WidgetBase';
/**
 * A representation of the css class names to be applied and
 * removed.
 */
export declare type ClassNameFlags = {
    [key: string]: boolean;
};
/**
 * A lookup object for available class names
 */
export declare type ClassNames = {
    [key: string]: string;
};
/**
 * Properties required for the themeable mixin
 */
export interface ThemeableProperties extends WidgetProperties {
    injectedTheme?: any;
    theme?: any;
    extraClasses?: any;
}
/**
 * Returned by classes function.
 */
export interface ClassesFunctionChain {
    (): ClassNameFlags;
    /**
     * The theme classes to be returned when get() is called
     */
    classes: string[];
    /**
     * The fixed classes to be returned when get() is called
     */
    fixedClasses: string[];
    /**
     * Function to pass fixed class names that bypass the theming
     * process
     */
    fixed: (...classes: (string | null)[]) => ClassesFunctionChain;
    /**
     * Finalize function to return the generated class names
     */
    get: () => ClassNameFlags;
}
export declare const INJECTED_THEME_KEY: symbol;
/**
 * Interface for the ThemeableMixin
 */
export interface ThemeableMixin {
    /**
     * Processes all the possible classes for the instance with setting the passed class names to
     * true.
     *
     * @param ...classNames an array of class names
     * @returns a function chain to `get` or process more classes using `fixed`
     */
    classes(...classNames: (string | null)[]): ClassesFunctionChain;
    properties: ThemeableProperties;
}
/**
 * Decorator for base css classes
 */
export declare function theme(theme: {}): (target: any, propertyKey?: string | undefined, descriptor?: PropertyDescriptor | undefined) => void;
/**
 * Convenience function that is given a theme and an optional registry, the theme
 * injector is defined against the registry, returning the theme context.
 *
 * @param theme the theme to set
 * @param themeRegistry registry to define the theme injector against. Defaults
 * to the global registry
 *
 * @returns the theme context instance used to set the theme
 */
export declare function registerThemeInjector(theme: any, themeRegistry?: WidgetRegistry): Context;
/**
 * Function that returns a class decorated with with Themeable functionality
 */
export declare function ThemeableMixin<T extends Constructor<WidgetBase<any>>>(base: T): T & Constructor<ThemeableMixin>;
export default ThemeableMixin;
