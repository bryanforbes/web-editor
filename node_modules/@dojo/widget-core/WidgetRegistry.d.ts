import Promise from '@dojo/shim/Promise';
import { Handle } from '@dojo/interfaces/core';
import Evented, { EventObject, BaseEventedEvents } from '@dojo/core/Evented';
import { WidgetBaseConstructor, RegistryLabel } from './interfaces';
export declare type WidgetBaseConstructorFunction = () => Promise<WidgetBaseConstructor>;
export declare type WidgetRegistryItem = WidgetBaseConstructor | Promise<WidgetBaseConstructor> | WidgetBaseConstructorFunction;
/**
 * Widget base symbol type
 */
export declare const WIDGET_BASE_TYPE: symbol;
export interface WidgetRegistryEventObject extends EventObject {
    action: string;
}
export interface WidgetRegistryListener {
    (event: WidgetRegistryEventObject): void;
}
export interface WidgetRegistryEvents extends BaseEventedEvents {
    (type: RegistryLabel, listener: WidgetRegistryListener | WidgetRegistryListener[]): Handle;
}
/**
 * Widget Registry Interface
 */
export interface WidgetRegistry {
    /**
     * define a WidgetRegistryItem for a specified label
     *
     * @param widgetLabel The label of the widget to register
     * @param registryItem The registry item to define
     */
    define(widgetLabel: RegistryLabel, registryItem: WidgetRegistryItem): void;
    /**
     * Return a WidgetRegistryItem for the given label, null if an entry doesn't exist
     *
     * @param widgetLabel The label of the widget to return
     * @returns The WidgetRegistryItem for the widgetLabel, `null` if no entry exists
     */
    get(widgetLabel: RegistryLabel): WidgetBaseConstructor | null;
    /**
     * Returns a boolean if an entry for the label exists
     *
     * @param widgetLabel The label to search for
     * @returns boolean indicating if a widget registry item exists
     */
    has(widgetLabel: RegistryLabel): boolean;
}
/**
 * Checks is the item is a subclass of WidgetBase (or a WidgetBase)
 *
 * @param item the item to check
 * @returns true/false indicating if the item is a WidgetBaseConstructor
 */
export declare function isWidgetBaseConstructor(item: any): item is WidgetBaseConstructor;
/**
 * The WidgetRegistry implementation
 */
export declare class WidgetRegistry extends Evented implements WidgetRegistry {
    on: WidgetRegistryEvents;
    /**
     * internal map of labels and WidgetRegistryItem
     */
    private registry;
    /**
     * Emit loaded event for registry label
     */
    private emitLoadedEvent(widgetLabel);
}
export default WidgetRegistry;
