{"version":3,"file":"Base.js","sourceRoot":"","sources":["Base.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;IAAA,sDAAqD;IACrD,sCAAiC;IAGjC;QAA0B,wBAAW;QAMpC,cAAY,UAAgC;YAA5C,YACC,iBAAO,SAIP;YAPO,wBAAkB,GAAG,IAAI,aAAG,EAAmB,CAAC;YAKvD,KAAI,CAAC,WAAW,GAAG,UAAU,CAAC,UAAU,CAAC;YACzC,KAAI,CAAC,WAAW,GAAG,UAAU,CAAC,WAAW,CAAC;;QAC3C,CAAC;QAEM,kBAAG,GAAV,UAAW,GAAoB;YAC9B,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QAClC,CAAC;QAES,sBAAO,GAAjB,UAAkB,GAAoB;YAAtC,iBAgBC;YAfA,IAAM,SAAS,GAAG,KAAG,GAAK,CAAC;YAC3B,IAAM,IAAI,GAAG,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;YAE7C,EAAE,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;gBACtD,IAAM,QAAM,GAAG,IAAI,CAAC,WAAW,CAAC,EAAE,CAAC,SAAS,EAAE;oBAC7C,QAAM,CAAC,OAAO,EAAE,CAAC;oBACjB,KAAI,CAAC,kBAAkB,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;oBAC1C,KAAI,CAAC,UAAU,EAAE,CAAC;gBACnB,CAAC,CAAC,CAAC;gBAEH,IAAI,CAAC,GAAG,CAAC,QAAM,CAAC,CAAC;gBACjB,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;YACxC,CAAC;YAED,MAAM,CAAC,IAAI,CAAC;QACb,CAAC;QAES,yBAAU,GAApB;YACC,IAAI,CAAC,WAAW,EAAE,CAAC;QACpB,CAAC;QACF,WAAC;IAAD,CAAC,AAtCD,CAA0B,yBAAW,GAsCpC;IAtCY,oBAAI;IAwCjB,kBAAe,IAAI,CAAC","sourcesContent":["import { Destroyable } from '@dojo/core/Destroyable';\nimport Set from '@dojo/shim/Set';\nimport { WidgetMetaBase, WidgetMetaProperties, NodeHandlerInterface } from '../interfaces';\n\nexport class Base extends Destroyable implements WidgetMetaBase {\n\tprivate _invalidate: () => void;\n\tprotected nodeHandler: NodeHandlerInterface;\n\n\tprivate _requestedNodeKeys = new Set<string | number>();\n\n\tconstructor(properties: WidgetMetaProperties) {\n\t\tsuper();\n\n\t\tthis._invalidate = properties.invalidate;\n\t\tthis.nodeHandler = properties.nodeHandler;\n\t}\n\n\tpublic has(key: string | number): boolean {\n\t\treturn this.nodeHandler.has(key);\n\t}\n\n\tprotected getNode(key: string | number): HTMLElement | undefined {\n\t\tconst stringKey = `${key}`;\n\t\tconst node = this.nodeHandler.get(stringKey);\n\n\t\tif (!node && !this._requestedNodeKeys.has(stringKey)) {\n\t\t\tconst handle = this.nodeHandler.on(stringKey, () => {\n\t\t\t\thandle.destroy();\n\t\t\t\tthis._requestedNodeKeys.delete(stringKey);\n\t\t\t\tthis.invalidate();\n\t\t\t});\n\n\t\t\tthis.own(handle);\n\t\t\tthis._requestedNodeKeys.add(stringKey);\n\t\t}\n\n\t\treturn node;\n\t}\n\n\tprotected invalidate(): void {\n\t\tthis._invalidate();\n\t}\n}\n\nexport default Base;\n"]}