{"version":3,"file":"NodeHandler.js","sourceRoot":"","sources":["NodeHandler.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;IAAA,8CAA6C;IAE7C,sCAAiC;IAGjC;;;;OAIG;IACH,IAAY,aAGX;IAHD,WAAY,aAAa;QACxB,wCAAuB,CAAA;QACvB,kCAAiB,CAAA;IAClB,CAAC,EAHW,aAAa,GAAb,qBAAa,KAAb,qBAAa,QAGxB;IAED;QAAiC,+BAAO;QAAxC;YAAA,qEAiCC;YA/BQ,cAAQ,GAAG,IAAI,aAAG,EAAuB,CAAC;;QA+BnD,CAAC;QA7BO,yBAAG,GAAV,UAAW,GAAW;YACrB,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QAC/B,CAAC;QAEM,yBAAG,GAAV,UAAW,GAAW;YACrB,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QAC/B,CAAC;QAEM,yBAAG,GAAV,UAAW,OAAoB,EAAE,UAA2B;YAC3D,IAAM,GAAG,GAAG,MAAM,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;YACnC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;YAChC,IAAI,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,GAAG,EAAE,CAAC,CAAC;QAC1B,CAAC;QAEM,6BAAO,GAAd,UAAe,OAAoB,EAAE,UAA2B;YAC/D,EAAE,CAAC,CAAC,UAAU,IAAI,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC;gBAClC,IAAI,CAAC,GAAG,CAAC,OAAO,EAAE,UAAU,CAAC,CAAC;YAC/B,CAAC;YAED,IAAI,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,aAAa,CAAC,MAAM,EAAE,CAAC,CAAC;QAC3C,CAAC;QAEM,kCAAY,GAAnB;YACC,IAAI,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,aAAa,CAAC,SAAS,EAAE,CAAC,CAAC;QAC9C,CAAC;QAEM,2BAAK,GAAZ;YACC,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,CAAC;QACvB,CAAC;QACF,kBAAC;IAAD,CAAC,AAjCD,CAAiC,iBAAO,GAiCvC;IAjCY,kCAAW;IAmCxB,kBAAe,WAAW,CAAC","sourcesContent":["import { Evented } from '@dojo/core/Evented';\nimport { VNodeProperties } from '@dojo/interfaces/vdom';\nimport Map from '@dojo/shim/Map';\nimport { NodeHandlerInterface } from './interfaces';\n\n/**\n * Enum to identify the type of event.\n * Listening to 'Projector' will notify when projector is created or updated\n * Listening to 'Widget' will notifiy when widget root is created or updated\n */\nexport enum NodeEventType {\n\tProjector = 'Projector',\n\tWidget = 'Widget'\n}\n\nexport class NodeHandler extends Evented implements NodeHandlerInterface {\n\n\tprivate _nodeMap = new Map<string, HTMLElement>();\n\n\tpublic get(key: string): HTMLElement | undefined {\n\t\treturn this._nodeMap.get(key);\n\t}\n\n\tpublic has(key: string): boolean {\n\t\treturn this._nodeMap.has(key);\n\t}\n\n\tpublic add(element: HTMLElement, properties: VNodeProperties): void {\n\t\tconst key = String(properties.key);\n\t\tthis._nodeMap.set(key, element);\n\t\tthis.emit({ type: key });\n\t}\n\n\tpublic addRoot(element: HTMLElement, properties: VNodeProperties): void {\n\t\tif (properties && properties.key) {\n\t\t\tthis.add(element, properties);\n\t\t}\n\n\t\tthis.emit({ type: NodeEventType.Widget });\n\t}\n\n\tpublic addProjector(): void {\n\t\tthis.emit({ type: NodeEventType.Projector });\n\t}\n\n\tpublic clear(): void {\n\t\tthis._nodeMap.clear();\n\t}\n}\n\nexport default NodeHandler;\n"]}