var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "@dojo/shim/Promise", "@dojo/shim/Map", "@dojo/shim/Symbol", "@dojo/core/Evented"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var Promise_1 = require("@dojo/shim/Promise");
    var Map_1 = require("@dojo/shim/Map");
    var Symbol_1 = require("@dojo/shim/Symbol");
    var Evented_1 = require("@dojo/core/Evented");
    /**
     * Widget base symbol type
     */
    exports.WIDGET_BASE_TYPE = Symbol_1.default('Widget Base');
    /**
     * Checks is the item is a subclass of WidgetBase (or a WidgetBase)
     *
     * @param item the item to check
     * @returns true/false indicating if the item is a WidgetBaseConstructor
     */
    function isWidgetBaseConstructor(item) {
        return Boolean(item && item._type === exports.WIDGET_BASE_TYPE);
    }
    exports.isWidgetBaseConstructor = isWidgetBaseConstructor;
    /**
     * The WidgetRegistry implementation
     */
    var WidgetRegistry = (function (_super) {
        __extends(WidgetRegistry, _super);
        function WidgetRegistry() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            /**
             * internal map of labels and WidgetRegistryItem
             */
            _this.registry = new Map_1.default();
            return _this;
        }
        /**
         * Emit loaded event for registry label
         */
        WidgetRegistry.prototype.emitLoadedEvent = function (widgetLabel) {
            this.emit({
                type: widgetLabel,
                action: 'loaded'
            });
        };
        WidgetRegistry.prototype.has = function (widgetLabel) {
            return this.registry.has(widgetLabel);
        };
        WidgetRegistry.prototype.define = function (widgetLabel, item) {
            var _this = this;
            if (this.registry.has(widgetLabel)) {
                throw new Error("widget has already been registered for '" + widgetLabel.toString() + "'");
            }
            this.registry.set(widgetLabel, item);
            if (item instanceof Promise_1.default) {
                item.then(function (widgetCtor) {
                    _this.registry.set(widgetLabel, widgetCtor);
                    _this.emitLoadedEvent(widgetLabel);
                    return widgetCtor;
                }, function (error) {
                    throw error;
                });
            }
            else {
                this.emitLoadedEvent(widgetLabel);
            }
        };
        WidgetRegistry.prototype.get = function (widgetLabel) {
            var _this = this;
            if (!this.has(widgetLabel)) {
                return null;
            }
            var item = this.registry.get(widgetLabel);
            if (isWidgetBaseConstructor(item)) {
                return item;
            }
            if (item instanceof Promise_1.default) {
                return null;
            }
            var promise = item();
            this.registry.set(widgetLabel, promise);
            promise.then(function (widgetCtor) {
                _this.registry.set(widgetLabel, widgetCtor);
                _this.emitLoadedEvent(widgetLabel);
                return widgetCtor;
            }, function (error) {
                throw error;
            });
            return null;
        };
        return WidgetRegistry;
    }(Evented_1.default));
    exports.WidgetRegistry = WidgetRegistry;
    exports.default = WidgetRegistry;
});
//# sourceMappingURL=WidgetRegistry.js.map