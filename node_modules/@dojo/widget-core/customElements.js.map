{"version":3,"file":"customElements.js","sourceRoot":"","sources":["customElements.ts"],"names":[],"mappings":"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","sourcesContent":["import { assign } from '@dojo/core/lang';\nimport { from as arrayFrom } from '@dojo/shim/array';\nimport global from '@dojo/core/global';\nimport { WidgetBaseInterface, WidgetProperties, Constructor, DNode } from './interfaces';\nimport { WidgetBase } from './WidgetBase';\nimport { w } from './d';\nimport { ProjectorMixin } from './mixins/Projector';\nimport DomWrapper from './util/DomWrapper';\n\n/**\n * @type CustomElementAttributeDescriptor\n *\n * Describes a custom element attribute\n *\n * @property {string}       attributeName   The name of the attribute on the DOM element\n * @property {string?}      propertyName    The name of the property on the widget\n * @property {Function?}    value           A function that takes a string or null value, and returns a new value. The widget's property will be set to the new value.\n */\nexport interface CustomElementAttributeDescriptor {\n\tattributeName: string;\n\tpropertyName?: string;\n\tvalue?: (value: string | null) => any;\n}\n\n/**\n * @type CustomElementPropertyDescriptor\n *\n * Describes a widget property exposed via a custom element\n *\n * @property {string}       propertyName        The name of the property on the DOM element\n * @property {string?}      widgetPropertyName  The name of the property on the widget\n * @property {Function?}    getValue            A transformation function on the widget's property value\n * @property {Function?}    setValue            A transformation function on the DOM elements property value\n */\nexport interface CustomElementPropertyDescriptor {\n\tpropertyName: string;\n\twidgetPropertyName?: string;\n\tgetValue?: (value: any) => any;\n\tsetValue?: (value: any) => any;\n}\n\n/**\n * @type CustomElementEventDescriptor\n *\n * Describes a custom element event\n *\n * @property    {string}    propertyName    The name of the property on the widget that takes a function\n * @property    {string}    eventName       The type of the event to emit (it will be a CustomEvent object of this type)\n */\nexport interface CustomElementEventDescriptor {\n\tpropertyName: string;\n\teventName: string;\n}\n\n/**\n * Defines a custom element intializing function. Passes in initial properties so they can be extended\n * by the initializer.\n */\nexport interface CustomElementInitializer {\n\t(properties: WidgetProperties): void;\n}\n\n/**\n * @type CustomElementDescriptor\n *\n * Describes a custom element.\n *\n * @property    {string}                                tagName         \tThe tag name to register this widget under. Tag names must contain a \"-\"\n * @property    {WidgetConstructor}                     widgetConstructor   A widget Constructor that will return the widget to be wrapped in a custom element\n * @property    {CustomElementAttributeDescriptor[]?}   attributes     \t\tA list of attributes to define on this element\n * @property    {CustomElementPropertyDescriptor[]?}    properties      \tA list of properties to define on this element\n * @property    {CustomElementEventDescriptor[]?}       events          \tA list of events to expose on this element\n * @property    {CustomElementInitializer?}             initialization  \tA method to run to set custom properties on the wrapped widget\n */\nexport interface CustomElementDescriptor {\n\t/**\n\t * The name of the custom element tag\n\t */\n\ttagName: string;\n\n\t/**\n\t * Widget constructor that will create the widget\n\t */\n\twidgetConstructor: Constructor<WidgetBase<WidgetProperties>>;\n\n\t/**\n\t * List of attributes on the custom element to map to widget properties\n\t */\n\tattributes?: CustomElementAttributeDescriptor[];\n\n\t/**\n\t * List of widget properties to expose as properties on the custom element\n\t */\n\tproperties?: CustomElementPropertyDescriptor[];\n\n\t/**\n\t * List of events to expose\n\t */\n\tevents?: CustomElementEventDescriptor[];\n\n\t/**\n\t * Initialization function called before the widget is created (for custom property setting)\n\t */\n\tinitialization?: CustomElementInitializer;\n}\n\n/**\n * @type CustomElement\n *\n * A custom element extends upon a regular HTMLElement but adds fields for describing and wrapping a widget constructor.\n *\n * @property    {WidgetConstructor}\t\t\tgetWidgetConstructor\tReturn the widget constructor for this element\n * @property    {CustomElementDescriptor}\tgetDescriptor       \tReturn the element descriptor for this element\n * @property    {Widget}\t\t\t\t\tgetWidgetInstance   \tReturn the widget instance that this element wraps\n * @property\t\t\t\t\t\t\t\tsetWidgetInstance   \tSet the widget instance for this element\n */\nexport interface CustomElement extends HTMLElement {\n\tgetWidgetConstructor(): Constructor<WidgetBase<WidgetProperties>>;\n\tgetDescriptor(): CustomElementDescriptor;\n\tgetWidgetInstance(): WidgetBaseInterface<any>;\n\tsetWidgetInstance(instance: WidgetBaseInterface<any>): void;\n}\n\nfunction getWidgetPropertyFromAttribute(attributeName: string, attributeValue: string | null, descriptor: CustomElementAttributeDescriptor): [ string, any ] {\n\tlet { propertyName = attributeName, value = attributeValue } = descriptor;\n\n\tif (typeof value === 'function') {\n\t\tvalue = value(attributeValue);\n\t}\n\n\treturn [ propertyName, value ];\n}\n\nlet customEventClass = global.CustomEvent;\n\nif (typeof customEventClass !== 'function') {\n\tconst customEvent = function (event: string, params: any) {\n\t\tparams = params || { bubbles: false, cancelable: false, detail: undefined };\n\t\tconst evt = document.createEvent('CustomEvent');\n\t\tevt.initCustomEvent(event, params.bubbles, params.cancelable, params.detail);\n\t\treturn evt;\n\t};\n\n\tif (global.Event) {\n\t\tcustomEvent.prototype = global.Event.prototype;\n\t}\n\n\tcustomEventClass = customEvent;\n}\n\n/**\n * Called by HTMLElement subclass to initialize itself with the appropriate attributes/properties/events.\n *\n * @param {CustomElement} element\n */\nexport function initializeElement(element: CustomElement) {\n\tlet initialProperties: any = {};\n\n\tconst { attributes = [], events = [], properties = [], initialization } = element.getDescriptor();\n\n\tattributes.forEach(attribute => {\n\t\tconst attributeName = attribute.attributeName;\n\n\t\tconst [ propertyName, propertyValue ] = getWidgetPropertyFromAttribute(attributeName, element.getAttribute(attributeName), attribute);\n\t\tinitialProperties[ propertyName ] = propertyValue;\n\t});\n\n\tlet customProperties: PropertyDescriptorMap = {};\n\n\tattributes.reduce((properties, attribute) => {\n\t\tconst { propertyName = attribute.attributeName } = attribute;\n\n\t\tproperties[ propertyName ] = {\n\t\t\tget() {\n\t\t\t\treturn element.getWidgetInstance().properties[ propertyName ];\n\t\t\t},\n\t\t\tset(value: any) {\n\t\t\t\tconst [ propertyName, propertyValue ] = getWidgetPropertyFromAttribute(attribute.attributeName, value, attribute);\n\t\t\t\telement.getWidgetInstance().__setProperties__(assign({}, element.getWidgetInstance().properties, {\n\t\t\t\t\t[propertyName]: propertyValue\n\t\t\t\t}));\n\t\t\t}\n\t\t};\n\n\t\treturn properties;\n\t}, customProperties);\n\n\tproperties.reduce((properties, property) => {\n\t\tconst { propertyName, getValue, setValue } = property;\n\t\tconst { widgetPropertyName = propertyName } = property;\n\n\t\tproperties[ propertyName ] = {\n\t\t\tget() {\n\t\t\t\tconst value = element.getWidgetInstance().properties[ widgetPropertyName ];\n\t\t\t\treturn getValue ? getValue(value) : value;\n\t\t\t},\n\n\t\t\tset(value: any) {\n\t\t\t\telement.getWidgetInstance().__setProperties__(assign(\n\t\t\t\t\t{},\n\t\t\t\t\telement.getWidgetInstance().properties,\n\t\t\t\t\t{ [widgetPropertyName]: setValue ? setValue(value) : value }\n\t\t\t\t));\n\t\t\t}\n\t\t};\n\n\t\treturn properties;\n\t}, customProperties);\n\n\tObject.defineProperties(element, customProperties);\n\n\t// define events\n\tevents.forEach((event) => {\n\t\tconst { propertyName, eventName } = event;\n\n\t\tinitialProperties[ propertyName ] = (event: any) => {\n\t\t\telement.dispatchEvent(new customEventClass(eventName, {\n\t\t\t\tbubbles: false,\n\t\t\t\tdetail: event\n\t\t\t}));\n\t\t};\n\t});\n\n\t// find children\n\tlet children: DNode[] = [];\n\n\tarrayFrom(element.children).forEach((childNode: HTMLElement, index: number) => {\n\t\tconst DomElement = DomWrapper(childNode);\n\t\tchildren.push(w(DomElement, {\n\t\t\tkey: `child-${index}`\n\t\t}));\n\t});\n\n\tif (initialization) {\n\t\tinitialization.call(element, initialProperties);\n\t}\n\n\tarrayFrom(element.children).forEach((childNode: HTMLElement) => {\n\t\telement.removeChild(childNode);\n\t});\n\n\tconst projector = ProjectorMixin(element.getWidgetConstructor());\n\n\tconst widgetInstance = new projector();\n\twidgetInstance.__setProperties__(initialProperties);\n\twidgetInstance.__setChildren__(children);\n\telement.setWidgetInstance(widgetInstance);\n\n\treturn function() {\n\t\twidgetInstance.append(element);\n\t};\n}\n\n/**\n * Called by HTMLElement subclass when an HTML attribute has changed.\n *\n * @param {CustomElement}   element     The element whose attributes are being watched\n * @param {string}          name        The name of the attribute\n * @param {string?}         newValue    The new value of the attribute\n * @param {string?}         oldValue    The old value of the attribute\n */\nexport function handleAttributeChanged(element: CustomElement, name: string, newValue: string | null, oldValue: string | null) {\n\tconst attributes = element.getDescriptor().attributes || [];\n\n\tattributes.forEach((attribute) => {\n\t\tif (attribute.attributeName === name) {\n\t\t\tconst [ propertyName, propertyValue ] = getWidgetPropertyFromAttribute(name, newValue, attribute);\n\t\t\telement.getWidgetInstance().__setProperties__(assign(\n\t\t\t\t{},\n\t\t\t\telement.getWidgetInstance().properties,\n\t\t\t\t{ [propertyName]: propertyValue }\n\t\t\t));\n\t\t}\n\t});\n}\n"]}