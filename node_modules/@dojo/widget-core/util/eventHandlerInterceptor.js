(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "@dojo/shim/array"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var array_1 = require("@dojo/shim/array");
    exports.eventHandlers = [
        'onblur',
        'onchange',
        'onclick',
        'ondblclick',
        'onfocus',
        'oninput',
        'onkeydown',
        'onkeypress',
        'onkeyup',
        'onload',
        'onmousedown',
        'onmouseenter',
        'onmouseleave',
        'onmousemove',
        'onmouseout',
        'onmouseover',
        'onmouseup',
        'onmousewheel',
        'onscroll',
        'onsubmit'
    ];
    function eventHandlerInterceptor(propertyName, eventHandler, domNode, properties) {
        var _this = this;
        if (array_1.includes(exports.eventHandlers, propertyName)) {
            return function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                return eventHandler.apply(properties.bind || this, args);
            };
        }
        else {
            // remove "on" from event name
            var eventName = propertyName.substr(2);
            domNode.addEventListener(eventName, function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                eventHandler.apply(properties.bind || _this, args);
            });
        }
    }
    exports.default = eventHandlerInterceptor;
});
//# sourceMappingURL=eventHandlerInterceptor.js.map