{"version":3,"file":"WidgetRegistry.js","sourceRoot":"","sources":["WidgetRegistry.ts"],"names":[],"mappings":"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","sourcesContent":["import Promise from '@dojo/shim/Promise';\nimport Map from '@dojo/shim/Map';\nimport Symbol from '@dojo/shim/Symbol';\nimport { Handle } from '@dojo/interfaces/core';\nimport { BaseEventedEvents, Evented, EventObject } from '@dojo/core/Evented';\nimport { Constructor, RegistryLabel, WidgetBaseConstructor, WidgetBaseInterface } from './interfaces';\n\nexport type WidgetBaseConstructorFunction = () => Promise<WidgetBaseConstructor>;\n\nexport type WidgetRegistryItem = WidgetBaseConstructor | Promise<WidgetBaseConstructor> | WidgetBaseConstructorFunction;\n\n/**\n * Widget base symbol type\n */\nexport const WIDGET_BASE_TYPE = Symbol('Widget Base');\n\nexport interface WidgetRegistryEventObject extends EventObject {\n\taction: string;\n}\n\nexport interface WidgetRegistryListener {\n\t(event: WidgetRegistryEventObject): void;\n}\n\nexport interface WidgetRegistryEvents extends BaseEventedEvents {\n\t(type: RegistryLabel, listener: WidgetRegistryListener | WidgetRegistryListener[]): Handle;\n}\n\n/**\n * Widget Registry Interface\n */\nexport interface WidgetRegistry {\n\n\t/**\n\t * define a WidgetRegistryItem for a specified label\n\t *\n\t * @param widgetLabel The label of the widget to register\n\t * @param registryItem The registry item to define\n\t */\n\tdefine(widgetLabel: RegistryLabel, registryItem: WidgetRegistryItem): void;\n\n\t/**\n\t * Return a WidgetRegistryItem for the given label, null if an entry doesn't exist\n\t *\n\t * @param widgetLabel The label of the widget to return\n\t * @returns The WidgetRegistryItem for the widgetLabel, `null` if no entry exists\n\t */\n\tget<T extends WidgetBaseInterface = WidgetBaseInterface>(widgetLabel: RegistryLabel): Constructor<T> | null;\n\n\t/**\n\t * Returns a boolean if an entry for the label exists\n\t *\n\t * @param widgetLabel The label to search for\n\t * @returns boolean indicating if a widget registry item exists\n\t */\n\thas(widgetLabel: RegistryLabel): boolean;\n}\n\n/**\n * Checks is the item is a subclass of WidgetBase (or a WidgetBase)\n *\n * @param item the item to check\n * @returns true/false indicating if the item is a WidgetBaseConstructor\n */\nexport function isWidgetBaseConstructor<T extends WidgetBaseInterface>(item: any): item is Constructor<T> {\n\treturn Boolean(item && item._type === WIDGET_BASE_TYPE);\n}\n\n/**\n * The WidgetRegistry implementation\n */\nexport class WidgetRegistry extends Evented implements WidgetRegistry {\n\n\tpublic on: WidgetRegistryEvents;\n\n\t/**\n\t * internal map of labels and WidgetRegistryItem\n\t */\n\tprivate _registry: Map<RegistryLabel, WidgetRegistryItem> = new Map<RegistryLabel, WidgetRegistryItem>();\n\n\t/**\n\t * Emit loaded event for registry label\n\t */\n\tprivate emitLoadedEvent(widgetLabel: RegistryLabel): void {\n\t\tthis.emit({\n\t\t\ttype: widgetLabel,\n\t\t\taction: 'loaded'\n\t\t});\n\t}\n\n\tpublic has(widgetLabel: RegistryLabel): boolean {\n\t\treturn this._registry.has(widgetLabel);\n\t}\n\n\tpublic define(widgetLabel: RegistryLabel, item: WidgetRegistryItem): void {\n\t\tif (this._registry.has(widgetLabel)) {\n\t\t\tthrow new Error(`widget has already been registered for '${widgetLabel.toString()}'`);\n\t\t}\n\n\t\tthis._registry.set(widgetLabel, item);\n\n\t\tif (item instanceof Promise) {\n\t\t\titem.then((widgetCtor) => {\n\t\t\t\tthis._registry.set(widgetLabel, widgetCtor);\n\t\t\t\tthis.emitLoadedEvent(widgetLabel);\n\t\t\t\treturn widgetCtor;\n\t\t\t}, (error) => {\n\t\t\t\tthrow error;\n\t\t\t});\n\t\t}\n\t\telse {\n\t\t\tthis.emitLoadedEvent(widgetLabel);\n\t\t}\n\t}\n\n\tpublic get<T extends WidgetBaseInterface = WidgetBaseInterface>(widgetLabel: RegistryLabel): Constructor<T> | null {\n\t\tif (!this.has(widgetLabel)) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst item = this._registry.get(widgetLabel);\n\n\t\tif (isWidgetBaseConstructor<T>(item)) {\n\t\t\treturn item;\n\t\t}\n\n\t\tif (item instanceof Promise) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst promise = (<WidgetBaseConstructorFunction> item)();\n\t\tthis._registry.set(widgetLabel, promise);\n\n\t\tpromise.then((widgetCtor) => {\n\t\t\tthis._registry.set(widgetLabel, widgetCtor);\n\t\t\tthis.emitLoadedEvent(widgetLabel);\n\t\t\treturn widgetCtor;\n\t\t}, (error) => {\n\t\t\tthrow error;\n\t\t});\n\n\t\treturn null;\n\t}\n}\n\nexport default WidgetRegistry;\n"]}