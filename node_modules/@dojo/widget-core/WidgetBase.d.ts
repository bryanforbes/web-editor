import { Evented, BaseEventedEvents } from '@dojo/core/Evented';
import { EventedListenerOrArray } from '@dojo/interfaces/bases';
import { Handle } from '@dojo/interfaces/core';
import { VNode } from '@dojo/interfaces/vdom';
import { DiffType } from './diff';
import { DNode, WidgetProperties, WidgetBaseInterface, PropertiesChangeEvent, HNode, WNode } from './interfaces';
import RegistryHandler from './RegistryHandler';
export { DiffType };
export interface InternalWNode extends WNode {
    properties: {
        bind: any;
    };
}
export interface InternalHNode extends HNode {
    properties: {
        bind: any;
    };
}
export interface WidgetBaseEvents<P extends WidgetProperties> extends BaseEventedEvents {
    (type: 'properties:changed', handler: EventedListenerOrArray<WidgetBase<P>, PropertiesChangeEvent<WidgetBase<P>, P>>): Handle;
}
/**
 * Decorator that can be used to register a function to run as an aspect to `render`
 */
export declare function afterRender(method: Function): (target: any) => void;
export declare function afterRender(): (target: any, propertyKey: string) => void;
/**
 * Decorator that can be used to register a reducer function to run as an aspect before to `render`
 */
export declare function beforeRender(method: Function): (target: any) => void;
export declare function beforeRender(): (target: any, propertyKey: string) => void;
/**
 * Decorator that can be used to register a function as a specific property diff
 *
 * @param propertyName  The name of the property of which the diff function is applied
 * @param diffType      The diff type, default is DiffType.AUTO.
 * @param diffFunction  A diff function to run if diffType if DiffType.CUSTOM
 */
export declare function diffProperty(propertyName: string, diffType?: DiffType, diffFunction?: Function): (target: any, propertyKey?: string | undefined, descriptor?: PropertyDescriptor | undefined) => void;
/**
 * Decorator used to register listeners to the `properties:changed` event.
 */
export declare function onPropertiesChanged(method: Function): (target: any) => void;
export declare function onPropertiesChanged(): (target: any, propertyKey: any) => void;
/**
 * Generic decorator handler to take care of whether or not the decorator was called at the class level
 * or the method level.
 *
 * @param handler
 */
export declare function handleDecorator(handler: (target: any, propertyKey?: string) => void): (target: any, propertyKey?: string | undefined, descriptor?: PropertyDescriptor | undefined) => void;
/**
 * Main widget base for all widgets to extend
 */
export declare class WidgetBase<P extends WidgetProperties = WidgetProperties, C extends DNode = DNode> extends Evented implements WidgetBaseInterface<P, C> {
    /**
     * static identifier
     */
    static _type: symbol;
    /**
     * on for the events defined for widget base
     */
    on: WidgetBaseEvents<P>;
    /**
     * children array
     */
    private _children;
    /**
     * marker indicating if the widget requires a render
     */
    private _dirty;
    /**
     * cachedVNode from previous render
     */
    private _cachedVNode?;
    /**
     * internal widget properties
     */
    private _properties;
    /**
     * properties from the previous render
     */
    private _previousProperties;
    /**
     * cached chldren map for instance management
     */
    private _cachedChildrenMap;
    /**
     * map of specific property diff functions
     */
    private _diffPropertyFunctionMap;
    /**
     * map of decorators that are applied to this widget
     */
    private _decoratorCache;
    /**
     * set of render decorators
     */
    private _renderDecorators;
    private _registries;
    /**
     * Map of functions properties for the bound function
     */
    private _bindFunctionPropertyMap;
    private _renderState;
    /**
     * @constructor
     */
    constructor();
    /**
     * A render decorator that registers vnode callbacks for 'afterCreate' and
     * 'afterUpdate' that will in turn call lifecycle methods onElementCreated and onElementUpdated.
     */
    protected attachLifecycleCallbacks(node: DNode): DNode;
    protected decorateBind(node: DNode): DNode;
    /**
     * vnode afterCreate callback that calls the onElementCreated lifecycle method.
     */
    private afterCreateCallback(element, projectionOptions, vnodeSelector, properties, children);
    /**
     * vnode afterUpdate callback that calls the onElementUpdated lifecycle method.
     */
    private afterUpdateCallback(element, projectionOptions, vnodeSelector, properties, children);
    /**
     * Widget lifecycle method that is called whenever a dom node is created for a vnode.
     * Override this method to access the dom nodes that were inserted into the dom.
     * @param element The dom node represented by the vdom node.
     * @param key The vdom node's key.
     */
    protected onElementCreated(element: Element, key: string): void;
    /**
     * Widget lifecycle method that is called whenever a dom node that is associated with a vnode is updated.
     * Note: this method is dependant on the Maquette afterUpdate callback which is called if a dom
     * node might have been updated.  Maquette does not guarantee the dom node was updated.
     * Override this method to access the dom node.
     * @param element The dom node represented by the vdom node.
     * @param key The vdom node's key.
     */
    protected onElementUpdated(element: Element, key: string): void;
    readonly properties: Readonly<P>;
    __setProperties__(properties: P): void;
    readonly children: (C | null)[];
    __setChildren__(children: (C | null)[]): void;
    __render__(): VNode | string | null;
    invalidate(): void;
    protected render(): DNode;
    /**
     * Function to add decorators to WidgetBase
     *
     * @param decoratorKey The key of the decorator
     * @param value The value of the decorator
     */
    protected addDecorator(decoratorKey: string, value: any): void;
    /**
     * Function to build the list of decorators from the global decorator map.
     *
     * @param decoratorKey  The key of the decorator
     * @return An array of decorator values
     * @private
     */
    private _buildDecoratorList(decoratorKey);
    /**
     * Function to retrieve decorator values
     *
     * @param decoratorKey The key of the decorator
     * @returns An array of decorator values
     */
    protected getDecorator(decoratorKey: string): any[];
    /**
     * Binds unbound property functions to the specified `bind` property
     *
     * @param properties properties to check for functions
     */
    private bindFunctionProperties(properties);
    protected readonly registries: RegistryHandler;
    /**
     * Process a structure of DNodes into VNodes, string or null. `null` results are filtered.
     *
     * @param dNode the dnode to process
     * @returns a VNode, string or null
     */
    private dNodeToVNode(dNode);
    /**
     * Manage widget instances after render processing
     */
    private manageDetachedChildren();
}
export default WidgetBase;
