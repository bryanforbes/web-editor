{"version":3,"file":"Injector.js","sourceRoot":"","sources":["Injector.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAAA,wCAAyC;IACzC,2CAAmG;IACnG,yBAAiD;IAwBjD;;OAEG;IACU,QAAA,cAAc,GAAY;QACtC,aAAa,EAAb,UAAc,MAAW,EAAE,UAAe;YACzC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QAC5B,CAAC;QACD,WAAW,EAAX,UAAY,MAAW,EAAE,QAAiB;YACzC,MAAM,CAAC,EAAE,CAAC;QACX,CAAC;KACD,CAAC;IAWF;QAAqC,gCAA8B;QAIlE,sBAAY,OAAmB;YAAnB,wBAAA,EAAA,UAAiB,EAAE;YAA/B,YACC,iBAAO,SAEP;YADA,KAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;;QACzB,CAAC;QAEM,+BAAQ,GAAf;YACC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC;QACtB,CAAC;QACF,mBAAC;IAAD,CAAC,AAZD,CAAqC,uBAAU,GAY9C;IAZY,oCAAY;IAczB;;;OAGG;IACH,kBAAoE,IAAO,EAAE,OAAU;QAGtF,IAAM,QAAQ;YAAS,4BAAI;YAE1B;gBAAY,cAAc;qBAAd,UAAc,EAAd,qBAAc,EAAd,IAAc;oBAAd,yBAAc;;uBACzB,kBAAM,OAAO,CAAC;YACf,CAAC;YAGS,iCAAc,GAAxB,UAAyB,IAAW;gBAC3B,IAAA,2BAAI,CAAqB;gBACjC,YAAQ,CAAC,IAAI,EAAE,UAAC,IAAmC;oBAC1C,IAAA,4BAAU,CAAU;oBAC5B,UAAU,CAAC,IAAI,GAAG,IAAI,CAAC;gBACxB,CAAC,EAAE,UAAC,IAAW,IAAO,MAAM,CAAC,WAAO,CAAC,IAAI,CAAC,IAAI,WAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBAEhE,MAAM,CAAC,IAAI,CAAC;YACb,CAAC;YAES,yBAAM,GAAhB;gBACO,IAAA,oBAMa,EALlB,kBAAM,EACN,0BAAU,EACV,qBAA4C,EAA5C,yEAA4C,EAC5C,sBAAQ,EACR,mBAAwC,EAAxC,qEAAwC,CACrB;gBACpB,IAAM,gBAAgB,GAAG,WAAW,CAAC,IAAI,CAAC,QAAQ,EAAE,EAAE,QAAQ,CAAC,CAAC;gBAEhE,aAAM,CAAC,UAAU,EAAE,aAAa,CAAC,IAAI,CAAC,QAAQ,EAAE,EAAE,UAAU,CAAC,CAAC,CAAC;gBAC/D,EAAE,CAAC,CAAC,gBAAgB,IAAI,gBAAgB,CAAC,MAAM,CAAC,CAAC,CAAC;oBACjD,QAAQ,CAAC,IAAI,OAAb,QAAQ,EAAS,gBAAgB,EAAE;gBACpC,CAAC;gBAED,MAAM,CAAC,MAAM,EAAE,CAAC;YACjB,CAAC;YACF,eAAC;QAAD,CAAC,AAlCD,CAAuB,IAAI,GAkC1B;QA3BA;YADC,wBAAW,EAAE;;;;sDASb;QAfI,QAAQ;YADb,yBAAY,CAAC,QAAQ,iBAAkB;;WAClC,QAAQ,CAkCb;QACD,MAAM,CAAC,QAAQ,CAAC;IACjB,CAAC;IAvCD,4BAuCC;IAED,kBAAe,QAAQ,CAAC","sourcesContent":["import { assign } from '@dojo/core/lang';\nimport { diffProperty, afterRender, WidgetBase, InternalWNode, InternalHNode } from './WidgetBase';\nimport { decorate, isHNode, isWNode } from './d';\nimport { DiffType } from './diff';\nimport {\n\tConstructor,\n\tDNode,\n\tWidgetProperties\n} from './interfaces';\n\nexport interface GetProperties {\n\t<C, P extends WidgetProperties>(inject: C, properties: P): any;\n}\n\nexport interface GetChildren {\n\t<C>(inject: C, children: DNode[]): DNode[];\n}\n\n/**\n * The binding mappers for properties and children.\n */\nexport interface Mappers {\n\tgetProperties: GetProperties;\n\tgetChildren: GetChildren;\n}\n\n/**\n * Default noop Mappers for the container.\n */\nexport const defaultMappers: Mappers = {\n\tgetProperties(inject: any, properties: any): any {\n\t\treturn Object.create(null);\n\t},\n\tgetChildren(inject: any, children: DNode[]): DNode[] {\n\t\treturn [];\n\t}\n};\n\nexport interface InjectorProperties extends WidgetProperties {\n\tbind: any;\n\trender(): DNode;\n\tgetProperties?: GetProperties;\n\tproperties: WidgetProperties;\n\tgetChildren?: GetChildren;\n\tchildren: DNode[];\n}\n\nexport class BaseInjector<C> extends WidgetBase<InjectorProperties> {\n\n\tprivate _context: C;\n\n\tconstructor(context: C = <C> {}) {\n\t\tsuper();\n\t\tthis._context = context;\n\t}\n\n\tpublic toInject(): C {\n\t\treturn this._context;\n\t}\n}\n\n/**\n * Mixin that extends the supplied Injector class with the proxy `render` and passing the provided to `context` to the Injector\n * class via the constructor.\n */\nexport function Injector<C, T extends Constructor<BaseInjector<C>>>(Base: T, context: C): T {\n\n\t@diffProperty('render', DiffType.ALWAYS)\n\tclass Injector extends Base {\n\n\t\tconstructor(...args: any[]) {\n\t\t\tsuper(context);\n\t\t}\n\n\t\t@afterRender()\n\t\tprotected decoratateBind(node: DNode) {\n\t\t\tconst { bind } = this.properties;\n\t\t\tdecorate(node, (node: InternalHNode | InternalWNode) => {\n\t\t\t\tconst { properties } = node;\n\t\t\t\tproperties.bind = bind;\n\t\t\t}, (node: DNode) => { return isHNode(node) || isWNode(node); });\n\n\t\t\treturn node;\n\t\t}\n\n\t\tprotected render(): DNode {\n\t\t\tconst {\n\t\t\t\trender,\n\t\t\t\tproperties,\n\t\t\t\tgetProperties = defaultMappers.getProperties,\n\t\t\t\tchildren,\n\t\t\t\tgetChildren = defaultMappers.getChildren\n\t\t\t} = this.properties;\n\t\t\tconst injectedChildren = getChildren(this.toInject(), children);\n\n\t\t\tassign(properties, getProperties(this.toInject(), properties));\n\t\t\tif (injectedChildren && injectedChildren.length) {\n\t\t\t\tchildren.push(...injectedChildren);\n\t\t\t}\n\n\t\t\treturn render();\n\t\t}\n\t}\n\treturn Injector;\n}\n\nexport default Injector;\n"]}