{"version":3,"file":"icons.js","sourceRoot":"","sources":["../../src/support/icons.ts"],"names":[],"mappings":"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","sourcesContent":["'!has(\"url-api\")';\nimport './URL';\n\nimport global from '@dojo/core/global';\nimport request from '@dojo/core/request';\n\nconst globalURL: typeof URL = global.window.URL;\n\n/**\n * An object that corresponds to the JSON structure of the icon theme file\n */\nexport interface IconJson {\n\ticonDefinitions: {\n\t\t[name: string]: {\n\t\t\ticonPath: string;\n\t\t}\n\t};\n\tfolderExpanded: string;\n\tfolder: string;\n\tfile: string;\n\tfolderNames: {\n\t\t[name: string]: string;\n\t};\n\tfolderNamesExpanded: {\n\t\t[name: string]: string;\n\t};\n\tfileExtensions: {\n\t\t[name: string]: string;\n\t};\n\tfileNames: {\n\t\t[name: string]: string;\n\t};\n\tlanguageIds: {\n\t\t[name: string]: string;\n\t};\n}\n\nexport class IconResolver {\n\tprivate _config: IconJson;\n\tprivate _sourcePath: string;\n\n\tconstructor(sourcePath: string, config: IconJson) {\n\t\tthis._config = config;\n\t\tthis._sourcePath = (new globalURL(sourcePath, window.location.toString()).toString());\n\t}\n\n\t/**\n\t * Get the class name for an icon based on the folder name and if it is expanded or not\n\t * @param name The name of the folder\n\t * @param expanded If the expanded version of the icon should be used.  Defaults to `false`.\n\t */\n\tfolder(name: string, expanded: boolean = false): string {\n\t\tif (!expanded && name in this._config.folderNames) {\n\t\t\treturn this._config.folderNames[name];\n\t\t}\n\t\tif (expanded && name in this._config.folderNamesExpanded) {\n\t\t\treturn this._config.folderNamesExpanded[name];\n\t\t}\n\t\treturn expanded ? this._config.folderExpanded : this._config.folder;\n\t}\n\n\t/**\n\t * Get the class name for an icon based on the filename and optionally language.\n\t * @param name The name of the file\n\t * @param language An optional language which would override the extension.\n\t */\n\tfile(name: string, language: string = ''): string {\n\t\tif (name in this._config.fileNames) {\n\t\t\treturn this._config.fileNames[name];\n\t\t}\n\t\tif (language && language in this._config.languageIds) {\n\t\t\treturn this._config.languageIds[language];\n\t\t}\n\t\tconst extensions = name.split('.');\n\t\textensions.shift();\n\t\twhile (extensions.length) {\n\t\t\tconst current = extensions.join('.');\n\t\t\tif (current in this._config.fileExtensions) {\n\t\t\t\treturn this._config.fileExtensions[current];\n\t\t\t}\n\t\t\textensions.shift();\n\t\t}\n\t\treturn this._config.file;\n\t}\n\n\t/**\n\t * Resolve the URL for a given icon name\n\t * @param iconName The icon name to return a URL for\n\t */\n\tpublic iconUrl(iconName: string): string {\n\t\tconst iconPath = this._config.iconDefinitions[iconName] && this._config.iconDefinitions[iconName].iconPath;\n\t\tif (!iconPath) {\n\t\t\tthrow new TypeError(`Icon named \"${iconName}\" not found.`);\n\t\t}\n\t\treturn new globalURL(iconPath, this._sourcePath).toString();\n\t}\n}\n\n/**\n * Load the JSON data from a file for icons and return an instance of an icon resolver which is bound to the data from\n * the configuration file.\n * @param filename The filename of the JSON configuration for the icons.\n */\nexport async function load(filename: string): Promise<IconJson> {\n\treturn (await request(filename)).json<IconJson>();\n}\n"]}