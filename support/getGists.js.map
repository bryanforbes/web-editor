{"version":3,"file":"getGists.js","sourceRoot":"","sources":["../../src/support/getGists.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAAA,8CAAyC;IACzC,8CAAyC;IAgDzC,IAAM,UAAU,GAAG,yBAAyB,CAAC;IAC7C,IAAM,qBAAqB,GAAG,YAAY,CAAC;IAC3C,IAAM,gBAAgB,GAAG,4BAA4B,CAAC;IAEtD;;;OAGG;IACH,kBAAuC,QAAgB;uCAAG,cAAI;;;;4BAC5C,qBAAM,iBAAO,CAAC,GAAG,CAAI,UAAU,cAAS,QAAQ,WAAQ,CAAC,EAAA;;mCAAzD,SAAyD;wBAC5D,qBAAM,QAAQ,CAAC,IAAI,EAAU,EAAA;;gCAA7B,SAA6B;wBAC3C,sBAAO,KAAK;iCACV,MAAM,CAAC,UAAC,IAAI;gCACZ,GAAG,CAAC,CAAC,IAAM,GAAG,IAAI,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;oCAC9B,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,IAAI,KAAK,kBAAkB,IAAI,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,QAAQ,CAAC,WAAW,EAAE,KAAK,cAAc,CAAC;gCACjH,CAAC;4BACF,CAAC,CAAC;iCACD,GAAG,CAAC,UAAC,IAAI;gCACT,IAAI,WAAW,GAAG,EAAE,CAAC;gCACrB,GAAG,CAAC,CAAC,IAAM,GAAG,IAAI,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;oCAC9B,IAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;oCAC7B,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,KAAK,kBAAkB,IAAI,IAAI,CAAC,QAAQ,CAAC,WAAW,EAAE,KAAK,cAAc,CAAC,CAAC,CAAC;wCACxF,WAAW,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC,gBAAgB,EAAE,qBAAqB,CAAC,CAAC;oCAChF,CAAC;gCACF,CAAC;gCACD,MAAM,CAAC;oCACN,WAAW,EAAE,IAAI,CAAC,WAAW;oCAC7B,WAAW,aAAA;iCACX,CAAC;4BACH,CAAC,CAAC,EAAC;;;;KACJ;IAtBD,2BAsBC","sourcesContent":["import request from '@dojo/core/request';\nimport Task from '@dojo/core/async/Task';\n\ninterface GistFile {\n\t'filename': string;\n\t'type': string;\n\t'language': string;\n\t'raw_url': string;\n\t'size': number;\n}\n\ninterface Gist {\n\t'url': string;\n\t'forks_url': string;\n\t'commits_url': string;\n\t'id': string;\n\t'git_pull_url': string;\n\t'git_push_url': string;\n\t'html_url': string;\n\t'files': { [filename: string]: GistFile };\n\t'public': boolean;\n\t'created_at': string;\n\t'updated_at': string;\n\t'description': string;\n\t'comments': number;\n\t'user': string | null;\n\t'comments_url': string;\n\t'owner': {\n\t\t'login': string;\n\t\t'id': number;\n\t\t'avatar_url': string;\n\t\t'gravatar_id': string;\n\t\t'url': string;\n\t\t'html_url': string;\n\t\t'followers_url': string;\n\t\t'following_url': string;\n\t\t'gists_url': string;\n\t\t'starred_url': string;\n\t\t'subscriptions_url': string;\n\t\t'organizations_url': string;\n\t\t'repos_url': string;\n\t\t'events_url': string;\n\t\t'received_events_url': string;\n\t\t'type': string;\n\t\t'site_admin': boolean;\n\t};\n\t'truncated': boolean;\n}\n\nconst API_GITHUB = 'https://api.github.com/';\nconst GIST_REPLACEMENT_HOST = 'rawgit.com';\nconst GIST_SOURCE_HOST = 'gist.githubusercontent.com';\n\n/**\n * Return an array of objects which describe gists that contain `project.json` files that can be loaded\n * @param username The GitHub username to retrieve the gists for\n */\nexport default async function getGists(username: string): Task<{ description: string; projectJson: string; }[]> {\n\tconst response = await request.get(`${API_GITHUB}users/${username}/gists`);\n\tconst gists = await response.json<Gist[]>();\n\treturn gists\n\t\t.filter((gist) => {\n\t\t\tfor (const key in gist.files) {\n\t\t\t\treturn gist.files[key].type === 'application/json' && gist.files[key].filename.toLowerCase() === 'project.json';\n\t\t\t}\n\t\t})\n\t\t.map((gist) => {\n\t\t\tlet projectJson = '';\n\t\t\tfor (const key in gist.files) {\n\t\t\t\tconst file = gist.files[key];\n\t\t\t\tif (file.type === 'application/json' && file.filename.toLowerCase() === 'project.json') {\n\t\t\t\t\tprojectJson = file['raw_url'].replace(GIST_SOURCE_HOST, GIST_REPLACEMENT_HOST);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn {\n\t\t\t\tdescription: gist.description,\n\t\t\t\tprojectJson\n\t\t\t};\n\t\t});\n}\n"]}