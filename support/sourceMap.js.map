{"version":3,"file":"sourceMap.js","sourceRoot":"","sources":["../../src/support/sourceMap.ts"],"names":[],"mappings":";;;;;;;;;;;IAAA,yCAA8E;IAE9E,IAAM,gBAAgB,GAAG,6FAA6F,CAAC;IAEvH;;;;;;OAMG;IACH,kBAAyB,QAAgB,EAAE,IAAoC,EAAE,UAAkB;QAClG,IAAM,MAAM,GAAG,IAAI,uBAAU,EAAE,CAAC;QAChC,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;QACrB,EAAE,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;YACd,MAAM,CAAC,GAAG,CAAC,uBAAU,CAAC,uBAAuB,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,gBAAgB,EAAE,EAAE,CAAC,EAAE,IAAI,8BAAiB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QAC1H,CAAC;QACD,IAAI,CAAC,CAAC;YACL,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACvB,CAAC;QACD,MAAM,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;QACvB,MAAM,CAAC,MAAM,CAAC,qBAAqB,EAAE,CAAC;IACvC,CAAC;IAXD,4BAWC","sourcesContent":["import { CodeWithSourceMap, SourceMapConsumer, SourceNode } from 'source-map';\n\nconst SOURCE_MAP_REGEX = /(?:\\/{2}[#@]{1,2}|\\/\\*)\\s+sourceMappingURL\\s*=\\s*(data:(?:[^;]+;)+base64,)?(\\S+)(?:\\n\\s*)?$/;\n\n/**\n * Wrap code, which has a source map, with a preamble and a postscript and return the wrapped code with an updated\n * map.\n * @param preamble A string to append before the code\n * @param code The code, with an optional source map in string format\n * @param postscript A string to append after the code\n */\nexport function wrapCode(preamble: string, code: { map?: string, code: string }, postscript: string): CodeWithSourceMap  {\n\tconst result = new SourceNode();\n\tresult.add(preamble);\n\tif (code.map) {\n\t\tresult.add(SourceNode.fromStringWithSourceMap(code.code.replace(SOURCE_MAP_REGEX, ''), new SourceMapConsumer(code.map)));\n\t}\n\telse {\n\t\tresult.add(code.code);\n\t}\n\tresult.add(postscript);\n\treturn result.toStringWithSourceMap();\n}\n"]}