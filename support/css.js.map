{"version":3,"file":"css.js","sourceRoot":"","sources":["../../src/support/css.ts"],"names":[],"mappings":"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","sourcesContent":["import { ProjectFile, ProjectFileType } from '@dojo/cli-export-project/interfaces/project.json';\nimport { EmitFile } from '../interfaces';\nimport postcss from './postcss';\nimport cssnext from './postcssCssnext';\nimport postcssModules from './postcssModules';\n\n/**\n * Take a map of classes and return the text of a `.d.ts` file which describes those class names\n * @param classes A map of classes\n */\nfunction classesToDefinition(classes: { [className: string]: string; }): string {\n\treturn Object.keys(classes)\n\t\t.reduce((previous, className) => {\n\t\t\treturn previous + `export const ${className}: string;\\n`;\n\t\t}, '');\n}\n\n/**\n * Take a map of classes and return an AMD module which returns an object of those class names\n * @param classes A map of classes\n * @param key A string which will be the key for the object map\n */\nfunction classesToAMD(classes: { [className: string]: string; }, key: string): string {\n\tconst result = Object.keys(classes)\n\t\t.map((className) => `\\t'${className}': '${classes[className]}'`);\n\tresult.push(`\\t' _key': '${key}'`);\n\n\treturn `define([], function () {\n\t\treturn {\n\t\t${result.join(',\\n')}\n\t\t};\n\t});\\n`;\n}\n\n/**\n * Generate definition files for CSS Modules.\n *\n * Essentially this function takes a CSS Module, generates the modularised class names and then returns a `.d.ts` file\n * that contains the source class names which can be used to import the CSS Module into a TypeScript module.\n * @param files Project files to generate definitions for.\n */\nexport async function getDefinitions(...files: ProjectFile[]): Promise<ProjectFile[]> {\n\n\tlet mappedClasses: { [className: string]: string } | undefined;\n\tfunction getJSON(filename: undefined, json: { [className: string]: string }) {\n\t\tfilename;\n\t\tmappedClasses = json;\n\t}\n\n\tconst processor = postcss([\n\t\tpostcssModules({ getJSON })\n\t]);\n\n\tconst definitionFiles: ProjectFile[] = [];\n\tfor (let i = 0; i < files.length; i++) {\n\t\tconst file = files[i];\n\t\tmappedClasses = undefined;\n\t\tawait processor.process(file.text);\n\t\tif (mappedClasses) {\n\t\t\tdefinitionFiles.push({\n\t\t\t\tname: file.name + '.d.ts',\n\t\t\t\ttext: classesToDefinition(mappedClasses),\n\t\t\t\ttype: ProjectFileType.Definition\n\t\t\t});\n\t\t}\n\t}\n\treturn definitionFiles;\n}\n\n/**\n * Emit transpiled CSS Modules.\n *\n * This function takes in any number of project files and resolves with an array of emitted files which will contain two files\n * for each CSS module, a AMD module which returns a map of class names which have been localised and a CSS file which contains\n * the localised CSS.\n * @param files Project files to generate emitted CSS for.\n */\nexport async function getEmit(...files: ProjectFile[]): Promise<EmitFile[]> {\n\n\tlet mappedClasses: { [className: string]: string } | undefined;\n\tfunction getJSON(filename: undefined, json: { [className: string]: string }) {\n\t\tfilename;\n\t\tmappedClasses = json;\n\t}\n\n\tconst processor = postcss([\n\t\tcssnext({\n\t\t\tfeatures: {\n\t\t\t\tautoprefixer: {\n\t\t\t\t\tbrowsers: [ 'last 2 versions', 'ie >= 11' ]\n\t\t\t\t}\n\t\t\t}\n\t\t}),\n\t\tpostcssModules({ getJSON })\n\t]);\n\n\tconst emitFiles: EmitFile[] = [];\n\tfor (let i = 0; i < files.length; i++) {\n\t\tconst file = files[i];\n\t\tmappedClasses = undefined;\n\t\tconst result = await processor.process(file.text);\n\t\temitFiles.push({\n\t\t\tname: file.name,\n\t\t\ttext: result.css,\n\t\t\ttype: ProjectFileType.CSS\n\t\t});\n\n\t\tif (mappedClasses) {\n\t\t\tconst key = file.name.split('/').pop()!.replace(/(\\.m)?\\.css$/, '');\n\t\t\temitFiles.push({\n\t\t\t\tname: file.name + '.js',\n\t\t\t\ttext: classesToAMD(mappedClasses, key),\n\t\t\t\ttype: ProjectFileType.JavaScript\n\t\t\t});\n\t\t}\n\t}\n\treturn emitFiles;\n}\n"]}