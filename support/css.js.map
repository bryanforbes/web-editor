{"version":3,"file":"css.js","sourceRoot":"","sources":["../../src/support/css.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAEA,qCAAgC;IAChC,mDAAuC;IACvC,mDAA8C;IAE9C,6BAA6B,OAAyC;QACrE,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC;aACzB,MAAM,CAAC,UAAC,QAAQ,EAAE,SAAS;YAC3B,MAAM,CAAC,QAAQ,IAAG,kBAAgB,SAAS,gBAAa,CAAA,CAAC;QAC1D,CAAC,EAAE,EAAE,CAAC,CAAC;IACT,CAAC;IAED,sBAAsB,OAAyC;QAC9D,IAAM,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC;aACjC,GAAG,CAAC,UAAC,SAAS,IAAK,OAAA,QAAM,SAAS,YAAO,OAAO,CAAC,SAAS,CAAC,MAAG,EAA3C,CAA2C,CAAC;aAC/D,IAAI,CAAC,KAAK,CAAC,CAAC;QACd,MAAM,CAAC,iDAEJ,MAAM,sBAEH,CAAC;IACR,CAAC;IAED;QAAqC,eAAuB;aAAvB,UAAuB,EAAvB,qBAAuB,EAAvB,IAAuB;YAAvB,0BAAuB;;;YAG3D,iBAAiB,QAAmB,EAAE,IAAqC;gBAC1E,QAAQ,CAAC;gBACT,aAAa,GAAG,IAAI,CAAC;YACtB,CAAC;gBAJG,aAAa,EAMX,SAAS,EAIT,eAAe,KAEd,IAAI;;;;oCANO,iBAAO,CAAC;4BACzB,wBAAc,CAAC,EAAE,OAAO,SAAA,EAAE,CAAC;yBAC3B,CAAC;0CAEqC,EAAE;4BAC5B,CAAC;;;6BAAE,CAAA,CAAC,GAAG,KAAK,CAAC,MAAM,CAAA;+BAClB,KAAK,CAAC,CAAC,CAAC;wBACrB,aAAa,GAAG,SAAS,CAAC;wBAC1B,qBAAM,SAAS,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,EAAA;;wBAAlC,SAAkC,CAAC;wBACnC,EAAE,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC;4BACnB,eAAe,CAAC,IAAI,CAAC;gCACpB,IAAI,EAAE,IAAI,CAAC,IAAI,GAAG,OAAO;gCACzB,IAAI,EAAE,mBAAmB,CAAC,aAAa,CAAC;gCACxC,IAAI,EAAE,kBAA0B;6BAChC,CAAC,CAAC;wBACJ,CAAC;;;wBAVgC,CAAC,EAAE,CAAA;;4BAYrC,sBAAO,eAAe,EAAC;;;;KACvB;IA1BD,wCA0BC;IAED;QAA8B,eAAuB;aAAvB,UAAuB,EAAvB,qBAAuB,EAAvB,IAAuB;YAAvB,0BAAuB;;;YAGpD,iBAAiB,QAAmB,EAAE,IAAqC;gBAC1E,QAAQ,CAAC;gBACT,aAAa,GAAG,IAAI,CAAC;YACtB,CAAC;gBAJG,aAAa,EAMX,SAAS,EAWT,SAAS,KAER,IAAI;;;;oCAbO,iBAAO,CAAC;4BACzB,wBAAO,CAAC;gCACP,QAAQ,EAAE;oCACT,YAAY,EAAE;wCACb,QAAQ,EAAE,CAAE,iBAAiB,EAAE,UAAU,CAAE;qCAC3C;iCACD;6BACD,CAAC;4BACF,wBAAc,CAAC,EAAE,OAAO,SAAA,EAAE,CAAC;yBAC3B,CAAC;oCAE4B,EAAE;4BACnB,CAAC;;;6BAAE,CAAA,CAAC,GAAG,KAAK,CAAC,MAAM,CAAA;+BAClB,KAAK,CAAC,CAAC,CAAC;wBACrB,aAAa,GAAG,SAAS,CAAC;wBACX,qBAAM,SAAS,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,EAAA;;iCAAlC,SAAkC;wBACjD,SAAS,CAAC,IAAI,CAAC;4BACd,IAAI,EAAE,IAAI,CAAC,IAAI;4BACf,IAAI,EAAE,MAAM,CAAC,GAAG;4BAChB,IAAI,EAAE,WAAmB;yBACzB,CAAC,CAAC;wBAEH,EAAE,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC;4BACnB,SAAS,CAAC,IAAI,CAAC;gCACd,IAAI,EAAE,IAAI,CAAC,IAAI,GAAG,KAAK;gCACvB,IAAI,EAAE,YAAY,CAAC,aAAa,CAAC;gCACjC,IAAI,EAAE,kBAA0B;6BAChC,CAAC,CAAC;wBACJ,CAAC;;;wBAhBgC,CAAC,EAAE,CAAA;;4BAkBrC,sBAAO,SAAS,EAAC;;;;KACjB;IAvCD,0BAuCC","sourcesContent":["import { ProjectFile, ProjectFileType } from '@dojo/cli-emit-editor/interfaces/editor';\nimport { EmitFile } from '../interfaces';\nimport postcss from './postcss';\nimport cssnext from './postcssCssnext';\nimport postcssModules from './postcssModules';\n\nfunction classesToDefinition(classes: { [className: string]: string; }): string {\n\treturn Object.keys(classes)\n\t\t.reduce((previous, className) => {\n\t\t\treturn previous + `export const ${className}: string;\\n`;\n\t\t}, '');\n}\n\nfunction classesToAMD(classes: { [className: string]: string; }): string {\n\tconst result = Object.keys(classes)\n\t\t.map((className) => `\\t'${className}': '${classes[className]}'`)\n\t\t.join(',\\n');\n\treturn `define([], function () {\n\t\treturn {\n\t\t${result}\n\t\t};\n\t});\\n`;\n}\n\nexport async function getDefinitions(...files: ProjectFile[]) {\n\n\tlet mappedClasses: { [className: string]: string } | undefined;\n\tfunction getJSON(filename: undefined, json: { [className: string]: string }) {\n\t\tfilename;\n\t\tmappedClasses = json;\n\t}\n\n\tconst processor = postcss([\n\t\tpostcssModules({ getJSON })\n\t]);\n\n\tconst definitionFiles: ProjectFile[] = [];\n\tfor (let i = 0; i < files.length; i++) {\n\t\tconst file = files[i];\n\t\tmappedClasses = undefined;\n\t\tawait processor.process(file.text);\n\t\tif (mappedClasses) {\n\t\t\tdefinitionFiles.push({\n\t\t\t\tname: file.name + '.d.ts',\n\t\t\t\ttext: classesToDefinition(mappedClasses),\n\t\t\t\ttype: ProjectFileType.Definition\n\t\t\t});\n\t\t}\n\t}\n\treturn definitionFiles;\n}\n\nexport async function getEmit(...files: ProjectFile[]): Promise<EmitFile[]> {\n\n\tlet mappedClasses: { [className: string]: string } | undefined;\n\tfunction getJSON(filename: undefined, json: { [className: string]: string }) {\n\t\tfilename;\n\t\tmappedClasses = json;\n\t}\n\n\tconst processor = postcss([\n\t\tcssnext({\n\t\t\tfeatures: {\n\t\t\t\tautoprefixer: {\n\t\t\t\t\tbrowsers: [ 'last 2 versions', 'ie >= 11' ]\n\t\t\t\t}\n\t\t\t}\n\t\t}),\n\t\tpostcssModules({ getJSON })\n\t]);\n\n\tconst emitFiles: EmitFile[] = [];\n\tfor (let i = 0; i < files.length; i++) {\n\t\tconst file = files[i];\n\t\tmappedClasses = undefined;\n\t\tconst result = await processor.process(file.text);\n\t\temitFiles.push({\n\t\t\tname: file.name,\n\t\t\ttext: result.css,\n\t\t\ttype: ProjectFileType.CSS\n\t\t});\n\n\t\tif (mappedClasses) {\n\t\t\temitFiles.push({\n\t\t\t\tname: file.name + '.js',\n\t\t\t\ttext: classesToAMD(mappedClasses),\n\t\t\t\ttype: ProjectFileType.JavaScript\n\t\t\t});\n\t\t}\n\t}\n\treturn emitFiles;\n}\n"]}