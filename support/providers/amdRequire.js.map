{"version":3,"file":"amdRequire.js","sourceRoot":"","sources":["../../../src/support/providers/amdRequire.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;IAAA,8CAAyC;IACzC,wDAAmD;IACnD,sDAAiD;IACjD,wDAAmD;IAGnD;QAAwC,sCAAQ;QAS/C,4BAAY,GAAW,EAAE,QAAa;YAAtC,YACC,iBAAO,SAQP;YAhBQ,cAAQ,GAAG,KAAK,CAAC;YAUzB,KAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;YAC1B,KAAI,CAAC,OAAO,GAAG,IAAI,iBAAO,EAAE,CAAC;YAC7B,KAAI,CAAC,EAAE,GAAG,IAAI,CAAC;YACf,KAAI,CAAC,MAAM,GAAG,GAAG,CAAC;YAClB,KAAI,CAAC,UAAU,GAAG,IAAI,CAAC;YACvB,KAAI,CAAC,GAAG,GAAU,OAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;;QACvC,CAAC;QAED,wCAAW,GAAX;YACC,MAAM,CAAC,cAAI,CAAC,MAAM,CAAc,IAAI,KAAK,CAAC,2BAA2B,CAAC,CAAC,CAAC;QACzE,CAAC;QAED,iCAAI,GAAJ;YACC,MAAM,CAAC,cAAI,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,oBAAoB,CAAC,CAAC,CAAC;QACrD,CAAC;QAED,qCAAQ,GAAR;YACC,MAAM,CAAC,cAAI,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,wBAAwB,CAAC,CAAC,CAAC;QACzD,CAAC;QAED,iCAAI,GAAJ;YACC,MAAM,CAAC,cAAI,CAAC,OAAO,CAAC,OAAO,IAAI,CAAC,SAAS,KAAK,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC;QACvG,CAAC;QAED,iCAAI,GAAJ;YACC,MAAM,CAAC,cAAI,CAAC,OAAO,CAAC,OAAO,IAAI,CAAC,SAAS,KAAK,QAAQ,GAAG,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,CAAC,CAAC;QACxH,CAAC;QAED,gCAAG,GAAH;YACC,MAAM,CAAC,cAAI,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,mBAAmB,CAAC,CAAC,CAAC;QACpD,CAAC;QACF,yBAAC;IAAD,CAAC,AA3CD,CAAwC,kBAAQ,GA2C/C;IA3CY,gDAAkB;IA6C/B;;;;;OAKG;IACH,oBAAmC,GAAW,EAAE,OAAwB;QACvE,qHAAqH;QACrH,IAAM,OAAO,GAAG,mDAAmD,CAAC;QACpE,IAAM,SAAS,GAAG,eAAe,CAAC;QAClC,EAAE,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;YAC/C,MAAM,CAAC,IAAI,cAAI,CAAqB,UAAC,OAAO,EAAE,MAAM;gBACnD,IAAM,GAAG,GAAG,GAAG,CAAC,OAAO,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;gBACzC,IAAI,CAAC;oBACJ,OAAO,CAAC,CAAE,GAAG,CAAE,EAAE,UAAC,MAAM,IAAK,OAAA,OAAO,CAAC,IAAI,kBAAkB,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC,EAA5C,CAA4C,CAAC,CAAC;gBAC5E,CAAC;gBACD,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;oBACV,MAAM,CAAC,CAAC,CAAC,CAAC;gBACX,CAAC;YACF,CAAC,CAAC,CAAC;QACJ,CAAC;QACD,MAAM,CAAC,aAAG,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;IAC1B,CAAC;IAhBD,6BAgBC","sourcesContent":["import Task from '@dojo/core/async/Task';\nimport xhr from '@dojo/core/request/providers/xhr';\nimport Headers from '@dojo/core/request/Headers';\nimport Response from '@dojo/core/request/Response';\nimport { RequestOptions } from '@dojo/core/request/interfaces';\n\nexport class AMDRequireResponse extends Response {\n\tprivate _response: any;\n\treadonly bodyUsed = false;\n\treadonly headers: Headers;\n\treadonly ok: boolean;\n\treadonly status: number;\n\treadonly statusText: string;\n\treadonly url: string;\n\n\tconstructor(url: string, response: any) {\n\t\tsuper();\n\n\t\tthis._response = response;\n\t\tthis.headers = new Headers();\n\t\tthis.ok = true;\n\t\tthis.status = 200;\n\t\tthis.statusText = 'OK';\n\t\tthis.url = (<any> require).toUrl(url);\n\t}\n\n\tarrayBuffer(): Task<ArrayBuffer> {\n\t\treturn Task.reject<ArrayBuffer>(new Error('ArrayBuffer not supported'));\n\t}\n\n\tblob(): Task<Blob> {\n\t\treturn Task.reject(new Error('Blob not supported'));\n\t}\n\n\tformData(): Task<FormData> {\n\t\treturn Task.reject(new Error('FormData not supported'));\n\t}\n\n\tjson(): Task<any> {\n\t\treturn Task.resolve(typeof this._response === 'string' ? JSON.parse(this._response) : this._response);\n\t}\n\n\ttext(): Task<string> {\n\t\treturn Task.resolve(typeof this._response === 'string' ? this._response : this._response && this._response.toString());\n\t}\n\n\txml(): Task<Document> {\n\t\treturn Task.reject(new Error('XML not supported'));\n\t}\n}\n\n/**\n * When requesting local resources, use `require()` to retrieve them, assuming they have been made available as\n * modules in a bundle or pre-cached in the AMD loader.\n * @param url The URL to request\n * @param options Any request options\n */\nexport default function amdRequire(url: string, options?: RequestOptions): Task<AMDRequireResponse> {\n\t/* we need to detect and rewrite URLs from @dojo/i18n/cldr/load - see issue https://github.com/dojo/i18n/issues/83 */\n\tconst i18nUri = /^https:\\/\\/unpkg\\.com\\/@dojo\\/i18n[^\\/]*\\/cldr\\//i;\n\tconst remoteUri = /^https?:\\/\\//i;\n\tif (i18nUri.test(url) || !remoteUri.test(url)) {\n\t\treturn new Task<AMDRequireResponse>((resolve, reject) => {\n\t\t\tconst mid = url.replace(i18nUri, 'src/');\n\t\t\ttry {\n\t\t\t\trequire([ mid ], (module) => resolve(new AMDRequireResponse(mid, module)));\n\t\t\t}\n\t\t\tcatch (e) {\n\t\t\t\treject(e);\n\t\t\t}\n\t\t});\n\t}\n\treturn xhr(url, options);\n}\n"]}